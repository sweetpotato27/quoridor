(()=>{var t={10:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},704:(t,e)=>{!function(t){"use strict";e.encode=function(e){var r,n=new Uint8Array(e),i=n.length,o="";for(r=0;r<i;r+=3)o+=t[n[r]>>2],o+=t[(3&n[r])<<4|n[r+1]>>4],o+=t[(15&n[r+1])<<2|n[r+2]>>6],o+=t[63&n[r+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(e){var r,n,i,o,s,a=.75*e.length,A=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),d=new Uint8Array(c);for(r=0;r<A;r+=4)n=t.indexOf(e[r]),i=t.indexOf(e[r+1]),o=t.indexOf(e[r+2]),s=t.indexOf(e[r+3]),d[l++]=n<<2|i>>4,d[l++]=(15&i)<<4|o>>2,d[l++]=(3&o)<<6|63&s;return c}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},767:t=>{function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((r=n[i])===e||r.fn===e){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),r=this._callbacks["$"+t],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(r){n=0;for(var i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},192:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(15),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap);"]),s.push([t.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html{background:#4d618b}body{line-height:1;width:100vw;height:100vh;display:flex;justify-content:center}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}@media only screen and (max-width: 321px){table{font-size:1em}.hide{display:none}#board{width:95%;min-height:304px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:33px;height:33px;border:2px solid #4d618b;background:#7686a8}tr{height:33px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.3em;line-height:36px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:10px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1em;max-width:75px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 376px)and (min-width: 322px){table{font-size:1em}.hide{display:none}#board{width:95%;max-height:3360px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:36px;height:36px;border:2px solid #4d618b;background:#7686a8}tr{height:43px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.7em;line-height:36px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:10px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1em;max-width:75px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 640px)and (min-width: 377px){table{font-size:1em}.hide{display:none}#board{width:387px;max-height:387px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:39px;height:39px;border:2px solid #4d618b;background:#7686a8}tr{height:43px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.7em;line-height:43px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:13px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1.25em;max-width:80px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 768px)and (min-width: 641px){table{font-size:1em}.hide{display:none}#board{width:495px;height:495px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:49px;height:49px;border:3px solid #4d618b;background:#7686a8}tr{height:55px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:30px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (max-width: 1024px)and (min-width: 769px){table{font-size:1em}.hide{display:none}#board{width:495px;height:495px;margin-top:1em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:49px;height:49px;border:3px solid #4d618b;background:#7686a8}tr{height:55px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1em;cursor:pointer;border:none;margin:auto;height:55px;width:133px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:5px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (max-width: 1440px)and (min-width: 1025px){table{font-size:1em}.hide{display:none}#board{width:630px;height:630px;margin-top:1em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:60px;height:60px;border:5px solid #4d618b;background:#7686a8}tr{height:70px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-div>p{font-family:"Quantico",sans-serif;font-size:1em}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1em;cursor:pointer;border:none;margin:auto;height:55px;width:133px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:5px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (min-width: 1441px){table{font-size:1em}.hide{display:none}#board{width:720px;height:720px;margin-top:3em;margin-left:auto;margin-right:auto}.wall-top{border-top:5px solid #ffb000;z-index:9}.wall-bottom{border-bottom:5px solid #ffb000;z-index:9}.wall-right{border-right:5px solid #ffb000;z-index:9}.wall-left{border-left:5px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:70px;height:70px;border:5px solid #4d618b;background:#7686a8}tr{height:80px}.button{padding:5px 7px}.controller-div{margin:0 auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-div>p{font-family:"Quantico",sans-serif;font-size:1.5em}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1.5em;cursor:pointer;border:none;margin:0 auto;height:75px;width:200px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:3em;line-height:80px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;font-size:2em;padding:20px;margin:0 auto}.wall-counter-div{margin-top:2em;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:2em;margin:auto}}#restart-div{position:fixed;display:flex;flex-direction:column;font-size:2em;padding:15px;margin:200px;background-color:#fff;width:400px;height:200px}#restart-div h1{margin:10px auto}#restart-div button{margin:auto;width:30%;height:15%}.buttonTest{width:300px;height:100px}#roomForm{background:rgba(0,0,0,.15);margin:auto}#formDiv{margin:30% auto}#roomInput{border:none;padding:0 1rem;flex-grow:1;border-radius:2rem;margin:.25rem}#roomInput:focus{outline:none}#roomButton{background:#333;border:none;padding:0 1rem;margin:.25rem;border-radius:3px;outline:none;color:#fff}#roomButton:hover{background:gray}#lobby-div{width:80%}#lobby-div>h1{background:#fff;text-align:center}#lobby-form{background:rgba(0,0,0,.15);padding:.25rem;position:fixed;bottom:0;left:0;right:0;display:flex;height:3rem;box-sizing:border-box;backdrop-filter:blur(10px)}#lobby-input{border:none;padding:0 1rem;flex-grow:1;border-radius:2rem;margin:.25rem}#lobby-input:focus{outline:none}#lobby-form>button{background:#333;border:none;padding:0 1rem;margin:.25rem;border-radius:3px;outline:none;color:#fff}#lobby-form>button:hover{background:gray}#lobby-messages{background:#fff;list-style-type:none;margin:100px 0;padding:0;width:100%;height:100%}#lobby-messages>li{padding:.5rem 1rem}#lobby-messages>li:nth-child(odd){background:#efefef}#lobby-start-game{width:100px;height:50px}#splash-div{background:#a6b1c9;width:21em;height:21em;margin:15em auto auto auto;display:flex;flex-direction:column;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.btn{background:#b8c3d9;border:none;margin:auto;height:5em;width:13em;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.btn:hover{transition:.3s ease-in-out;transform:scale(1.1);background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#form-div{background:#a6b1c9;width:21em;height:21em;margin:15em auto auto auto;display:flex;flex-direction:column;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#room-form{width:100%;height:100%;display:flex;flex-direction:column}#room-input{text-align:center;width:50%;margin:auto;line-height:1.5;font:700 1.2rem "Roboto Slab",sans-serif;padding:1em 2em;letter-spacing:.05rem}#room-button{margin:auto}#lobby-rooms-list-div{background:#a6b1c9;width:21em;margin:15em auto auto auto;display:flex;flex-direction:column;justify-content:center;align-items:center;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#lobby-rooms-list-div>ul>li>button{margin:1.3em}.btn{color:#403174;transition:color .25s .0833333333s;position:relative}.btn::before,.btn::after{border:0 solid transparent;box-sizing:border-box;content:"";pointer-events:none;position:absolute;width:0;height:0;bottom:0;right:0}.btn::before{border-bottom-width:4px;border-left-width:4px}.btn::after{border-top-width:4px;border-right-width:4px}.btn:hover{color:#b1a9cd}.btn:hover::before,.btn:hover::after{border-color:#b1a9cd;transition:border-color 0s,width .25s,height .25s;width:100%;height:100%}.btn:hover::before{transition-delay:0s,0s,.25s}.btn:hover::after{transition-delay:0s,.25s,0s}.controller-btn{color:#403174;transition:color .25s .0833333333s;position:relative}.controller-btn::before,.controller-btn::after{border:0 solid transparent;box-sizing:border-box;content:"";pointer-events:none;position:absolute;width:0;height:0;bottom:0;right:0}.controller-btn::before{border-bottom-width:4px;border-left-width:4px}.controller-btn::after{border-top-width:4px;border-right-width:4px}.controller-btn:hover{color:#b1a9cd}.controller-btn:hover::before,.controller-btn:hover::after{border-color:#b1a9cd;transition:border-color 0s,width .25s,height .25s;width:100%;height:100%}.controller-btn:hover::before{transition-delay:0s,0s,.25s}.controller-btn:hover::after{transition-delay:0s,.25s,0s}.btn{cursor:pointer;line-height:1.5;font:700 1.2rem "Roboto Slab",sans-serif;padding:1em 2em;letter-spacing:.05rem}#winner-div{background:#a6b1c9;width:30vw;height:30vw;margin:auto;position:relative}#winner-message{color:#403174;font-family:"Quantico",sans-serif;font-size:3em;font-weight:bold;text-align:center;position:absolute;bottom:50%}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"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D,OACC,gBAAA,CACA,YAAA,CACA,qBAAA,CAGD,MACC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QACC,eAAA,CAGD,gBACC,aAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAED,kBACC,iCAAA,CACA,eAAA,CAED,gBACC,kBAAA,CACA,iCAAA,CACA,eAAA,CACA,cAAA,CACA,WAAA,CACA,aAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAMF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,aAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAED,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,aAAA,CACA,YAAA,CACA,aAAA,CAGD,kBACC,cAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,aAAA,CACA,WAAA,CAAA,CAKF,aACC,cAAA,CACA,YAAA,CACA,qBAAA,CACA,aAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CAGD,gBACC,gBAAA,CAGD,oBACC,WAAA,CACA,SAAA,CACA,UAAA,CAGD,YACC,WAAA,CACA,YAAA,CAGD,UACC,0BAAA,CACA,WAAA,CAGD,SACC,eAAA,CAGD,WACC,WAAA,CACA,cAAA,CACA,WAAA,CACA,kBAAA,CACA,aAAA,CAGD,iBACC,YAAA,CAGD,YACC,eAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,UAAA,CAED,kBACC,eAAA,CAGD,WAEC,SAAA,CAED,cACC,eAAA,CACA,iBAAA,CAED,YACC,0BAAA,CACA,cAAA,CACA,cAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,0BAAA,CAED,aACC,WAAA,CACA,cAAA,CACA,WAAA,CACA,kBAAA,CACA,aAAA,CAED,mBAAA,YAAA,CACA,mBACC,eAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,UAAA,CAED,yBACC,eAAA,CAGD,gBACC,eAAA,CACA,oBAAA,CACA,cAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAED,mBAAA,kBAAA,CACA,kCAAA,kBAAA,CACA,kBACC,WAAA,CACA,WAAA,CAID,YACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,oKACC,CAOF,KACC,kBAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,UAAA,CACA,oCAAA,CACA,iKACC,CAOF,WACC,0BAAA,CACA,oBAAA,CACA,kBAAA,CACA,oKACC,CAQF,UACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,oKACC,CAOF,WACC,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAGD,YACC,iBAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACE,wCAAA,CACA,eAAA,CACA,qBAAA,CAGH,aACE,WAAA,CAIF,sBACC,kBAAA,CACA,UAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,oKACC,CAQF,mCACC,YAAA,CAyDD,KAhDE,aAiD4B,CAhD5B,kCAAA,CACA,iBAAA,CAEA,yBAEE,0BAAA,CACA,qBAAA,CACA,UAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CAAA,QAAA,CAEA,QAAA,CACA,OAAA,CAGF,aAGE,uBA6B4C,CA5B5C,qBA4B4C,CAzB9C,YAGE,oBAsB4C,CArB5C,sBAqB4C,CAlB9C,WACE,aAiBmC,CAfnC,qCAEE,oBAaiC,CAZjC,iDAAA,CACA,UAAA,CACA,WAAA,CAGF,mBAAA,2BAAA,CAEA,kBAAA,2BAAA,CAOJ,gBAnDE,aAoD4B,CAnD5B,kCAAA,CACA,iBAAA,CAEA,+CAEE,0BAAA,CACA,qBAAA,CACA,UAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CAAA,QAAA,CAEA,QAAA,CACA,OAAA,CAGF,wBAGE,uBAgC4C,CA/B5C,qBA+B4C,CA5B9C,uBAGE,oBAyB4C,CAxB5C,sBAwB4C,CArB9C,sBACE,aAoBmC,CAlBnC,2DAEE,oBAgBiC,CAfjC,iDAAA,CACA,UAAA,CACA,WAAA,CAGF,8BAAA,2BAAA,CAEA,6BAAA,2BAAA,CAYJ,KAEE,cAAA,CACA,eAAA,CACA,wCAAA,CACA,eAAA,CACA,qBAAA,CAKF,YACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CAED,gBACC,aAAA,CACA,iCAAA,CACA,aAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CACA,UAAA",sourcesContent:["\r\n\r\n/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap');\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\n\r\n\r\nhtml {\r\n\tbackground: #4D618B;\r\n}\r\n\r\nbody {\r\n\tline-height: 1;\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\n\r\n/*\r\n\tmedia queries\r\n*/\r\n/* small phone */\r\n@media only screen and (max-width: 321px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 95%;\r\n\t\tmin-height: 304px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\t\r\n\t\r\n\ttd {\r\n\t\twidth: 33px;\r\n\t\theight: 33px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 33px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\t\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.3em;\r\n\t\tline-height: 36px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 10px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tmax-width: 75px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* medium phone */\r\n@media only screen and (max-width: 376px) and (min-width: 322px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 95%;\r\n\t\tmax-height: 3360px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\r\n\t.table .floor { \r\n\t\t/* background: brown;  */\r\n\t\t// margin: 1px;\r\n\t}\r\n\t\r\n\t\r\n\ttd {\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 43px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\t\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.7em;\r\n\t\tline-height: 36px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 10px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tmax-width: 75px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* large phone */\r\n@media only screen and (max-width: 640px) and (min-width: 377px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t\t\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 387px;\r\n\t\tmax-height: 387px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 39px;\r\n\t\theight: 39px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 43px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.7em;\r\n\t\tline-height: 43px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 13px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.25em;\r\n\t\tmax-width: 80px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* tablet */\r\n@media only screen and (max-width: 768px) and (min-width: 641px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 495px;\r\n\t\theight: 495px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 49px;\r\n\t\theight: 49px;\r\n\t\tborder: 3px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 55px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 30px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* laptop 1024px */\r\n@media only screen and (max-width: 1024px) and (min-width: 769px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 495px;\r\n\t\theight: 495px;\r\n\t\tmargin-top: 1em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 49px;\r\n\t\theight: 49px;\r\n\t\tborder: 3px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 55px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 55px;\r\n\t\twidth: 133px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 5px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* large laptop */\r\n@media only screen and (max-width: 1440px) and (min-width: 1025px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 630px;\r\n\t\theight: 630px;\r\n\t\tmargin-top: 1em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 60px;\r\n\t\theight: 60px;\r\n\t\tborder: 5px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 70px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-div > p {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 55px;\r\n\t\twidth: 133px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 5px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* 4k laptop */\r\n@media only screen and (min-width: 1441px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 720px;\r\n\t\theight: 720px;\r\n\t\tmargin-top: 3em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 70px;\r\n\t\theight: 70px;\r\n\t\tborder: 5px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 80px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 0 auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-div > p {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.5em;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.5em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: 0 auto;\r\n\t\theight: 75px;\r\n\t\twidth: 200px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 3em;\r\n\t\tline-height: 80px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 2em;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 2em;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 2em;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n\r\n#restart-div {\r\n\tposition: fixed;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tfont-size: 2em;\r\n\tpadding: 15px;\r\n\tmargin: 200px;\r\n\tbackground-color: white;\r\n\twidth: 400px;\r\n\theight: 200px;\r\n}\r\n\r\n#restart-div h1 {\r\n\tmargin: 10px auto;\r\n}\r\n\r\n#restart-div button {\r\n\tmargin: auto;\r\n\twidth: 30%;\r\n\theight: 15%;\r\n}\r\n\r\n.buttonTest {\r\n\twidth: 300px;\r\n\theight: 100px;\r\n}\r\n\r\n#roomForm {\r\n\tbackground: rgba(0, 0, 0, 0.15);\r\n\tmargin: auto;\r\n}\r\n\r\n#formDiv {\r\n\tmargin: 30% auto;\r\n}\r\n\r\n#roomInput {\r\n\tborder: none; \r\n\tpadding: 0 1rem;\r\n\tflex-grow: 1;\r\n\tborder-radius: 2rem;\r\n\tmargin: 0.25rem;\r\n}\r\n\r\n#roomInput:focus {\r\n\toutline: none;\r\n}\r\n\r\n#roomButton {\r\n\tbackground: #333;\r\n\tborder: none;\r\n\tpadding: 0 1rem; \r\n\tmargin: 0.25rem; \r\n\tborder-radius: 3px; \r\n\toutline: none; \r\n\tcolor: #fff;\r\n}\r\n#roomButton:hover {\r\n\tbackground: gray;\r\n}\r\n\r\n#lobby-div {\r\n\t\r\n\twidth: 80%;\r\n}\r\n#lobby-div > h1 {\r\n\tbackground: #fff;\r\n\ttext-align: center;\r\n}\r\n#lobby-form { \r\n\tbackground: rgba(0, 0, 0, 0.15); \r\n\tpadding: 0.25rem; \r\n\tposition: fixed; \r\n\tbottom: 0; \r\n\tleft: 0; \r\n\tright: 0; \r\n\tdisplay: flex; \r\n\theight: 3rem; \r\n\tbox-sizing: border-box; \r\n\tbackdrop-filter: blur(10px); \r\n}\r\n#lobby-input { \r\n\tborder: none; \r\n\tpadding: 0 1rem; \r\n\tflex-grow: 1; \r\n\tborder-radius: 2rem; \r\n\tmargin: 0.25rem; \r\n}\r\n#lobby-input:focus { outline: none; }\r\n#lobby-form > button { \r\n\tbackground: #333; \r\n\tborder: none; \r\n\tpadding: 0 1rem; \r\n\tmargin: 0.25rem; \r\n\tborder-radius: 3px; \r\n\toutline: none; \r\n\tcolor: #fff; \r\n}\r\n#lobby-form > button:hover {\r\n\tbackground: gray;\r\n}\r\n\r\n#lobby-messages { \r\n\tbackground: #fff; \r\n\tlist-style-type: none; \r\n\tmargin: 100px 0; \r\n\tpadding: 0; \r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n#lobby-messages > li { padding: 0.5rem 1rem; }\r\n#lobby-messages > li:nth-child(odd) { background: #efefef; }\r\n#lobby-start-game {\r\n\twidth: 100px;\r\n\theight: 50px;\r\n}\r\n\r\n/* splash div */\r\n#splash-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\theight: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.btn {\r\n\tbackground: #B8C3D9;\r\n\tborder: none;\r\n\tmargin: auto;\r\n\theight: 5em;\r\n\twidth: 13em;\r\n\ttransition: transform .3s ease-in-out;\r\n\tbox-shadow: \r\n\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.btn:hover {\r\n\ttransition: .3s ease-in-out;\r\n\ttransform: scale(1.1);\r\n\tbackground: #7383A6;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n/* form div */\r\n#form-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\theight: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n#room-form {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n}\r\n\r\n#room-input {\r\n\ttext-align: center;\r\n\twidth: 50%;\r\n\tmargin: auto;\r\n\tline-height: 1.5;\r\n  \tfont: 700 1.2rem 'Roboto Slab', sans-serif;\r\n  \tpadding: 1em 2em;\r\n  \tletter-spacing: 0.05rem;\r\n}\r\n\r\n#room-button {\r\n \tmargin: auto;\r\n}\r\n\r\n/* lobby rooms list */\r\n#lobby-rooms-list-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\r\n}\r\n\r\n#lobby-rooms-list-div > ul > li > button {\r\n\tmargin: 1.3em;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n@mixin btn-border-drawing($color: #FFEECD, $hover: black, $width: 2px, $vertical: top, $horizontal: left, $duration: 0.25s) {\r\n//   box-shadow: inset 0 0 0 $width $color;\r\n  color: $color;\r\n  transition: color $duration $duration/3;\r\n  position: relative;\r\n  \r\n  &::before,\r\n  &::after {\r\n    border: 0 solid transparent;\r\n    box-sizing: border-box;\r\n    content: '';\r\n    pointer-events: none;\r\n    position: absolute;\r\n    width: 0; height: 0;\r\n    \r\n    #{$vertical}: 0; \r\n    #{$horizontal}: 0;\r\n  }\r\n\r\n  &::before {\r\n    $h-side: if($horizontal == 'left', 'right', 'left');\r\n    \r\n    border-#{$vertical}-width: $width;\r\n    border-#{$h-side}-width: $width;\r\n  }\r\n  \r\n  &::after {\r\n    $v-side: if($vertical == 'top', 'bottom', 'top');\r\n    \r\n    border-#{$v-side}-width: $width;\r\n    border-#{$horizontal}-width: $width;\r\n  }\r\n  \r\n  &:hover {\r\n    color: $hover;\r\n    \r\n    &::before,\r\n    &::after {\r\n      border-color: $hover;\r\n      transition: border-color 0s, width $duration, height $duration;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    \r\n    &::before { transition-delay: 0s, 0s, $duration; }\r\n    \r\n    &::after { transition-delay: 0s, $duration, 0s; }\r\n  }\r\n}\r\n\r\n.btn {\r\n  @include btn-border-drawing(#403174, #B1A9CD, 4px, bottom, right);\r\n}\r\n.controller-btn {\r\n  @include btn-border-drawing(#403174, #B1A9CD, 4px, bottom, right);\r\n}\r\n\r\n//=== Button styling, semi-ignore\r\n.btn {\r\n//   border: none;\r\n  cursor: pointer;\r\n  line-height: 1.5;\r\n  font: 700 1.2rem 'Roboto Slab', sans-serif;\r\n  padding: 1em 2em;\r\n  letter-spacing: 0.05rem;\r\n  \r\n//   &:focus { outline: 2px dotted #4D618C; }\r\n}\r\n\r\n#winner-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 30vw;\r\n\theight: 30vw;\r\n\tmargin: auto;\r\n\tposition: relative;\r\n}\r\n#winner-message {\r\n\tcolor: #403174;\r\n\tfont-family: 'Quantico', sans-serif;\r\n\tfont-size: 3em;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n\tposition: absolute;\r\n\tbottom: 50%;\r\n}"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=t(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var A=[].concat(t[a]);n&&i[A[0]]||(r&&(A[2]?A[2]="".concat(r," and ").concat(A[2]):A[2]=r),e.push(A))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var r,n,i=(n=4,function(t){if(Array.isArray(t))return t}(r=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(i)throw o}}return r}}(r,n)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(A," */"),c=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(c).concat([l]).join("\n")}return[o].join("\n")}},435:t=>{var e=1e3,r=60*e,n=60*r,i=24*n;function o(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,s){s=s||{};var a,A,l=typeof t;if("string"===l&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*n;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(t);if("number"===l&&isFinite(t))return s.long?(a=t,(A=Math.abs(a))>=i?o(a,A,i,"day"):A>=n?o(a,A,n,"hour"):A>=r?o(a,A,r,"minute"):A>=e?o(a,A,e,"second"):a+" ms"):function(t){var o=Math.abs(t);return o>=i?Math.round(t/i)+"d":o>=n?Math.round(t/n)+"h":o>=r?Math.round(t/r)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},227:(t,e,r)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))})),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=r(447)(e);const{formatters:n}=t.exports;n.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},447:(t,e,r)=>{t.exports=function(t){function e(t){let r,i=null;function o(...t){if(!o.enabled)return;const n=o,i=Number(new Date),s=i-(r||i);n.diff=s,n.prev=r,n.curr=i,r=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((r,i)=>{if("%%"===r)return"%";a++;const o=e.formatters[i];if("function"==typeof o){const e=t[a];r=o.call(n,e),t.splice(a,1),a--}return r})),e.formatArgs.call(n,t),(n.log||e.log).apply(n,t)}return o.namespace=t,o.useColors=e.useColors(),o.color=e.selectColor(t),o.extend=n,o.destroy=e.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null===i?e.enabled(t):i,set:t=>{i=t}}),"function"==typeof e.init&&e.init(o),o}function n(t,r){const n=e(this.namespace+(void 0===r?":":r)+t);return n.log=this.log,n}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let r;e.save(t),e.names=[],e.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(435),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((r=>{e[r]=t[r]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let r=0;for(let e=0;e<t.length;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return e.colors[Math.abs(r)%e.colors.length]},e.enable(e.load()),e}},549:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},983:(t,e,r)=>{const n=r(279);t.exports=(t,e)=>new n(t,e),t.exports.Socket=n,t.exports.protocol=n.protocol,t.exports.Transport=r(496),t.exports.transports=r(352),t.exports.parser=r(743)},279:(t,e,r)=>{const n=r(352),i=r(767),o=r(227)("engine.io-client:socket"),s=r(743),a=r(187),A=r(830);class l extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=A.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),this.open()}createTransport(t){o('creating transport "%s"',t);const e=function(t){const e={};for(let r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.opts.query);e.EIO=s.protocol,e.transport=t,this.id&&(e.sid=this.id);const r=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return o("options: %j",r),new n[t](r)}open(){let t;if(this.opts.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){const t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return o("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){o("setting transport %s",t.name);const e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))}probe(t){o('probing transport "%s"',t);let e=this.createTransport(t,{probe:1}),r=!1;const n=this;function i(){if(n.onlyBinaryUpgrades){const t=!this.supportsBinary&&n.transport.supportsBinary;r=r||t}r||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!r)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(o("changing transport and sending upgrade packet"),p(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{o('probe transport "%s" failed',t);const r=new Error("probe error");r.transport=e.name,n.emit("upgradeError",r)}})))}function s(){r||(r=!0,p(),e.close(),e=null)}function a(r){const i=new Error("probe error: "+r);i.transport=e.name,s(),o('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",i)}function A(){a("transport closed")}function c(){a("socket closed")}function d(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),s())}function p(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",A),n.removeListener("close",c),n.removeListener("upgrading",d)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",A),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(o("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){o("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,r){return this.sendPacket("message",t,e,r),this}send(t,e,r){return this.sendPacket("message",t,e,r),this}sendPacket(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"===this.readyState||"closed"===this.readyState)return;(r=r||{}).compress=!1!==r.compress;const i={type:t,data:e,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}close(){const t=this;function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(t){o("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);const r=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),r.writeBuffer=[],r.prevBufferLen=0}}filterUpgrades(t){const e=[];let r=0;const n=t.length;for(;r<n;r++)~this.transports.indexOf(t[r])&&e.push(t[r]);return e}}l.priorWebsocketSuccess=!1,l.protocol=s.protocol,t.exports=l},496:(t,e,r)=>{const n=r(743),i=r(767);t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=n.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},352:(t,e,r)=>{const n=r(777),i=r(416),o=r(785),s=r(442);e.polling=function(t){let e,r=!1,s=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let n=location.port;n||(n=e?443:80),r=t.hostname!==location.hostname||n!==t.port,s=t.secure!==e}if(t.xdomain=r,t.xscheme=s,e=new n(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new o(t)},e.websocket=s},785:(t,e,r)=>{const n=r(214),i=r(549),o=/\n/g,s=/\\n/g;let a;t.exports=class extends n{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length;const e=this;a.push((function(t){e.onData(t)})),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};const r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){const r=this;let n;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),r=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=r,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function i(){a(),e()}function a(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{const t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){n=document.createElement("iframe"),n.name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),a(),t=t.replace(s,"\\\n"),this.area.value=t.replace(o,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&i()}:this.iframe.onload=i}}},416:(t,e,r)=>{const n=r(777),i=r(214),o=r(767),{pick:s}=r(839),a=r(549),A=r(227)("engine.io-client:polling-xhr");function l(){}const c=null!=new n({xdomain:!1}).responseType;class d extends o{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=s(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new n(t),r=this;try{A("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},A("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=d.requestsCount++,d.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete d.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function p(){for(let t in d.requests)d.requests.hasOwnProperty(t)&&d.requests[t].abort()}d.requestsCount=0,d.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",p):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",p,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=c&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new d(this.uri(),t)}doWrite(t,e){const r=this.request({method:"POST",data:t}),n=this;r.on("success",e),r.on("error",(function(t){n.onError("xhr post error",t)}))}doPoll(){A("xhr poll");const t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=d},214:(t,e,r)=>{const n=r(496),i=r(830),o=r(743),s=r(281),a=r(227)("engine.io-client:polling");t.exports=class extends n{get name(){return"polling"}doOpen(){this.poll()}pause(t){const e=this;function r(){a("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||r()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||r()})))}else r()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){const e=this;a("polling got data %s",t),o.decodePayload(t,this.socket.binaryType).forEach((function(t,r,n){if("opening"===e.readyState&&"open"===t.type&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a('ignoring poll - transport state "%s"',this.readyState))}doClose(){const t=this;function e(){a("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(a("transport open - closing"),e()):(a("transport not open - deferring close"),this.once("open",e))}write(t){this.writable=!1,o.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let r="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=s()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(r=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+r+this.opts.path+t}}},866:(t,e,r)=>{const n=r(549);t.exports={WebSocket:n.WebSocket||n.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},442:(t,e,r)=>{const n=r(496),i=r(743),o=r(830),s=r(281),{pick:a}=r(839),{WebSocket:A,usingBrowserWebSocket:l,defaultBinaryType:c}=r(866),d=r(227)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class h extends n{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,r=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(r.headers=this.opts.extraHeaders);try{this.ws=l&&!p?e?new A(t,e):new A(t):new A(t,e,r)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}addEventListeners(){const t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}}write(t){const e=this;this.writable=!1;let r=t.length,n=0;const o=r;for(;n<o;n++)!function(t){i.encodePacket(t,e.supportsBinary,(function(n){const i={};!l&&(t.options&&(i.compress=t.options.compress),e.opts.perMessageDeflate)&&("string"==typeof n?Buffer.byteLength(n):n.length)<e.opts.perMessageDeflate.threshold&&(i.compress=!1);try{l?e.ws.send(n):e.ws.send(n,i)}catch(t){d("websocket closed before onclose event")}--r||(e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0))}))}(t[n])}onClose(){n.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let r="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(r=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=s()),this.supportsBinary||(t.b64=1),t=o.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+r+this.opts.path+t}check(){return!(!A||"__initialize"in A&&this.name===h.prototype.name)}}t.exports=h},839:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,r)=>(t.hasOwnProperty(r)&&(e[r]=t[r]),e)),{})},777:(t,e,r)=>{const n=r(58),i=r(549);t.exports=function(t){const e=t.xdomain,r=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||n))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},712:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const r=Object.create(null);Object.keys(e).forEach((t=>{r[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},965:(t,e,r)=>{const{PACKET_TYPES_REVERSE:n,ERROR_PACKET:i}=r(712);let o;"function"==typeof ArrayBuffer&&(o=r(704));const s=(t,e)=>{if(o){const r=o.decode(t);return a(r,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const r=t.charAt(0);return"b"===r?{type:"message",data:s(t.substring(1),e)}:n[r]?t.length>1?{type:n[r],data:t.substring(1)}:{type:n[r]}:i}},929:(t,e,r)=>{const{PACKET_TYPES:n}=r(712),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,s=(t,e)=>{const r=new FileReader;return r.onload=function(){const t=r.result.split(",")[1];e("b"+t)},r.readAsDataURL(t)};t.exports=({type:t,data:e},r,a)=>{return i&&e instanceof Blob?r?a(e):s(e,a):o&&(e instanceof ArrayBuffer||(A=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(A):A&&A.buffer instanceof ArrayBuffer))?r?a(e instanceof ArrayBuffer?e:e.buffer):s(new Blob([e]),a):a(n[t]+(e||""));var A}},743:(t,e,r)=>{const n=r(929),i=r(965),o=String.fromCharCode(30);t.exports={protocol:4,encodePacket:n,encodePayload:(t,e)=>{const r=t.length,i=new Array(r);let s=0;t.forEach(((t,a)=>{n(t,!1,(t=>{i[a]=t,++s===r&&e(i.join(o))}))}))},decodePacket:i,decodePayload:(t,e)=>{const r=t.split(o),n=[];for(let t=0;t<r.length;t++){const o=i(r[t],e);if(n.push(o),"error"===o.type)break}return n}}},58:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},830:(t,e)=>{e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),n=0,i=r.length;n<i;n++){var o=r[n].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},187:t=>{var e=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var n,i,o=t,s=t.indexOf("["),a=t.indexOf("]");-1!=s&&-1!=a&&(t=t.substring(0,s)+t.substring(s,a).replace(/:/g,";")+t.substring(a,t.length));for(var A,l,c=e.exec(t||""),d={},p=14;p--;)d[r[p]]=c[p]||"";return-1!=s&&-1!=a&&(d.source=o,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(n=d.path,i=n.replace(/\/{2,9}/g,"/").split("/"),"/"!=n.substr(0,1)&&0!==n.length||i.splice(0,1),"/"==n.substr(n.length-1,1)&&i.splice(i.length-1,1),i),d.queryKey=(A=d.query,l={},A.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,r){e&&(l[e]=r)})),l),d}},751:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=e.io=e.Manager=e.protocol=void 0;const n=r(744),i=r(703),o=r(277);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return o.Socket}});const s=r(227)("socket.io-client");t.exports=e=A;const a=e.managers={};function A(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const r=n.url(t,e.path),o=r.source,A=r.id,l=r.path,c=a[A]&&l in a[A].nsps;let d;return e.forceNew||e["force new connection"]||!1===e.multiplex||c?(s("ignoring socket cache for %s",o),d=new i.Manager(o,e)):(a[A]||(s("new io instance for %s",o),a[A]=new i.Manager(o,e)),d=a[A]),r.query&&!e.query&&(e.query=r.queryKey),d.socket(r.path,e)}e.io=A;var l=r(485);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return l.protocol}}),e.connect=A;var c=r(703);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return c.Manager}})},703:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const n=r(983),i=r(277),o=r(767),s=r(485),a=r(657),A=r(10),l=r(227)("socket.io-client:manager");e.Manager=class extends o{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new A({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const r=e.parser||s;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(l("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=n(this.uri,this.opts);const e=this.engine,r=this;this._readyState="opening",this.skipReconnect=!1;const i=a.on(e,"open",(function(){r.onopen(),t&&t()})),o=a.on(e,"error",(e=>{l("error"),r.cleanup(),r._readyState="closed",super.emit("error",e),t?t(e):r.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;l("connect attempt will timeout after %d",t),0===t&&i();const r=setTimeout((()=>{l("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.subs.push((function(){clearTimeout(r)}))}return this.subs.push(i),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){l("open"),this.cleanup(),this._readyState="open",super.emit("open");const t=this.engine;this.subs.push(a.on(t,"ping",this.onping.bind(this)),a.on(t,"data",this.ondata.bind(this)),a.on(t,"error",this.onerror.bind(this)),a.on(t,"close",this.onclose.bind(this)),a.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){super.emit("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){super.emit("packet",t)}onerror(t){l("error",t),super.emit("error",t)}socket(t,e){let r=this.nsps[t];return r||(r=new i.Socket(this,t,e),this.nsps[t]=r),r}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void l("socket %s is still active, skipping close",t);this._close()}_packet(t){l("writing packet %j",t);const e=this.encoder.encode(t);for(let r=0;r<e.length;r++)this.engine.write(e[r],t.options)}cleanup(){l("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){l("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){l("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",super.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),super.emit("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();l("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const r=setTimeout((()=>{t.skipReconnect||(l("attempting reconnect"),super.emit("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(l("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),super.emit("reconnect_error",e)):(l("reconnect success"),t.onreconnect())})))}),e);this.subs.push((function(){clearTimeout(r)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),super.emit("reconnect",t)}}},657:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,r){return t.on(e,r),function(){t.off(e,r)}}},277:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const n=r(485),i=r(767),o=r(657),s=r(227)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});e.Socket=class extends i{constructor(t,e,r){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.auth&&(this.auth=r.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[o.on(t,"open",this.onopen.bind(this)),o.on(t,"packet",this.onpacket.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');e.unshift(t);const r={type:n.PacketType.EVENT,data:e,options:{}};r.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(s("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(r):this.sendBuffer.push(r):s("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){s("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:n.PacketType.CONNECT,data:t})})):this.packet({type:n.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||super.emit("connect_error",t)}onclose(t){s("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,super.emit("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case n.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else super.emit("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case n.PacketType.EVENT:case n.PacketType.BINARY_EVENT:this.onevent(t);break;case n.PacketType.ACK:case n.PacketType.BINARY_ACK:this.onack(t);break;case n.PacketType.DISCONNECT:this.ondisconnect();break;case n.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,super.emit("connect_error",e)}}onevent(t){const e=t.data||[];s("emitting event %j",e),null!=t.id&&(s("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const r of e)r.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let r=!1;return function(...i){r||(r=!0,s("sending ack %j",i),e.packet({type:n.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(s("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):s("bad ack %s",t.id)}onconnect(t){s("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,super.emit("connect"),this.emitBuffered()}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:n.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let r=0;r<e.length;r++)if(t===e[r])return e.splice(r,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}},744:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const n=r(187),i=r(227)("socket.io-client:url");e.url=function(t,e="",r){let o=t;r=r||"undefined"!=typeof location&&location,null==t&&(t=r.protocol+"//"+r.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?r.protocol+t:r.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==r?r.protocol+"//"+t:"https://"+t),i("parse %s",t),o=n(t)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";const s=-1!==o.host.indexOf(":")?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port+e,o.href=o.protocol+"://"+s+(r&&r.port===o.port?"":":"+o.port),o}},719:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const n=r(986);function i(t,e){if(!t)return t;if(n.isBinary(t)){const r={_placeholder:!0,num:e.length};return e.push(t),r}if(Array.isArray(t)){const r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=i(t[n],e);return r}if("object"==typeof t&&!(t instanceof Date)){const r={};for(const n in t)t.hasOwnProperty(n)&&(r[n]=i(t[n],e));return r}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let r=0;r<t.length;r++)t[r]=o(t[r],e);else if("object"==typeof t)for(const r in t)t.hasOwnProperty(r)&&(t[r]=o(t[r],e));return t}e.deconstructPacket=function(t){const e=[],r=t.data,n=t;return n.data=i(r,e),n.attachments=e.length,{packet:n,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t}},485:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const n=r(767),i=r(719),o=r(986),s=r(227)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return s("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!o.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),s("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),r=this.encodeAsString(e.packet),n=e.buffers;return n.unshift(r),n}};class A extends n{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new l(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!o.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const r={type:Number(t.charAt(0))};if(void 0===a[r.type])throw new Error("unknown packet type "+r.type);if(r.type===a.BINARY_EVENT||r.type===a.BINARY_ACK){const n=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(n,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");r.attachments=Number(i)}if("/"===t.charAt(e+1)){const n=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);r.nsp=t.substring(n,e)}else r.nsp="/";const n=t.charAt(e+1);if(""!==n&&Number(n)==n){const n=e+1;for(;++e;){const r=t.charAt(e);if(null==r||Number(r)!=r){--e;break}if(e===t.length)break}r.id=Number(t.substring(n,e+1))}if(t.charAt(++e)){const n=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!A.isPayloadValid(r.type,n))throw new Error("invalid payload");r.data=n}return s("decoded %s as %j",t,r),r}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=A;class l{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},986:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const r="function"==typeof ArrayBuffer,n=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===n.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===n.call(File);function s(t){return r&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||o&&t instanceof File}e.isBinary=s,e.hasBinary=function t(e,r){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let r=0,n=e.length;r<n;r++)if(t(e[r]))return!0;return!1}if(s(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&t(e[r]))return!0;return!1}},379:(t,e,r)=>{"use strict";var n,i=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),o=[];function s(t){for(var e=-1,r=0;r<o.length;r++)if(o[r].identifier===t){e=r;break}return e}function a(t,e){for(var r={},n=[],i=0;i<t.length;i++){var a=t[i],A=e.base?a[0]+e.base:a[0],l=r[A]||0,c="".concat(A," ").concat(l);r[A]=l+1;var d=s(c),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:c,updater:C(p,e),references:1}),n.push(c)}return n}function A(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,c=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function d(t,e,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=c(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function p(t,e,r){var n=r.css,i=r.media,o=r.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var h=null,u=0;function C(t,e){var r,n,i;if(e.singleton){var o=u++;r=h||(h=A(e)),n=d.bind(null,r,o,!1),i=d.bind(null,r,o,!0)}else r=A(e),n=p.bind(null,r,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var i=s(r[n]);o[i].references--}for(var A=a(t,e),l=0;l<r.length;l++){var c=s(r[l]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=A}}}},281:t=>{"use strict";var e,r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),n={},i=0,o=0;function s(t){var e="";do{e=r[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=s(+new Date);return t!==e?(i=0,e=t):t+"."+s(i++)}for(;o<64;o++)n[r[o]]=o;a.encode=s,a.decode=function(t){var e=0;for(o=0;o<t.length;o++)e=64*e+n[t.charAt(o)];return e},t.exports=a},733:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(984);class i{constructor(t,e){this.width=9,this.height=9,this.p1=t,this.p2=e,this.grid=i.makeGrid(this.width,this.height),this.winner=!1,this.util}setPlayers(t,e,r,n){this.util.trackFunctions("setPlayers");let i=this.grid[n[0]][n[1]],o=this.grid[e[0]][e[1]];i.model=r?"person":"ai",o.model=t?"person":"ai",i.player=this.p2,o.player=this.p1}checkNeighbors(t){this.util.trackFunctions("checkNeighbors");let e=[],r=t[1],n=t[0];return n-1>=0?e.push([n-1,r]):e.push([-1,-1]),n+1<=8?e.push([n+1,r]):e.push([-1,-1]),r-1>=0?e.push([n,r-1]):e.push([-1,-1]),r+1<=8?e.push([n,r+1]):e.push([-1,-1]),this.checkCrossWall(e)}checkCrossWall(t){return t}isWalled(t,e,r){this.util.trackFunctions("isWalled");let n=this.grid[e][r];if("up"===t){if(n.walls.North)return!0}else if("right"===t){if(n.walls.East)return!0}else if("down"===t){if(n.walls.South)return!0}else if("left"===t&&n.walls.West)return!0;return!1}bfs(t,e=["00","01","02","03","04","05","06","07","08"]){this.util.trackFunctions("bfs");let r=new Map,n=[],i=[];for(r.set(t,null),n.push(t),i.push(t.join(""));n.length>0;){let t=n.shift(),o=t.join(""),s=this.grid[t[0]][t[1]];if(e.includes(o)){let e=[];return e=this.traverseHashmap(r,t.join("")),e.push(t.join("")),[t.join(""),e]}if(!s.walls.North&&parseInt(t[0])>0){let e=t.join("").split("");e[0]=parseInt(e[0])-1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.South&&parseInt(t[0])<8){let e=t.join("").split("");e[0]=parseInt(e[0])+1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.East&&parseInt(t[1])<8){let e=t.join("").split("");e[1]=parseInt(e[1])+1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.West&&parseInt(t[1])>0){let e=t.join("").split("");e[1]=parseInt(e[1])-1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}}return!1}traverseHashmap(t,e){this.util.trackFunctions("traverseHashmap");let r=t.get(e),n=[];for(;r;)n.push(r),r=t.get(r);return n.reverse()}static makeGrid(t,e){const r=[];for(let i=0;i<e;i++){r.push([]);for(let e=0;e<t;e++){let t=new n.Z(e,i);r[i].push(t)}}return r}static isValidPos(t,e){return!(t<0||e<0||t>8||e>8)}}},417:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(733);class i{constructor(t,e){this.socket=t,this.room=e,this.player1ID=e.player1,this.player2ID=e.player2,this.board=new n.Z(this.player1ID,this.player2ID),this.grid=this.board.grid,this.currentPlayer="noone",this.player1=[8,4],this.player2=[0,4],this.player1Walls=10,this.player2Walls=10,this.state="not doing anything",this.util,this.movePlayer=this.movePlayer.bind(this)}isOver(){return this.util.trackFunctions("isOver"),null!==this.winner()}winner(){this.util.trackFunctions("winner");let t=null;for(let e=0;e<this.grid[0].length;e++)this.grid[0][e].player===this.player1ID&&(t=this.player1ID),this.grid[8][e].player===this.player2ID&&(t=this.player2ID);return t}takeTurn(t,e=null,r,n=null,i=null){this.util.trackFunctions("takeTurn"),"move"===t&&null===e&&this.movePlayer(r.target.id.split("")),"placeWall"===t&&this.placeWall(e,n,i)}placeWall(t,e,r){if(this.util.trackFunctions("placeWall"),e[0]>8||e[0]<0||r[0]>8||r[0]<0||e[1]>8||e[1]<0||r[1]>8||r[1]<0)return!1;let n,i,o=this.grid[e[0]][e[1]],s=this.grid[r[0]][r[1]],a=this.board.checkNeighbors([o.rowIdx,o.colIdx]),A=this.board.checkNeighbors([s.rowIdx,s.colIdx]);if(i=this.currentPlayer===this.player1ID?this.player1Walls:this.player2Walls,i>0){if("North"===t&&!o.walls.North&&!s.walls.North){if(o.walls.North=!0,s.walls.North=!0,this.grid[a[0][0]][a[0][1]].walls.South=!0,this.grid[A[0][0]][A[0][1]].walls.South=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"north",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[0][0],a[0][1]],wallD:[A[0][0],A[0][1]],player:this.currentPlayer}),!0;o.walls.North=!1,s.walls.North=!1,this.grid[a[0][0]][a[0][1]].walls.South=!1,this.grid[A[0][0]][A[0][1]].walls.South=!1}if("East"===t&&!o.walls.East&&!s.walls.East){if(o.walls.East=!0,s.walls.East=!0,this.grid[a[3][0]][a[3][1]].walls.West=!0,this.grid[A[3][0]][A[3][1]].walls.West=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"east",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[3][0],a[3][1]],wallD:[A[3][0],A[3][1]],player:this.currentPlayer}),!0;o.walls.East=!1,s.walls.East=!1,this.grid[a[3][0]][a[3][1]].walls.West=!1,this.grid[A[3][0]][A[3][1]].walls.West=!1}if("South"===t&&!o.walls.South&&!s.walls.South){if(o.walls.South=!0,s.walls.South=!0,this.grid[a[1][0]][a[1][1]].walls.North=!0,this.grid[A[1][0]][A[1][1]].walls.North=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"south",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[1][0],a[1][1]],wallD:[A[1][0],A[1][1]],player:this.currentPlayer}),!0;o.walls.South=!1,s.walls.South=!1,this.grid[a[1][0]][a[1][1]].walls.North=!1,this.grid[A[1][0]][A[1][1]].walls.North=!1}if("West"===t&&!o.walls.West&&!s.walls.West){if(o.walls.West=!0,s.walls.West=!0,this.grid[a[2][0]][a[2][1]].walls.East=!0,this.grid[A[2][0]][A[2][1]].walls.East=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"west",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[2][0],a[2][1]],wallD:[A[2][0],A[2][1]],player:this.currentPlayer}),!0;o.walls.West=!1,s.walls.West=!1,this.grid[a[2][0]][a[2][1]].walls.East=!1,this.grid[A[2][0]][A[2][1]].walls.East=!1}}return!1}movePlayer(t){let e,r,i,o,s;if(this.util.trackFunctions("movePlayer"),e=this.currentPlayer===this.player1ID?this.player1:this.player2,i=parseInt(t[0]),r=parseInt(t[1]),o=this.board.isWalled(t,e[0],e[1]),s=n.Z.isValidPos(r,i),s&&!o){let t=this.board.grid[e[0]][e[1]],n=this.board.grid[i][r];"empty"!==n.player||(t.player="empty",this.setPlayerPos(this.currentPlayer,[i,r]),n.player=this.currentPlayer,this.socket.emit("playerMove",{roomId:this.room.id,oldPos:[t.rowIdx,t.colIdx],newPos:[n.rowIdx,n.colIdx],player:this.currentPlayer}))}}getAvailableMoves(t){this.util.trackFunctions("getAvailableMoves");let e,r=[],n=this.grid[t[0]][t[1]],i=t[1],o=t[0];if(o-1>=0&&!n.walls.North)if(e=this.grid[o-1][i],"empty"===e.player)r.push([o-1,i]);else if([this.player1ID,this.player2ID].includes(e.player))if(o-2>=0&&!e.walls.North)r.push([o-2,i]);else{let t=o-2>=0?this.grid[o-2][i]:void 0;e.walls.North?(e.walls.East||r.push([o-1,i+1]),e.walls.West||r.push([o-1,i-1])):t||(e.walls.East||r.push([o-1,i+1]),e.walls.West||r.push([o-1,i-1]))}if(i+1<=8&&!n.walls.East)if(e=this.grid[o][i+1],"empty"===e.player)r.push([o,i+1]);else if([this.player1ID,this.player2ID].includes(e.player))if(i+2<=8&&!e.walls.East)r.push([o,i+2]);else{let t=i+2<=8?this.grid[o][i+2]:void 0;e.walls.East?(e.walls.North||r.push([o-1,i+1]),e.walls.South||r.push([o+1,i+1])):t||(e.walls.North||r.push([o-1,i+1]),e.walls.South||r.push([o+1,i+1]))}if(o+1<=8&&!n.walls.South)if(e=this.grid[o+1][i],"empty"===e.player)r.push([o+1,i]);else if([this.player1ID,this.player2ID].includes(e.player))if(o+2<=8&&!e.walls.South)r.push([o+2,i]);else{let t=o+2<=8?this.grid[o+2][i]:void 0;e.walls.South?(e.walls.East||r.push([o+1,i+1]),e.walls.West||r.push([o+1,i-1])):t||(e.walls.East||r.push([o+1,i+1]),e.walls.West||r.push([o+1,i-1]))}if(i-1>=0&&!n.walls.West)if(e=this.grid[o][i-1],"empty"===e.player)r.push([o,i-1]);else if([this.player1ID,this.player2ID].includes(e.player))if(i-2>=0&&!e.walls.West)r.push([o,i-2]);else{let t=i-2>=0?this.grid[o][i-2]:void 0;e.walls.West?(e.walls.North||r.push([o-1,i-1]),e.walls.South||r.push([o+1,i-1])):t||(e.walls.North||r.push([o-1,i-1]),e.walls.South||r.push([o+1,i-1]))}return r}setPlayerPos(t,e){this.util.trackFunctions("setPlayerPos"),t===this.player1ID?this.player1=e:t===this.player2ID&&(this.player2=e)}start(){this.util.trackFunctions("start"),this.board.setPlayers(!0,this.player1,!0,this.player2),this.currentPlayer=this.player1ID}swapTurn(){this.util.trackFunctions("swapTurn"),this.currentPlayer===this.player1ID?this.currentPlayer=this.player2ID:this.currentPlayer===this.player2ID&&(this.currentPlayer=this.player1ID)}findPath(){return this.util.trackFunctions("findPath"),!!this.board.bfs(this.player1)}}},535:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(891);class i{constructor(t,e,r){this.socket=t,this.room=e,this.body=document.querySelector("body"),this.game=r,this.board=this.game.board,this.grid=this.board.grid,this.squareA=null,this.squareB=null,this.neighbors=null,this.availableMoves=[],this.winner=null,this.util=new n.Z,this.game.util=this.util,this.game.board.util=this.util,this.setupBoard(),this.setupEventListeners()}show(){this.util.trackFunctions("show"),this.showBoard(),this.game.isOver()&&"noone"!==this.game.currentPlayer&&(this.winner||(this.game.currentPlayer===this.game.player2ID&&(this.winner=this.room.player1),this.game.currentPlayer===this.game.player1ID&&(this.winner=this.room.player2),this.socket.emit("winner",this.room.id,this.winner)))}showBoard(){this.util.trackFunctions("showBoard");for(let t=0;t<this.grid.length;t++)for(let e=0;e<this.grid[t].length;e++){let r=this.grid[t][e],n=t.toString()+e.toString(),i=document.getElementById(n);r.player===this.game.player1ID?(i.classList.add("player"),i.innerHTML="&#x265F"):r.player===this.game.player2ID?(i.classList.add("player"),i.innerHTML="&#x2659"):(i.classList.remove("player"),i.innerHTML=" "),r.walls.North&&(i.classList.remove("hall"),i.classList.add("wall-top")),r.walls.East&&(i.classList.remove("hall"),i.classList.add("wall-right")),r.walls.South&&(i.classList.remove("hall"),i.classList.add("wall-bottom")),r.walls.West&&(i.classList.remove("hall"),i.classList.add("wall-left"))}let t=document.getElementsByClassName("wall-counter"),e=document.getElementById("place");t[0].innerHTML=`player 1 has ${this.game.player1Walls} walls left`,t[1].innerHTML=`player 2 has ${this.game.player2Walls} walls left`,this.game.currentPlayer===this.game.player1ID&&0===this.game.player1Walls||this.game.currentPlayer===this.game.player2ID&&0===this.game.player2Walls?e.classList.add("hide"):"not doing anything"===this.game.state&&e.classList.contains("hide")&&e.classList.remove("hide");const r=this.game.currentPlayer===this.socket.id?"Your":"Opponent's";document.getElementById("player-turn").innerHTML=`${r} turn`}setupEventListeners(){this.util.trackFunctions("setupEventListeners"),this.body.addEventListener("click",(t=>{if(this.socket.id===this.game.currentPlayer){let e=this.game.state,r=t.target.classList,n=t.target.innerHTML;if("not doing anything"===e&&r.contains("button")&&("Place a wall"===n&&this.handlePlaceWallButton(t),"Move character"===n&&this.handleMovementButton(t)),"selecting squares"===e&&r.contains("floor")&&this.handleSquareClick(t),"selecting wall type"===e&&r.contains("button")&&("North"!==n&&"East"!==n&&"South"!==n&&"West"!==n||this.handleWallTypeButton(n,t)),"selecting desired move"===e&&this.availableMoves.includes(t.target)){this.game.takeTurn("move",null,t),document.getElementById("back").classList.add("hide");for(let t=0;t<this.availableMoves.length;t++)this.availableMoves[t].classList.remove("highlight");this.game.state="not doing anything",this.availableMoves=[],this.show()}"not doing anything"!==e&&r.contains("button")&&"back"===n&&this.handleBackButton(),"Restart"===n&&location.reload()}}),!1)}handlePlaceWallButton(t){if(this.util.trackFunctions("handlePlaceWallButton"),"noone"!==this.game.currentPlayer){this.game.state="selecting squares";let e=t.target;document.getElementById("back").classList.remove("hide"),this.body.getElementsByClassName("clickInstruct")[0].classList.remove("hide"),document.getElementById("move").classList.add("hide"),e.classList.add("hide")}}handleSquareClick(t){if(this.util.trackFunctions("handleSquareClick"),"noone"!==this.game.currentPlayer){let e=t.target;if(e.classList.contains("floor")&&null===this.squareA){t.target.classList.add("selectedWall"),this.squareA=e.id;let r=this.squareA.split("");r[0]=parseInt(r[0]),r[1]=parseInt(r[1]),this.neighbors=this.board.checkNeighbors(r);for(let t=0;t<this.neighbors.length;t++)if(-1!==this.neighbors[t][0]){let e=this.neighbors[t].join("");document.getElementById(e).classList.add("highlight")}this.changeNeighborsArrayToString(this.neighbors)}else e.classList.contains("floor")&&null!==this.squareA&&null===this.squareB&&this.neighbors.includes(e.id)&&(this.squareB=e.id);if(null!==this.squareA&&null!==this.squareB){this.body.getElementsByClassName("clickInstruct")[0].classList.add("hide"),this.grid[this.squareA.split("")[0]][this.squareA.split("")[1]],this.grid[this.squareB.split("")[0]][this.squareB.split("")[1]],this.squareA.split("")[0]===this.squareB.split("")[0]&&(this.squareA.split("")[0]>0&&this.body.getElementsByClassName("north")[0].classList.remove("hide"),this.squareA.split("")[0]<8&&this.body.getElementsByClassName("south")[0].classList.remove("hide")),this.squareA.split("")[1]===this.squareB.split("")[1]&&(this.squareA.split("")[1]>0&&this.body.getElementsByClassName("west")[0].classList.remove("hide"),this.squareA.split("")[1]<8&&this.body.getElementsByClassName("east")[0].classList.remove("hide"));for(let t=0;t<this.neighbors.length;t++)if(!this.neighbors[t].includes("-")){let e=this.neighbors[t];document.getElementById(e).classList.remove("highlight")}this.neighbors=[],t.target.classList.add("selectedWall"),this.game.state="selecting wall type"}}}handleWallTypeButton(t,e){this.util.trackFunctions("handleWallTypeButton");let r=document.getElementsByClassName("selectedWall");for(let t=0;t<r.length;t++){let e=r[t];setTimeout((()=>{e.classList.remove("selectedWall")}),0)}this.game.takeTurn("placeWall",t,e,this.squareA,this.squareB),this.body.getElementsByClassName("north")[0].classList.add("hide"),this.body.getElementsByClassName("east")[0].classList.add("hide"),this.body.getElementsByClassName("south")[0].classList.add("hide"),this.body.getElementsByClassName("west")[0].classList.add("hide"),this.body.getElementsByClassName("button")[0].classList.remove("hide"),document.getElementById("back").classList.add("hide"),document.getElementById("move").classList.remove("hide"),this.squareA=null,this.squareB=null,this.game.state="not doing anything",this.show()}handleMovementButton(t){if(this.util.trackFunctions("handleMovementButton"),"noone"!==this.game.currentPlayer){let t;document.getElementById("back").classList.remove("hide"),document.getElementById("place").classList.add("hide");let e=this.game.currentPlayer===this.game.player1ID?this.game.player1:this.game.player2,r=parseInt(e[0]),n=parseInt(e[1]);t=this.game.getAvailableMoves([r,n]);for(let e=0;e<t.length;e++){let r=document.getElementById(t[e].join(""));r.classList.add("highlight"),this.availableMoves.push(r)}this.game.state="selecting desired move"}}handleBackButton(){this.util.trackFunctions("handleBackButton"),this.game.state="not doing anything";let t=document.getElementsByClassName("controller-div")[0].childNodes;for(let e=0;e<t.length;e++)"place"===t[e].id||"move"===t[e].id?t[e].classList.remove("hide"):t[e].classList.add("hide");this.squareA=null,this.squareB=null,this.neighbors=null;for(let t=0;t<this.availableMoves.length;t++)this.availableMoves[t].classList.remove("highlight");let e=document.getElementsByClassName("selectedWall");for(let t=0;t<e.length;t++){let r=e[t];setTimeout((()=>{r.classList.remove("selectedWall")}),0)}this.availableMoves=[],this.show()}changeNeighborsArrayToString(t){this.util.trackFunctions("changeNeighborsArrayToString");for(let e=0;e<t.length;e++){let r=t[e].join("").toString();this.neighbors[e]=r,document.getElementById(`${r}`)}}createButton(t){this.util.trackFunctions("createButton");let e=document.createElement("button");return e.innerHTML=t,e.classList.add("button"),"Place a wall"===t?e.setAttribute("id","place"):"Move character"===t?e.setAttribute("id","move"):e.setAttribute("id",t),e.classList.add("controller-btn"),this.body.getElementsByClassName("controller-div")[0].appendChild(e),e}createRestartDiv(t,e){this.util.trackFunctions("createRestartDiv");let r=document.createElement("div"),n=document.createElement("h1"),i=document.createElement("button");r.setAttribute("id","restart-div"),i.setAttribute("id","restart"),n.innerHTML=`Congrats to ${e}!!!!`,i.innerHTML="Restart",r.appendChild(n),r.appendChild(i),t.appendChild(r)}setupBoard(){this.util.trackFunctions("setupBoard");let t=document.createElement("div"),e=document.createElement("div");this.body.appendChild(t);let r=document.createElement("table");e.appendChild(r),t.appendChild(e),t.classList.add("table"),r.setAttribute("id","board");let n=document.createElement("div");n.classList.add("player-turn"),n.setAttribute("id","player-turn"),n.innerHTML="Player 1's Turn",t.appendChild(n);let i=document.createElement("div");i.classList.add("controller-div"),t.appendChild(i);let o=document.createElement("div");o.classList.add("wall-counter-div"),o.setAttribute("id","wall-counter");let s=document.createElement("div"),a=document.createElement("div");s.classList.add("wall-counter"),a.classList.add("wall-counter"),s.innerHTML="player 1 has 10 walls left",a.innerHTML="player 2 has 10 walls left",o.appendChild(s),o.appendChild(a),t.appendChild(o),this.createButton("Place a wall"),this.createButton("Move character");let A=document.createElement("p");A.classList.add("clickInstruct"),A.innerHTML="Click two distinct squares...",A.classList.add("hide"),i.appendChild(A);let l=this.createButton("North"),c=this.createButton("East"),d=this.createButton("South"),p=this.createButton("West");l.classList.add("hide","north"),c.classList.add("hide","east"),d.classList.add("hide","south"),p.classList.add("hide","west"),i.appendChild(l),i.appendChild(d),i.appendChild(p),i.appendChild(c);let h=this.createButton("back");h.classList.add("hide"),i.appendChild(h);for(let t=0;t<9;t++){let e=document.createElement("tr");for(let r=0;r<9;r++){let n=document.createElement("td");n.id=`${t}${r}`,n.classList.add("floor","hall"),e.appendChild(n)}r.appendChild(e)}}}},157:(t,e,r)=>{"use strict";t.exports=r.p+"932e694c1134fb7b39f9.png"},984:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});class n{constructor(t,e){this.walls={North:!1,East:!1,South:!1,West:!1},this.colIdx=t,this.rowIdx=e,this.player="empty",this.model="noone"}}},891:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});class n{constructor(){this.map=new Map}trackFunctions(t){void 0!==this.map[t]&&0!==this.map[t]||this.map.set(t,1)}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.p="/",(()=>{"use strict";var t=r(379),e=r.n(t),n=r(192);e()(n.Z,{insert:"head",singleton:!1}),n.Z.locals;var i=r(157),o=r(535),s=r(417),a=r(751);function A(t,e){const r=JSON.parse(e),n=new s.Z(t,r);let i=null;const a=new o.Z(t,r,n);n.start(),a.show(),t.on("playerMove",(t=>{let e=t.oldPos[0],r=t.oldPos[1],i=t.newPos[0],o=t.newPos[1];n.board.grid[e][r].player="empty",n.board.grid[i][o].player=t.player,n.swapTurn(),a.show()})),t.on("placeWall",(t=>{const e=t.wallA,r=t.wallB,i=t.wallC,o=t.wallD,s=n.board.grid[e[0]][e[1]],A=n.board.grid[r[0]][r[1]],l=n.board.grid[i[0]][i[1]],c=n.board.grid[o[0]][o[1]];"north"===t.dir?(s.walls.North=!0,A.walls.North=!0,l.walls.South=!0,c.walls.South=!0):"south"===t.dir?(s.walls.South=!0,A.walls.South=!0,l.walls.North=!0,c.walls.North=!0):"east"===t.dir?(s.walls.East=!0,A.walls.East=!0,l.walls.West=!0,c.walls.West=!0):"west"===t.dir&&(s.walls.West=!0,A.walls.West=!0,l.walls.East=!0,c.walls.East=!0),n.swapTurn(),a.show()})),t.on("gameOver",(e=>{n.currentPlayer="noone";let r=document.getElementsByClassName("table")[0];r&&r.remove(),i||(i=e,function(t,e){const r=document.createElement("div");r.setAttribute("id","winner-div");const n=document.createElement("h1");n.setAttribute("id","winner-message"),n.innerHTML=t===e?"CONGRATS YOU WON!!!":"sucks to suck.. try again next time",r.appendChild(n),document.getElementsByTagName("body")[0].appendChild(r),setTimeout((()=>{location.reload()}),5e3)}(t.id,e))}))}a.Manager,document.head.appendChild(function(){const t=document.createElement("link");return t.rel="icon",t.href=i,t.type="image/png",t}()),document.addEventListener("DOMContentLoaded",(function(){const t=a();(function(t){const e=document.createElement("div"),r=document.createElement("button"),n=document.createElement("button");e.setAttribute("id","splash-div"),r.setAttribute("id","create-room-button"),r.innerHTML="Create A Room",r.classList.add("btn"),n.setAttribute("id","join-room-button"),n.innerHTML="Join A Room",n.classList.add("btn"),e.appendChild(r),e.appendChild(n),r.addEventListener("click",(()=>{e.remove(),function(t){const e=document.createElement("form"),r=document.createElement("div"),n=document.createElement("input"),i=document.createElement("button");e.setAttribute("id","room-form"),r.setAttribute("id","form-div"),n.setAttribute("id","room-input"),n.setAttribute("placeholder","Type room name"),i.setAttribute("id","room-button"),i.classList.add("btn"),i.innerHTML="Go!",r.appendChild(e),e.appendChild(n),e.appendChild(i),document.getElementsByTagName("body")[0].appendChild(r),e.addEventListener("submit",(e=>{if(e.preventDefault(),n.value){const e=e=>{e?(r.remove(),t.emit("ready")):(n.setAttribute("placeholder","Room List is full"),setTimeout((()=>{location.reload()}),3e3))};t.emit("createRoom",n.value,e),n.value=""}})),t.on("join-room",(e=>{r.classList.add("hide"),function(t,e){if(!document.getElementById("lobby-div")){const r=document.createElement("div"),n=document.createElement("h1"),i=document.createElement("ul"),o=document.createElement("form"),s=document.createElement("input"),a=document.createElement("button"),A=document.createElement("button");r.setAttribute("id","lobby-div"),n.innerHTML=e,n.setAttribute("id","lobby-id"),i.setAttribute("id","lobby-messages"),A.setAttribute("id","lobby-start-game"),A.innerHTML="Start Game!",o.setAttribute("id","lobby-form"),o.setAttribute("action",""),s.setAttribute("id","lobby-input"),s.setAttribute("autocomplete","off"),a.innerHTML="send",o.appendChild(s),o.appendChild(a),i.appendChild(o),r.appendChild(n),r.appendChild(i),r.appendChild(A),document.getElementsByTagName("body")[0].appendChild(r),o.addEventListener("submit",(r=>{r.preventDefault(),s.value&&(t.emit("lobby-message",[e,s.value]),s.value="")})),A.addEventListener("click",(r=>{t.emit("start-game",[t.id,e])}))}}(t,e)})),t.on("lobby-message",(([t,e])=>{let r=document.createElement("li");r.textContent=t+" -> "+e,document.getElementById("lobby-messages").appendChild(r),window.scrollTo(0,document.body.scrollHeight)})),t.on("start-game",(([t,e])=>{document.getElementsByClassName("table")[0]||(document.getElementById("lobby-div").classList.add("hide"),A(t,e))}))}(t)})),n.addEventListener("click",(()=>{t.emit("getRoomNames",(r=>{(function(t,e){const r=document.createElement("div");r.setAttribute("id","lobby-rooms-list-div");const n=document.createElement("ul"),i=()=>{t.emit("ready")};for(let o=0;o<e.length;o++)if(e[o].sockets<2){const s=document.createElement("li"),a=document.createElement("button");s.appendChild(a),a.innerHTML=e[o].name,a.classList.add("btn"),a.addEventListener("click",(n=>{r.remove(),t.emit("joinRoom",e[o].id,i)})),n.appendChild(s)}return r.appendChild(n),document.getElementsByTagName("body")[0].appendChild(r),e.length})(t,r)>0?e.remove():document.getElementById("lobby-rooms-list-div").remove()}))})),document.getElementsByTagName("body")[0].appendChild(e)})(t),t.on("initGame",(e=>{A(t,e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9zcmMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvY29tbW9ucy5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9tYW5hZ2VyLmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvb24uanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC91cmwuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2JpbmFyeS5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2lzLWJpbmFyeS5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL3NyYy9ib2FyZC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL3NyYy9nYW1lLmpzIiwid2VicGFjazovL3F1b3JpZG9yLy4vc3JjL2dhbWVfdmlldy5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL3NyYy9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly9xdW9yaWRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9xdW9yaWRvci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9xdW9yaWRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3Ivd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9xdW9yaWRvci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9xdW9yaWRvci8uL3NyYy9zdHlsZS5zY3NzPzc1YmEiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXVvcmlkb3IvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC93cmFwcGVyLm1qcyJdLCJuYW1lcyI6WyJCYWNrb2ZmIiwib3B0cyIsInRoaXMiLCJtcyIsIm1pbiIsIm1heCIsImZhY3RvciIsImppdHRlciIsImF0dGVtcHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImR1cmF0aW9uIiwiTWF0aCIsInBvdyIsInJhbmQiLCJyYW5kb20iLCJkZXZpYXRpb24iLCJmbG9vciIsInJlc2V0Iiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIiwiY2hhcnMiLCJlbmNvZGUiLCJhcnJheWJ1ZmZlciIsImkiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJiYXNlNjQiLCJzdWJzdHJpbmciLCJkZWNvZGUiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsInAiLCJBcnJheUJ1ZmZlciIsImluZGV4T2YiLCJFbWl0dGVyIiwib2JqIiwia2V5IiwibWl4aW4iLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImZuIiwiX2NhbGxiYWNrcyIsInB1c2giLCJvbmNlIiwib2ZmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImNhbGxiYWNrcyIsInNwbGljZSIsImVtaXQiLCJhcmdzIiwiQXJyYXkiLCJzbGljZSIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImFycjIiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsImNhbGwiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwicyIsIm0iLCJoIiwiZCIsInBsdXJhbCIsIm1zQWJzIiwiaXNQbHVyYWwiLCJyb3VuZCIsInZhbCIsIm9wdGlvbnMiLCJ0eXBlIiwic3RyIiwiU3RyaW5nIiwibWF0Y2giLCJleGVjIiwicGFyc2VGbG9hdCIsInRvTG93ZXJDYXNlIiwicGFyc2UiLCJpc0Zpbml0ZSIsImxvbmciLCJhYnMiLCJmbXRTaG9ydCIsIkVycm9yIiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImMiLCJjb2xvciIsImluZGV4IiwibGFzdEMiLCJyZXBsYWNlIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsImxvYWQiLCJyIiwiZ2V0SXRlbSIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsIndpbmRvdyIsIl9fbndqcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJkZXN0cm95Iiwid2FybmVkIiwid2FybiIsImNvbG9ycyIsImxvZyIsImRlYnVnIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwibWVzc2FnZSIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJlbmFibGVPdmVycmlkZSIsImVuYWJsZWQiLCJzZWxmIiwiY3VyciIsIk51bWJlciIsIkRhdGUiLCJwcmV2IiwiY29lcmNlIiwidW5zaGlmdCIsImZvcm1hdCIsImZvcm1hdHRlciIsInNlbGVjdENvbG9yIiwiZXh0ZW5kIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0Iiwic2V0IiwiaW5pdCIsImRlbGltaXRlciIsIm5ld0RlYnVnIiwidG9OYW1lc3BhY2UiLCJyZWdleHAiLCJkZWZhdWx0Iiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImVuYWJsZSIsInNwbGl0Iiwic3Vic3RyIiwia2V5cyIsImZvckVhY2giLCJoYXNoIiwiY2hhckNvZGVBdCIsIkZ1bmN0aW9uIiwiU29ja2V0IiwidXJpIiwicHJvdG9jb2wiLCJUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwicGFyc2VyIiwicGFyc2V1cmkiLCJwYXJzZXFzIiwic3VwZXIiLCJob3N0bmFtZSIsImhvc3QiLCJzZWN1cmUiLCJwb3J0IiwicXVlcnkiLCJsb2NhdGlvbiIsInJlYWR5U3RhdGUiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJhc3NpZ24iLCJwYXRoIiwiYWdlbnQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ1cGdyYWRlIiwianNvbnAiLCJ0aW1lc3RhbXBQYXJhbSIsInJlbWVtYmVyVXBncmFkZSIsInJlamVjdFVuYXV0aG9yaXplZCIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwidHJhbnNwb3J0T3B0aW9ucyIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nVGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwiY2xvc2UiLCJvcGVuIiwiaGFzT3duUHJvcGVydHkiLCJjbG9uZSIsIkVJTyIsInNpZCIsInNvY2tldCIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsInNldFRpbWVvdXQiLCJjcmVhdGVUcmFuc3BvcnQiLCJlIiwic2hpZnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicGFja2V0Iiwib25QYWNrZXQiLCJvbkVycm9yIiwib25DbG9zZSIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwib25seUJpbmFyeVVwZ3JhZGVzIiwidXBncmFkZUxvc2VzQmluYXJ5Iiwic3VwcG9ydHNCaW5hcnkiLCJzZW5kIiwibXNnIiwidXBncmFkaW5nIiwicGF1c2UiLCJjbGVhbnVwIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvbmVycm9yIiwib25UcmFuc3BvcnRDbG9zZSIsIm9uY2xvc2UiLCJvbnVwZ3JhZGUiLCJ0byIsImwiLCJvbkhhbmRzaGFrZSIsInJlc2V0UGluZ1RpbWVvdXQiLCJzZW5kUGFja2V0IiwiY29kZSIsImZpbHRlclVwZ3JhZGVzIiwib25PcGVuIiwiY2xlYXJUaW1lb3V0Iiwid3JpdGFibGUiLCJjb21wcmVzcyIsImNsZWFudXBBbmRDbG9zZSIsIndhaXRGb3JVcGdyYWRlIiwicmVhc29uIiwiZGVzYyIsInBpbmdJbnRlcnZhbFRpbWVyIiwiZmlsdGVyZWRVcGdyYWRlcyIsImRlc2NyaXB0aW9uIiwiZG9PcGVuIiwiZG9DbG9zZSIsInBhY2tldHMiLCJ3cml0ZSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJYTUxIdHRwUmVxdWVzdCIsIlhIUiIsIkpTT05QIiwid2Vic29ja2V0IiwicG9sbGluZyIsInhociIsInhkIiwieHMiLCJpc1NTTCIsInhkb21haW4iLCJ4c2NoZW1lIiwiZm9yY2VKU09OUCIsIlBvbGxpbmciLCJnbG9iYWxUaGlzIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJfX19laW8iLCJvbkRhdGEiLCJzY3JpcHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JtIiwiaWZyYW1lIiwiY3JlYXRlRWxlbWVudCIsImFzeW5jIiwic3JjIiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhcmVhIiwiaWZyYW1lSWQiLCJjbGFzc05hbWUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ0YXJnZXQiLCJtZXRob2QiLCJzZXRBdHRyaWJ1dGUiLCJjb21wbGV0ZSIsImluaXRJZnJhbWUiLCJodG1sIiwiYWN0aW9uIiwic3VibWl0IiwiYXR0YWNoRXZlbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJwaWNrIiwiZW1wdHkiLCJoYXNYSFIyIiwicmVzcG9uc2VUeXBlIiwiUmVxdWVzdCIsImNyZWF0ZSIsImV4dHJhSGVhZGVycyIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXF1ZXN0VGltZW91dCIsInRpbWVvdXQiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJmcm9tRXJyb3IiLCJhYm9ydCIsIlhEb21haW5SZXF1ZXN0IiwiZW5hYmxlc1hEUiIsInVubG9hZEhhbmRsZXIiLCJmb3JjZUJhc2U2NCIsInJlcSIsInJlcXVlc3QiLCJwb2xsWGhyIiwieWVhc3QiLCJwb2xsIiwib25QYXVzZSIsInRvdGFsIiwiZG9Qb2xsIiwiZGVjb2RlUGF5bG9hZCIsImVuY29kZVBheWxvYWQiLCJkb1dyaXRlIiwic2NoZW1hIiwidGltZXN0YW1wUmVxdWVzdHMiLCJiNjQiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJkZWZhdWx0QmluYXJ5VHlwZSIsImlzUmVhY3ROYXRpdmUiLCJwcm9kdWN0IiwiV1MiLCJjaGVjayIsInByb3RvY29scyIsImhlYWRlcnMiLCJ3cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25vcGVuIiwib25tZXNzYWdlIiwiZXYiLCJlbmNvZGVQYWNrZXQiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYXR0ciIsInJlZHVjZSIsImFjYyIsImsiLCJoYXNDT1JTIiwiUEFDS0VUX1RZUEVTIiwiUEFDS0VUX1RZUEVTX1JFVkVSU0UiLCJFUlJPUl9QQUNLRVQiLCJiYXNlNjRkZWNvZGVyIiwiZGVjb2RlQmFzZTY0UGFja2V0IiwiZGVjb2RlZCIsIm1hcEJpbmFyeSIsIkJsb2IiLCJlbmNvZGVkUGFja2V0IiwiY2hhckF0Iiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNCYXNlNjQiLCJjYWxsYmFjayIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsImlzVmlldyIsImJ1ZmZlciIsIlNFUEFSQVRPUiIsImZyb21DaGFyQ29kZSIsImVuY29kZWRQYWNrZXRzIiwiY291bnQiLCJlbmNvZGVkUGF5bG9hZCIsImRlY29kZWRQYWNrZXQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlIiwicGFydHMiLCJiIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMiIsImlvIiwiTWFuYWdlciIsInVybF8xIiwibWFuYWdlcl8xIiwic29ja2V0XzEiLCJsb29rdXAiLCJjYWNoZSIsIm1hbmFnZXJzIiwicGFyc2VkIiwidXJsIiwic2FtZU5hbWVzcGFjZSIsImZvcmNlTmV3IiwibXVsdGlwbGV4Iiwic29ja2V0X2lvX3BhcnNlcl8xIiwiY29ubmVjdCIsIm1hbmFnZXJfMiIsImVpbyIsIm9uXzEiLCJuc3BzIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwiSW5maW5pdHkiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCJfcmVhZHlTdGF0ZSIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiRW5jb2RlciIsImRlY29kZXIiLCJEZWNvZGVyIiwiX2F1dG9Db25uZWN0IiwiYXV0b0Nvbm5lY3QiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX2EiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJfcmFuZG9taXphdGlvbkZhY3RvciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsIl90aW1lb3V0IiwiX3JlY29ubmVjdGluZyIsInJlY29ubmVjdCIsImVuZ2luZSIsInNraXBSZWNvbm5lY3QiLCJvcGVuU3ViRGVzdHJveSIsImVycm9yU3ViIiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJ0aW1lciIsIm9ucGluZyIsImJpbmQiLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJhZGQiLCJuc3AiLCJhY3RpdmUiLCJfY2xvc2UiLCJzdWJEZXN0cm95IiwiZGVsYXkiLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJSRVNFUlZFRF9FVkVOVFMiLCJmcmVlemUiLCJjb25uZWN0X2Vycm9yIiwiZGlzY29ubmVjdCIsImRpc2Nvbm5lY3RpbmciLCJuZXdMaXN0ZW5lciIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiaWRzIiwiYWNrcyIsImZsYWdzIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiYXV0aCIsIm9ucGFja2V0Iiwic3ViRXZlbnRzIiwiUGFja2V0VHlwZSIsIkVWRU5UIiwicG9wIiwiaXNUcmFuc3BvcnRXcml0YWJsZSIsInZvbGF0aWxlIiwiX3BhY2tldCIsIkNPTk5FQ1QiLCJvbmNvbm5lY3QiLCJCSU5BUllfRVZFTlQiLCJvbmV2ZW50IiwiQUNLIiwiQklOQVJZX0FDSyIsIm9uYWNrIiwiRElTQ09OTkVDVCIsIm9uZGlzY29ubmVjdCIsIkNPTk5FQ1RfRVJST1IiLCJhY2siLCJlbWl0RXZlbnQiLCJfYW55TGlzdGVuZXJzIiwibGlzdGVuZXIiLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwibG9jIiwiaHJlZiIsInJlY29uc3RydWN0UGFja2V0IiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJpc19iaW5hcnlfMSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImJ1ZmZlcnMiLCJpc0JpbmFyeSIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibnVtIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBhY2tldERhdGEiLCJwYWNrIiwiYXR0YWNobWVudHMiLCJiaW5hcnlfMSIsImhhc0JpbmFyeSIsImVuY29kZUFzU3RyaW5nIiwiZW5jb2RlQXNCaW5hcnkiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29kZVN0cmluZyIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwidGFrZUJpbmFyeURhdGEiLCJzdGFydCIsImJ1ZiIsInBheWxvYWQiLCJ0cnlQYXJzZSIsImlzUGF5bG9hZFZhbGlkIiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsInJlY29uUGFjayIsImJpbkRhdGEiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJ0b0pTT04iLCJtZW1vIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJhbHBoYWJldCIsInNlZWQiLCJlbmNvZGVkIiwibm93IiwiQm9hcmQiLCJwMSIsInAyIiwid2lkdGgiLCJoZWlnaHQiLCJncmlkIiwibWFrZUdyaWQiLCJ3aW5uZXIiLCJ1dGlsIiwicGxheWVyMSIsInAxUG9zIiwicGxheWVyMiIsInAyUG9zIiwidHJhY2tGdW5jdGlvbnMiLCJncmlkU3F1YXJlMiIsImdyaWRTcXVhcmUxIiwibW9kZWwiLCJwbGF5ZXIiLCJzcXVhcmUiLCJuZWlnaGJvcnMiLCJjb2xJZHgiLCJyb3dJZHgiLCJjaGVja0Nyb3NzV2FsbCIsImRpciIsIndhbGxzIiwiTm9ydGgiLCJFYXN0IiwiU291dGgiLCJXZXN0Iiwicm9vdCIsImdvYWwiLCJoYXNobWFwIiwiTWFwIiwiUSIsImRpc2NvdmVyZWQiLCJpbmNsdWRlcyIsInRyYXZlcnNlSGFzaG1hcCIsIm5ld1YiLCJub2RlIiwicmV2ZXJzZSIsIkdhbWUiLCJyb29tIiwicGxheWVyMUlEIiwicGxheWVyMklEIiwiYm9hcmQiLCJjdXJyZW50UGxheWVyIiwicGxheWVyMVdhbGxzIiwicGxheWVyMldhbGxzIiwic3RhdGUiLCJtb3ZlUGxheWVyIiwic3F1YXJlQSIsInNxdWFyZUIiLCJwbGFjZVdhbGwiLCJpc1ZhbGlkV2FsbCIsInBsYXllcldhbGxzIiwic3FyQSIsInNxckIiLCJuZWlnaGJvcnNBIiwiY2hlY2tOZWlnaGJvcnMiLCJuZWlnaGJvcnNCIiwiZmluZFBhdGgiLCJyb29tSWQiLCJ3YWxsQSIsIndhbGxCIiwid2FsbEMiLCJ3YWxsRCIsIm5ld0NvbElkeCIsIm5ld1Jvd0lkeCIsImlzV2FsbGVkIiwiaXNWYWxpZCIsIm9sZFNxdWFyZSIsIm5ld1NxdWFyZSIsInNldFBsYXllclBvcyIsIm9sZFBvcyIsIm5ld1BvcyIsInBvcyIsIm1vdmVzIiwiY3VycmVudFNxdWFyZSIsInRlbXBTcXVhcmUiLCJzZXRQbGF5ZXJzIiwiYmZzIiwiR2FtZVZpZXciLCJnYW1lIiwiYXZhaWxhYmxlTW92ZXMiLCJzZXR1cEJvYXJkIiwic2V0dXBFdmVudExpc3RlbmVycyIsInNob3dCb2FyZCIsImlzT3ZlciIsImVsZSIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwiaW5uZXJIVE1MIiwid2FsbENvdW50ZXJzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJ0biIsImNvbnRhaW5zIiwicGxheWVyc1R1cm4iLCJoYW5kbGVQbGFjZVdhbGxCdXR0b24iLCJoYW5kbGVNb3ZlbWVudEJ1dHRvbiIsImhhbmRsZVNxdWFyZUNsaWNrIiwiaGFuZGxlV2FsbFR5cGVCdXR0b24iLCJ0YWtlVHVybiIsInNob3ciLCJoYW5kbGVCYWNrQnV0dG9uIiwicmVsb2FkIiwiY2hhbmdlTmVpZ2hib3JzQXJyYXlUb1N0cmluZyIsInNlbGVjdGVkV2FsbHMiLCJ3YWxsIiwiZ2V0QXZhaWxhYmxlTW92ZXMiLCJpbnN0cnVjdGlvbnMiLCJhcnJheSIsImlubmVyVGV4dCIsImRpdiIsImNvbmdyYXRzIiwiYm9hcmREaXYiLCJ3aG9zVHVybiIsImNudHJsRGl2Iiwid2FsbENvdW50ZXJEaXYiLCJjcmVhdGVCdXR0b24iLCJjbGlja0luc3RydWN0Iiwibm9ydGgiLCJlYXN0Iiwic291dGgiLCJ3ZXN0IiwiYmFjayIsInRyIiwidGQiLCJTcXVhcmUiLCJVdGlsIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJhIiwiZGVmaW5pdGlvbiIsInByb3AiLCJnYW1lVGFibGUiLCJKU09Ocm9vbSIsImdhbWVWaWV3Iiwib2xkUm93Iiwib2xkQ29sIiwibmV3Um93IiwibmV3Q29sIiwic3dhcFR1cm4iLCJwb3NBIiwicG9zQiIsInBvc0MiLCJwb3NEIiwic3FyQyIsInNxckQiLCJzb2NrZXRJZCIsImdhbWVPdmVyIiwiZWxlbWVudCIsInJlbCIsImljb25Db21wb25lbnQiLCJjcmVhdGVSb29tIiwiam9pblJvb20iLCJyb29tRm9ybSIsImZvcm1EaXYiLCJyb29tSW5wdXQiLCJyb29tQnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJib29sIiwicm9vbUlEIiwiaDEiLCJ1bCIsImlucHV0IiwiYnV0dG9uIiwic3RhcnRHYW1lIiwiZ2FtZUxvYmJ5IiwidGV4dENvbnRlbnQiLCJzY3JvbGxUbyIsInNjcm9sbEhlaWdodCIsImNyZWF0ZVJvb21Gb3JtIiwicm9vbU5hbWVzIiwic29ja2V0cyIsImxpIiwibG9iYnlSb29tc0xpc3QiLCJsb2JieVNwbGFzaCJdLCJtYXBwaW5ncyI6Im9CQW1CQSxTQUFTQSxFQUFRQyxHQUNmQSxFQUFPQSxHQUFRLEdBQ2ZDLEtBQUtDLEdBQUtGLEVBQUtHLEtBQU8sSUFDdEJGLEtBQUtHLElBQU1KLEVBQUtJLEtBQU8sSUFDdkJILEtBQUtJLE9BQVNMLEVBQUtLLFFBQVUsRUFDN0JKLEtBQUtLLE9BQVNOLEVBQUtNLE9BQVMsR0FBS04sRUFBS00sUUFBVSxFQUFJTixFQUFLTSxPQUFTLEVBQ2xFTCxLQUFLTSxTQUFXLEVBcEJsQkMsRUFBT0MsUUFBVVYsRUE4QmpCQSxFQUFRVyxVQUFVQyxTQUFXLFdBQzNCLElBQUlULEVBQUtELEtBQUtDLEdBQUtVLEtBQUtDLElBQUlaLEtBQUtJLE9BQVFKLEtBQUtNLFlBQzlDLEdBQUlOLEtBQUtLLE9BQVEsQ0FDZixJQUFJUSxFQUFRRixLQUFLRyxTQUNiQyxFQUFZSixLQUFLSyxNQUFNSCxFQUFPYixLQUFLSyxPQUFTSixHQUNoREEsRUFBb0MsSUFBTixFQUF4QlUsS0FBS0ssTUFBYSxHQUFQSCxJQUF3QlosRUFBS2MsRUFBWWQsRUFBS2MsRUFFakUsT0FBZ0MsRUFBekJKLEtBQUtULElBQUlELEVBQUlELEtBQUtHLE1BUzNCTCxFQUFRVyxVQUFVUSxNQUFRLFdBQ3hCakIsS0FBS00sU0FBVyxHQVNsQlIsRUFBUVcsVUFBVVMsT0FBUyxTQUFTaEIsR0FDbENGLEtBQUtDLEdBQUtDLEdBU1pKLEVBQVFXLFVBQVVVLE9BQVMsU0FBU2hCLEdBQ2xDSCxLQUFLRyxJQUFNQSxHQVNiTCxFQUFRVyxVQUFVVyxVQUFZ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RyxDQUMxQixNQUFNQyxFQUFLbHFCLFNBQVNrTCxjQUFjLE1BQzVCdWUsRUFBU3pwQixTQUFTa0wsY0FBYyxVQUN0Q2dmLEVBQUd4ZSxZQUFZK2QsR0FDZkEsRUFBTy9FLFVBQVlzRixFQUFVcnpCLEdBQUdrRixLQUNoQzR0QixFQUFPaEYsVUFBVWxPLElBQUksT0FDckJrVCxFQUFPenhCLGlCQUFpQixTQUFVME8sSUFDOUJxZixFQUFJekksU0FDSmhYLEVBQU92TixLQUFLLFdBQVlpeEIsRUFBVXJ6QixHQUFHMkMsR0FBSWdZLE1BRTdDaVksRUFBRzdkLFlBQVl3ZSxHQUt2QixPQUZBbkUsRUFBSXJhLFlBQVk2ZCxHQUNoQnZwQixTQUFTc0wscUJBQXFCLFFBQVEsR0FBR0ksWUFBWXFhLEdBQzlDaUUsRUFBVWp6QixRQXBDYW96QixDQUFlN2pCLEVBQVEwakIsR0FDekIsRUFDaEJqRSxFQUFJekksU0FFSnRkLFNBQVN3a0IsZUFBZSx3QkFBd0JsSCxlQU01RHRkLFNBQVNzTCxxQkFBcUIsUUFBUSxHQUFHSSxZQUFZcWEsSUF3T3JEcUUsQ0FBWTlqQixHQUVaQSxFQUFPdk8sR0FBRyxZQUFheXBCLElBQ25Ca0csRUFBVXBoQixFQUFRa2IsVSIsImZpbGUiOiJpbmRleC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbihjaGFycyl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSBcIlwiO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9Mykge1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmICgobGVuICUgMykgPT09IDIpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0O1xuICB9O1xuXG4gIGV4cG9ydHMuZGVjb2RlID0gIGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSxcbiAgICBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCxcbiAgICBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gXCI9XCIpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7XG4gICAgICBlbmNvZGVkMSA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2ldKTtcbiAgICAgIGVuY29kZWQyID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSsxXSk7XG4gICAgICBlbmNvZGVkMyA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krMl0pO1xuICAgICAgZW5jb2RlZDQgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzNdKTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KShcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIik7XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbW92ZSBldmVudCBzcGVjaWZpYyBhcnJheXMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgbm9cclxuICAvLyBvbmUgaXMgc3Vic2NyaWJlZCBmb3IgdG8gYXZvaWQgbWVtb3J5IGxlYWsuXHJcbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcclxuICB9XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9UXVhbnRpY286d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsYm9keSxkaXYsc3BhbixhcHBsZXQsb2JqZWN0LGlmcmFtZSxoMSxoMixoMyxoNCxoNSxoNixwLGJsb2NrcXVvdGUscHJlLGEsYWJicixhY3JvbnltLGFkZHJlc3MsYmlnLGNpdGUsY29kZSxkZWwsZGZuLGVtLGltZyxpbnMsa2JkLHEscyxzYW1wLHNtYWxsLHN0cmlrZSxzdHJvbmcsc3ViLHN1cCx0dCx2YXIsYix1LGksY2VudGVyLGRsLGR0LGRkLG9sLHVsLGxpLGZpZWxkc2V0LGZvcm0sbGFiZWwsbGVnZW5kLHRhYmxlLGNhcHRpb24sdGJvZHksdGZvb3QsdGhlYWQsdHIsdGgsdGQsYXJ0aWNsZSxhc2lkZSxjYW52YXMsZGV0YWlscyxlbWJlZCxmaWd1cmUsZmlnY2FwdGlvbixmb290ZXIsaGVhZGVyLGhncm91cCxtZW51LG5hdixvdXRwdXQscnVieSxzZWN0aW9uLHN1bW1hcnksdGltZSxtYXJrLGF1ZGlvLHZpZGVve21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtmb250LXNpemU6MTAwJTtmb250OmluaGVyaXQ7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9YXJ0aWNsZSxhc2lkZSxkZXRhaWxzLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1lbnUsbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja31odG1se2JhY2tncm91bmQ6IzRkNjE4Yn1ib2R5e2xpbmUtaGVpZ2h0OjE7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfW9sLHVse2xpc3Qtc3R5bGU6bm9uZX1ibG9ja3F1b3RlLHF7cXVvdGVzOm5vbmV9YmxvY2txdW90ZTpiZWZvcmUsYmxvY2txdW90ZTphZnRlcixxOmJlZm9yZSxxOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7Y29udGVudDpub25lfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIxcHgpe3RhYmxle2ZvbnQtc2l6ZToxZW19LmhpZGV7ZGlzcGxheTpub25lfSNib2FyZHt3aWR0aDo5NSU7bWluLWhlaWdodDozMDRweDttYXJnaW4tdG9wOjJlbTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS53YWxsLXRvcHtib3JkZXItdG9wOjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1ib3R0b217Ym9yZGVyLWJvdHRvbToycHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtcmlnaHR7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1sZWZ0e2JvcmRlci1sZWZ0OjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0udGFibGV7d2lkdGg6MTAwdnc7Ym9yZGVyLXNwYWNpbmc6MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oYWxse3otaW5kZXg6NX10ZHt3aWR0aDozM3B4O2hlaWdodDozM3B4O2JvcmRlcjoycHggc29saWQgIzRkNjE4YjtiYWNrZ3JvdW5kOiM3Njg2YTh9dHJ7aGVpZ2h0OjMzcHh9LmJ1dHRvbntwYWRkaW5nOjVweCA3cHh9LmNvbnRyb2xsZXItZGl2e21hcmdpbjoxZW0gYXV0bzt3aWR0aDo4MCU7cGFkZGluZzo1cHggN3B4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uY29udHJvbGxlci1idG57YmFja2dyb3VuZDojYjhjM2Q5O2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjtjdXJzb3I6cG9pbnRlcjtib3JkZXI6bm9uZTttYXJnaW46YXV0bztoZWlnaHQ6NDVweDt3aWR0aDoxMDBweDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzowIDEuNHB4IDEuMXB4IHJnYmEoMCwwLDAsLjAzNCksMCAzLjRweCAyLjZweCByZ2JhKDAsMCwwLC4wNDgpLDAgNy43cHggNXB4IHJnYmEoMCwwLDAsLjA2KSwwIDExLjE1cHggOC41cHggcmdiYSgwLDAsMCwuMDg2KSwwIDUwcHggNDBweCByZ2JhKDAsMCwwLC4xMil9LmNvbnRyb2xsZXItYnRuOmhvdmVye3RyYW5zaXRpb246LjNzIGVhc2UtaW4tb3V0O2JhY2tncm91bmQ6IzczODNhNjtib3gtc2hhZG93OjAgMi44cHggMi4ycHggcmdiYSgwLDAsMCwuMDM0KSwwIDYuN3B4IDUuM3B4IHJnYmEoMCwwLDAsLjA0OCksMCAxNS41cHggMTBweCByZ2JhKDAsMCwwLC4wNiksMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwwLDAsLjA4NiksMCAxMDBweCA4MHB4IHJnYmEoMCwwLDAsLjEyKX0ucGxheWVye2ZvbnQtc2l6ZToxLjNlbTtsaW5lLWhlaWdodDozNnB4O3RleHQtYWxpZ246Y2VudGVyfS5oaWdobGlnaHR7YmFja2dyb3VuZDojOGRiYjVlfS5oaWdobGlnaHQ6aG92ZXJ7YmFja2dyb3VuZDojYmRlMjk3fS5zZWxlY3RlZFdhbGx7YmFja2dyb3VuZDojYjAyZDFmfS5wbGF5ZXItdHVybntmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7cGFkZGluZzoxMHB4O3RleHQtYWxpZ246Y2VudGVyfS53YWxsLWNvdW50ZXItZGl2e21hcmdpbjoyZW0gYXV0bztkaXNwbGF5OmZsZXh9LndhbGwtY291bnRlcntmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjFlbTttYXgtd2lkdGg6NzVweDttYXJnaW4tbGVmdDoyMHB4O21hcmdpbi1yaWdodDoyMHB4fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDM3NnB4KWFuZCAobWluLXdpZHRoOiAzMjJweCl7dGFibGV7Zm9udC1zaXplOjFlbX0uaGlkZXtkaXNwbGF5Om5vbmV9I2JvYXJke3dpZHRoOjk1JTttYXgtaGVpZ2h0OjMzNjBweDttYXJnaW4tdG9wOjJlbTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS53YWxsLXRvcHtib3JkZXItdG9wOjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1ib3R0b217Ym9yZGVyLWJvdHRvbToycHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtcmlnaHR7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1sZWZ0e2JvcmRlci1sZWZ0OjJweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0udGFibGV7d2lkdGg6MTAwdnc7Ym9yZGVyLXNwYWNpbmc6MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oYWxse3otaW5kZXg6NX10ZHt3aWR0aDozNnB4O2hlaWdodDozNnB4O2JvcmRlcjoycHggc29saWQgIzRkNjE4YjtiYWNrZ3JvdW5kOiM3Njg2YTh9dHJ7aGVpZ2h0OjQzcHh9LmJ1dHRvbntwYWRkaW5nOjVweCA3cHh9LmNvbnRyb2xsZXItZGl2e21hcmdpbjoxZW0gYXV0bzt3aWR0aDo4MCU7cGFkZGluZzo1cHggN3B4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uY29udHJvbGxlci1idG57YmFja2dyb3VuZDojYjhjM2Q5O2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjtjdXJzb3I6cG9pbnRlcjtib3JkZXI6bm9uZTttYXJnaW46YXV0bztoZWlnaHQ6NDVweDt3aWR0aDoxMDBweDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzowIDEuNHB4IDEuMXB4IHJnYmEoMCwwLDAsLjAzNCksMCAzLjRweCAyLjZweCByZ2JhKDAsMCwwLC4wNDgpLDAgNy43cHggNXB4IHJnYmEoMCwwLDAsLjA2KSwwIDExLjE1cHggOC41cHggcmdiYSgwLDAsMCwuMDg2KSwwIDUwcHggNDBweCByZ2JhKDAsMCwwLC4xMil9LmNvbnRyb2xsZXItYnRuOmhvdmVye3RyYW5zaXRpb246LjNzIGVhc2UtaW4tb3V0O2JhY2tncm91bmQ6IzczODNhNjtib3gtc2hhZG93OjAgMi44cHggMi4ycHggcmdiYSgwLDAsMCwuMDM0KSwwIDYuN3B4IDUuM3B4IHJnYmEoMCwwLDAsLjA0OCksMCAxNS41cHggMTBweCByZ2JhKDAsMCwwLC4wNiksMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwwLDAsLjA4NiksMCAxMDBweCA4MHB4IHJnYmEoMCwwLDAsLjEyKX0ucGxheWVye2ZvbnQtc2l6ZToxLjdlbTtsaW5lLWhlaWdodDozNnB4O3RleHQtYWxpZ246Y2VudGVyfS5oaWdobGlnaHR7YmFja2dyb3VuZDojOGRiYjVlfS5oaWdobGlnaHQ6aG92ZXJ7YmFja2dyb3VuZDojYmRlMjk3fS5zZWxlY3RlZFdhbGx7YmFja2dyb3VuZDojYjAyZDFmfS5wbGF5ZXItdHVybntmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7cGFkZGluZzoxMHB4O3RleHQtYWxpZ246Y2VudGVyfS53YWxsLWNvdW50ZXItZGl2e21hcmdpbjoyZW0gYXV0bztkaXNwbGF5OmZsZXh9LndhbGwtY291bnRlcntmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjFlbTttYXgtd2lkdGg6NzVweDttYXJnaW4tbGVmdDoyMHB4O21hcmdpbi1yaWdodDoyMHB4fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY0MHB4KWFuZCAobWluLXdpZHRoOiAzNzdweCl7dGFibGV7Zm9udC1zaXplOjFlbX0uaGlkZXtkaXNwbGF5Om5vbmV9I2JvYXJke3dpZHRoOjM4N3B4O21heC1oZWlnaHQ6Mzg3cHg7bWFyZ2luLXRvcDoyZW07bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0b30ud2FsbC10b3B7Ym9yZGVyLXRvcDoycHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtYm90dG9te2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNmZmIwMDA7ei1pbmRleDo5fS53YWxsLXJpZ2h0e2JvcmRlci1yaWdodDoycHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtbGVmdHtib3JkZXItbGVmdDoycHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LnRhYmxle3dpZHRoOjEwMHZ3O2JvcmRlci1zcGFjaW5nOjA7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uaGFsbHt6LWluZGV4OjV9dGR7d2lkdGg6MzlweDtoZWlnaHQ6MzlweDtib3JkZXI6MnB4IHNvbGlkICM0ZDYxOGI7YmFja2dyb3VuZDojNzY4NmE4fXRye2hlaWdodDo0M3B4fS5idXR0b257cGFkZGluZzo1cHggN3B4fS5jb250cm9sbGVyLWRpdnttYXJnaW46MWVtIGF1dG87d2lkdGg6ODAlO3BhZGRpbmc6NXB4IDdweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNvbnRyb2xsZXItYnRue2JhY2tncm91bmQ6I2I4YzNkOTtmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyOm5vbmU7bWFyZ2luOmF1dG87aGVpZ2h0OjQ1cHg7d2lkdGg6MTAwcHg7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzIGVhc2UtaW4tb3V0O2JveC1zaGFkb3c6MCAxLjRweCAxLjFweCByZ2JhKDAsMCwwLC4wMzQpLDAgMy40cHggMi42cHggcmdiYSgwLDAsMCwuMDQ4KSwwIDcuN3B4IDVweCByZ2JhKDAsMCwwLC4wNiksMCAxMS4xNXB4IDguNXB4IHJnYmEoMCwwLDAsLjA4NiksMCA1MHB4IDQwcHggcmdiYSgwLDAsMCwuMTIpfS5jb250cm9sbGVyLWJ0bjpob3Zlcnt0cmFuc2l0aW9uOi4zcyBlYXNlLWluLW91dDtiYWNrZ3JvdW5kOiM3MzgzYTY7Ym94LXNoYWRvdzowIDIuOHB4IDIuMnB4IHJnYmEoMCwwLDAsLjAzNCksMCA2LjdweCA1LjNweCByZ2JhKDAsMCwwLC4wNDgpLDAgMTUuNXB4IDEwcHggcmdiYSgwLDAsMCwuMDYpLDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsMCwwLC4wODYpLDAgMTAwcHggODBweCByZ2JhKDAsMCwwLC4xMil9LnBsYXllcntmb250LXNpemU6MS43ZW07bGluZS1oZWlnaHQ6NDNweDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlnaGxpZ2h0e2JhY2tncm91bmQ6IzhkYmI1ZX0uaGlnaGxpZ2h0OmhvdmVye2JhY2tncm91bmQ6I2JkZTI5N30uc2VsZWN0ZWRXYWxse2JhY2tncm91bmQ6I2IwMmQxZn0ucGxheWVyLXR1cm57Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO3BhZGRpbmc6MTNweDt0ZXh0LWFsaWduOmNlbnRlcn0ud2FsbC1jb3VudGVyLWRpdnttYXJnaW46MmVtIGF1dG87ZGlzcGxheTpmbGV4fS53YWxsLWNvdW50ZXJ7Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxLjI1ZW07bWF4LXdpZHRoOjgwcHg7bWFyZ2luLWxlZnQ6MjBweDttYXJnaW4tcmlnaHQ6MjBweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweClhbmQgKG1pbi13aWR0aDogNjQxcHgpe3RhYmxle2ZvbnQtc2l6ZToxZW19LmhpZGV7ZGlzcGxheTpub25lfSNib2FyZHt3aWR0aDo0OTVweDtoZWlnaHQ6NDk1cHg7bWFyZ2luLXRvcDoyZW07bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0b30ud2FsbC10b3B7Ym9yZGVyLXRvcDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtYm90dG9te2JvcmRlci1ib3R0b206M3B4IHNvbGlkICNmZmIwMDA7ei1pbmRleDo5fS53YWxsLXJpZ2h0e2JvcmRlci1yaWdodDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtbGVmdHtib3JkZXItbGVmdDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LnRhYmxle2JvcmRlci1zcGFjaW5nOjA7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uaGFsbHt6LWluZGV4OjV9dGR7d2lkdGg6NDlweDtoZWlnaHQ6NDlweDtib3JkZXI6M3B4IHNvbGlkICM0ZDYxOGI7YmFja2dyb3VuZDojNzY4NmE4fXRye2hlaWdodDo1NXB4fS5idXR0b257cGFkZGluZzo1cHggN3B4fS5jb250cm9sbGVyLWRpdnttYXJnaW46MWVtIGF1dG87d2lkdGg6ODAlO3BhZGRpbmc6NXB4IDdweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNvbnRyb2xsZXItYnRue2JhY2tncm91bmQ6I2I4YzNkOTtmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyOm5vbmU7bWFyZ2luOmF1dG87aGVpZ2h0OjQ1cHg7d2lkdGg6MTAwcHg7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzIGVhc2UtaW4tb3V0O2JveC1zaGFkb3c6MCAxLjRweCAxLjFweCByZ2JhKDAsMCwwLC4wMzQpLDAgMy40cHggMi42cHggcmdiYSgwLDAsMCwuMDQ4KSwwIDcuN3B4IDVweCByZ2JhKDAsMCwwLC4wNiksMCAxMS4xNXB4IDguNXB4IHJnYmEoMCwwLDAsLjA4NiksMCA1MHB4IDQwcHggcmdiYSgwLDAsMCwuMTIpfS5jb250cm9sbGVyLWJ0bjpob3Zlcnt0cmFuc2l0aW9uOi4zcyBlYXNlLWluLW91dDtiYWNrZ3JvdW5kOiM3MzgzYTY7Ym94LXNoYWRvdzowIDIuOHB4IDIuMnB4IHJnYmEoMCwwLDAsLjAzNCksMCA2LjdweCA1LjNweCByZ2JhKDAsMCwwLC4wNDgpLDAgMTUuNXB4IDEwcHggcmdiYSgwLDAsMCwuMDYpLDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsMCwwLC4wODYpLDAgMTAwcHggODBweCByZ2JhKDAsMCwwLC4xMil9LnBsYXllcntmb250LXNpemU6MS43NWVtO2xpbmUtaGVpZ2h0OjU1cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmhpZ2hsaWdodHtiYWNrZ3JvdW5kOiM4ZGJiNWV9LmhpZ2hsaWdodDpob3ZlcntiYWNrZ3JvdW5kOiNiZGUyOTd9LnNlbGVjdGVkV2FsbHtiYWNrZ3JvdW5kOiNiMDJkMWZ9LnBsYXllci10dXJue2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjtwYWRkaW5nOjIwcHg7bWFyZ2luOjAgYXV0b30ud2FsbC1jb3VudGVyLWRpdnttYXJnaW4tdG9wOjMwcHg7ZGlzcGxheTpmbGV4fS53YWxsLWNvdW50ZXJ7Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO21hcmdpbjphdXRvfX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweClhbmQgKG1pbi13aWR0aDogNzY5cHgpe3RhYmxle2ZvbnQtc2l6ZToxZW19LmhpZGV7ZGlzcGxheTpub25lfSNib2FyZHt3aWR0aDo0OTVweDtoZWlnaHQ6NDk1cHg7bWFyZ2luLXRvcDoxZW07bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0b30ud2FsbC10b3B7Ym9yZGVyLXRvcDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtYm90dG9te2JvcmRlci1ib3R0b206M3B4IHNvbGlkICNmZmIwMDA7ei1pbmRleDo5fS53YWxsLXJpZ2h0e2JvcmRlci1yaWdodDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtbGVmdHtib3JkZXItbGVmdDozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LnRhYmxle2JvcmRlci1zcGFjaW5nOjA7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uaGFsbHt6LWluZGV4OjV9dGR7d2lkdGg6NDlweDtoZWlnaHQ6NDlweDtib3JkZXI6M3B4IHNvbGlkICM0ZDYxOGI7YmFja2dyb3VuZDojNzY4NmE4fXRye2hlaWdodDo1NXB4fS5idXR0b257cGFkZGluZzo1cHggN3B4fS5jb250cm9sbGVyLWRpdnttYXJnaW46MWVtIGF1dG87d2lkdGg6ODAlO3BhZGRpbmc6NXB4IDdweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNvbnRyb2xsZXItYnRue2JhY2tncm91bmQ6I2I4YzNkOTtmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjFlbTtjdXJzb3I6cG9pbnRlcjtib3JkZXI6bm9uZTttYXJnaW46YXV0bztoZWlnaHQ6NTVweDt3aWR0aDoxMzNweDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzowIDEuNHB4IDEuMXB4IHJnYmEoMCwwLDAsLjAzNCksMCAzLjRweCAyLjZweCByZ2JhKDAsMCwwLC4wNDgpLDAgNy43cHggNXB4IHJnYmEoMCwwLDAsLjA2KSwwIDExLjE1cHggOC41cHggcmdiYSgwLDAsMCwuMDg2KSwwIDUwcHggNDBweCByZ2JhKDAsMCwwLC4xMil9LmNvbnRyb2xsZXItYnRuOmhvdmVye3RyYW5zaXRpb246LjNzIGVhc2UtaW4tb3V0O2JhY2tncm91bmQ6IzczODNhNjtib3gtc2hhZG93OjAgMi44cHggMi4ycHggcmdiYSgwLDAsMCwuMDM0KSwwIDYuN3B4IDUuM3B4IHJnYmEoMCwwLDAsLjA0OCksMCAxNS41cHggMTBweCByZ2JhKDAsMCwwLC4wNiksMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwwLDAsLjA4NiksMCAxMDBweCA4MHB4IHJnYmEoMCwwLDAsLjEyKX0ucGxheWVye2ZvbnQtc2l6ZToxLjc1ZW07bGluZS1oZWlnaHQ6NTVweDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlnaGxpZ2h0e2JhY2tncm91bmQ6IzhkYmI1ZX0uaGlnaGxpZ2h0OmhvdmVye2JhY2tncm91bmQ6I2JkZTI5N30uc2VsZWN0ZWRXYWxse2JhY2tncm91bmQ6I2IwMmQxZn0ucGxheWVyLXR1cm57Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO3BhZGRpbmc6MjBweDttYXJnaW46MCBhdXRvfS53YWxsLWNvdW50ZXItZGl2e21hcmdpbi10b3A6NXB4O2Rpc3BsYXk6ZmxleH0ud2FsbC1jb3VudGVye2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjttYXJnaW46YXV0b319QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNDQwcHgpYW5kIChtaW4td2lkdGg6IDEwMjVweCl7dGFibGV7Zm9udC1zaXplOjFlbX0uaGlkZXtkaXNwbGF5Om5vbmV9I2JvYXJke3dpZHRoOjYzMHB4O2hlaWdodDo2MzBweDttYXJnaW4tdG9wOjFlbTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS53YWxsLXRvcHtib3JkZXItdG9wOjNweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1ib3R0b217Ym9yZGVyLWJvdHRvbTozcHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtcmlnaHR7Ym9yZGVyLXJpZ2h0OjNweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1sZWZ0e2JvcmRlci1sZWZ0OjNweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0udGFibGV7Ym9yZGVyLXNwYWNpbmc6MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oYWxse3otaW5kZXg6NX10ZHt3aWR0aDo2MHB4O2hlaWdodDo2MHB4O2JvcmRlcjo1cHggc29saWQgIzRkNjE4YjtiYWNrZ3JvdW5kOiM3Njg2YTh9dHJ7aGVpZ2h0OjcwcHh9LmJ1dHRvbntwYWRkaW5nOjVweCA3cHh9LmNvbnRyb2xsZXItZGl2e21hcmdpbjoxZW0gYXV0bzt3aWR0aDo4MCU7cGFkZGluZzo1cHggN3B4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uY29udHJvbGxlci1kaXY+cHtmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjFlbX0uY29udHJvbGxlci1idG57YmFja2dyb3VuZDojYjhjM2Q5O2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6MWVtO2N1cnNvcjpwb2ludGVyO2JvcmRlcjpub25lO21hcmdpbjphdXRvO2hlaWdodDo1NXB4O3dpZHRoOjEzM3B4O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyBlYXNlLWluLW91dDtib3gtc2hhZG93OjAgMS40cHggMS4xcHggcmdiYSgwLDAsMCwuMDM0KSwwIDMuNHB4IDIuNnB4IHJnYmEoMCwwLDAsLjA0OCksMCA3LjdweCA1cHggcmdiYSgwLDAsMCwuMDYpLDAgMTEuMTVweCA4LjVweCByZ2JhKDAsMCwwLC4wODYpLDAgNTBweCA0MHB4IHJnYmEoMCwwLDAsLjEyKX0uY29udHJvbGxlci1idG46aG92ZXJ7dHJhbnNpdGlvbjouM3MgZWFzZS1pbi1vdXQ7YmFja2dyb3VuZDojNzM4M2E2O2JveC1zaGFkb3c6MCAyLjhweCAyLjJweCByZ2JhKDAsMCwwLC4wMzQpLDAgNi43cHggNS4zcHggcmdiYSgwLDAsMCwuMDQ4KSwwIDE1LjVweCAxMHB4IHJnYmEoMCwwLDAsLjA2KSwwIDIyLjNweCAxNy45cHggcmdiYSgwLDAsMCwuMDg2KSwwIDEwMHB4IDgwcHggcmdiYSgwLDAsMCwuMTIpfS5wbGF5ZXJ7Zm9udC1zaXplOjEuNzVlbTtsaW5lLWhlaWdodDo1NXB4O3RleHQtYWxpZ246Y2VudGVyfS5oaWdobGlnaHR7YmFja2dyb3VuZDojOGRiYjVlfS5oaWdobGlnaHQ6aG92ZXJ7YmFja2dyb3VuZDojYmRlMjk3fS5zZWxlY3RlZFdhbGx7YmFja2dyb3VuZDojYjAyZDFmfS5wbGF5ZXItdHVybntmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7cGFkZGluZzoyMHB4O21hcmdpbjowIGF1dG99LndhbGwtY291bnRlci1kaXZ7bWFyZ2luLXRvcDo1cHg7ZGlzcGxheTpmbGV4fS53YWxsLWNvdW50ZXJ7Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO21hcmdpbjphdXRvfX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0NDFweCl7dGFibGV7Zm9udC1zaXplOjFlbX0uaGlkZXtkaXNwbGF5Om5vbmV9I2JvYXJke3dpZHRoOjcyMHB4O2hlaWdodDo3MjBweDttYXJnaW4tdG9wOjNlbTttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS53YWxsLXRvcHtib3JkZXItdG9wOjVweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1ib3R0b217Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgI2ZmYjAwMDt6LWluZGV4Ojl9LndhbGwtcmlnaHR7Ym9yZGVyLXJpZ2h0OjVweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0ud2FsbC1sZWZ0e2JvcmRlci1sZWZ0OjVweCBzb2xpZCAjZmZiMDAwO3otaW5kZXg6OX0udGFibGV7Ym9yZGVyLXNwYWNpbmc6MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oYWxse3otaW5kZXg6NX10ZHt3aWR0aDo3MHB4O2hlaWdodDo3MHB4O2JvcmRlcjo1cHggc29saWQgIzRkNjE4YjtiYWNrZ3JvdW5kOiM3Njg2YTh9dHJ7aGVpZ2h0OjgwcHh9LmJ1dHRvbntwYWRkaW5nOjVweCA3cHh9LmNvbnRyb2xsZXItZGl2e21hcmdpbjowIGF1dG87d2lkdGg6ODAlO3BhZGRpbmc6NXB4IDdweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNvbnRyb2xsZXItZGl2PnB7Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxLjVlbX0uY29udHJvbGxlci1idG57YmFja2dyb3VuZDojYjhjM2Q5O2ZvbnQtZmFtaWx5OlxcXCJRdWFudGljb1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6MS41ZW07Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyOm5vbmU7bWFyZ2luOjAgYXV0bztoZWlnaHQ6NzVweDt3aWR0aDoyMDBweDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzowIDEuNHB4IDEuMXB4IHJnYmEoMCwwLDAsLjAzNCksMCAzLjRweCAyLjZweCByZ2JhKDAsMCwwLC4wNDgpLDAgNy43cHggNXB4IHJnYmEoMCwwLDAsLjA2KSwwIDExLjE1cHggOC41cHggcmdiYSgwLDAsMCwuMDg2KSwwIDUwcHggNDBweCByZ2JhKDAsMCwwLC4xMil9LmNvbnRyb2xsZXItYnRuOmhvdmVye3RyYW5zaXRpb246LjNzIGVhc2UtaW4tb3V0O2JhY2tncm91bmQ6IzczODNhNjtib3gtc2hhZG93OjAgMi44cHggMi4ycHggcmdiYSgwLDAsMCwuMDM0KSwwIDYuN3B4IDUuM3B4IHJnYmEoMCwwLDAsLjA0OCksMCAxNS41cHggMTBweCByZ2JhKDAsMCwwLC4wNiksMCAyMi4zcHggMTcuOXB4IHJnYmEoMCwwLDAsLjA4NiksMCAxMDBweCA4MHB4IHJnYmEoMCwwLDAsLjEyKX0ucGxheWVye2ZvbnQtc2l6ZTozZW07bGluZS1oZWlnaHQ6ODBweDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlnaGxpZ2h0e2JhY2tncm91bmQ6IzhkYmI1ZX0uaGlnaGxpZ2h0OmhvdmVye2JhY2tncm91bmQ6I2JkZTI5N30uc2VsZWN0ZWRXYWxse2JhY2tncm91bmQ6I2IwMmQxZn0ucGxheWVyLXR1cm57Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO2ZvbnQtc2l6ZToyZW07cGFkZGluZzoyMHB4O21hcmdpbjowIGF1dG99LndhbGwtY291bnRlci1kaXZ7bWFyZ2luLXRvcDoyZW07ZGlzcGxheTpmbGV4fS53YWxsLWNvdW50ZXJ7Zm9udC1mYW1pbHk6XFxcIlF1YW50aWNvXFxcIixzYW5zLXNlcmlmO2ZvbnQtc2l6ZToyZW07bWFyZ2luOmF1dG99fSNyZXN0YXJ0LWRpdntwb3NpdGlvbjpmaXhlZDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZvbnQtc2l6ZToyZW07cGFkZGluZzoxNXB4O21hcmdpbjoyMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7d2lkdGg6NDAwcHg7aGVpZ2h0OjIwMHB4fSNyZXN0YXJ0LWRpdiBoMXttYXJnaW46MTBweCBhdXRvfSNyZXN0YXJ0LWRpdiBidXR0b257bWFyZ2luOmF1dG87d2lkdGg6MzAlO2hlaWdodDoxNSV9LmJ1dHRvblRlc3R7d2lkdGg6MzAwcHg7aGVpZ2h0OjEwMHB4fSNyb29tRm9ybXtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjE1KTttYXJnaW46YXV0b30jZm9ybURpdnttYXJnaW46MzAlIGF1dG99I3Jvb21JbnB1dHtib3JkZXI6bm9uZTtwYWRkaW5nOjAgMXJlbTtmbGV4LWdyb3c6MTtib3JkZXItcmFkaXVzOjJyZW07bWFyZ2luOi4yNXJlbX0jcm9vbUlucHV0OmZvY3Vze291dGxpbmU6bm9uZX0jcm9vbUJ1dHRvbntiYWNrZ3JvdW5kOiMzMzM7Ym9yZGVyOm5vbmU7cGFkZGluZzowIDFyZW07bWFyZ2luOi4yNXJlbTtib3JkZXItcmFkaXVzOjNweDtvdXRsaW5lOm5vbmU7Y29sb3I6I2ZmZn0jcm9vbUJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kOmdyYXl9I2xvYmJ5LWRpdnt3aWR0aDo4MCV9I2xvYmJ5LWRpdj5oMXtiYWNrZ3JvdW5kOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXJ9I2xvYmJ5LWZvcm17YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4xNSk7cGFkZGluZzouMjVyZW07cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7ZGlzcGxheTpmbGV4O2hlaWdodDozcmVtO2JveC1zaXppbmc6Ym9yZGVyLWJveDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KX0jbG9iYnktaW5wdXR7Ym9yZGVyOm5vbmU7cGFkZGluZzowIDFyZW07ZmxleC1ncm93OjE7Ym9yZGVyLXJhZGl1czoycmVtO21hcmdpbjouMjVyZW19I2xvYmJ5LWlucHV0OmZvY3Vze291dGxpbmU6bm9uZX0jbG9iYnktZm9ybT5idXR0b257YmFja2dyb3VuZDojMzMzO2JvcmRlcjpub25lO3BhZGRpbmc6MCAxcmVtO21hcmdpbjouMjVyZW07Ym9yZGVyLXJhZGl1czozcHg7b3V0bGluZTpub25lO2NvbG9yOiNmZmZ9I2xvYmJ5LWZvcm0+YnV0dG9uOmhvdmVye2JhY2tncm91bmQ6Z3JheX0jbG9iYnktbWVzc2FnZXN7YmFja2dyb3VuZDojZmZmO2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjoxMDBweCAwO3BhZGRpbmc6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfSNsb2JieS1tZXNzYWdlcz5saXtwYWRkaW5nOi41cmVtIDFyZW19I2xvYmJ5LW1lc3NhZ2VzPmxpOm50aC1jaGlsZChvZGQpe2JhY2tncm91bmQ6I2VmZWZlZn0jbG9iYnktc3RhcnQtZ2FtZXt3aWR0aDoxMDBweDtoZWlnaHQ6NTBweH0jc3BsYXNoLWRpdntiYWNrZ3JvdW5kOiNhNmIxYzk7d2lkdGg6MjFlbTtoZWlnaHQ6MjFlbTttYXJnaW46MTVlbSBhdXRvIGF1dG8gYXV0bztkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2JveC1zaGFkb3c6MCAyLjhweCAyLjJweCByZ2JhKDAsMCwwLC4wMzQpLDAgNi43cHggNS4zcHggcmdiYSgwLDAsMCwuMDQ4KSwwIDE1LjVweCAxMHB4IHJnYmEoMCwwLDAsLjA2KSwwIDIyLjNweCAxNy45cHggcmdiYSgwLDAsMCwuMDg2KSwwIDEwMHB4IDgwcHggcmdiYSgwLDAsMCwuMTIpfS5idG57YmFja2dyb3VuZDojYjhjM2Q5O2JvcmRlcjpub25lO21hcmdpbjphdXRvO2hlaWdodDo1ZW07d2lkdGg6MTNlbTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzowIDEuNHB4IDEuMXB4IHJnYmEoMCwwLDAsLjAzNCksMCAzLjRweCAyLjZweCByZ2JhKDAsMCwwLC4wNDgpLDAgNy43cHggNXB4IHJnYmEoMCwwLDAsLjA2KSwwIDExLjE1cHggOC41cHggcmdiYSgwLDAsMCwuMDg2KSwwIDUwcHggNDBweCByZ2JhKDAsMCwwLC4xMil9LmJ0bjpob3Zlcnt0cmFuc2l0aW9uOi4zcyBlYXNlLWluLW91dDt0cmFuc2Zvcm06c2NhbGUoMS4xKTtiYWNrZ3JvdW5kOiM3MzgzYTY7Ym94LXNoYWRvdzowIDIuOHB4IDIuMnB4IHJnYmEoMCwwLDAsLjAzNCksMCA2LjdweCA1LjNweCByZ2JhKDAsMCwwLC4wNDgpLDAgMTUuNXB4IDEwcHggcmdiYSgwLDAsMCwuMDYpLDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsMCwwLC4wODYpLDAgMTAwcHggODBweCByZ2JhKDAsMCwwLC4xMil9I2Zvcm0tZGl2e2JhY2tncm91bmQ6I2E2YjFjOTt3aWR0aDoyMWVtO2hlaWdodDoyMWVtO21hcmdpbjoxNWVtIGF1dG8gYXV0byBhdXRvO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Ym94LXNoYWRvdzowIDIuOHB4IDIuMnB4IHJnYmEoMCwwLDAsLjAzNCksMCA2LjdweCA1LjNweCByZ2JhKDAsMCwwLC4wNDgpLDAgMTUuNXB4IDEwcHggcmdiYSgwLDAsMCwuMDYpLDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsMCwwLC4wODYpLDAgMTAwcHggODBweCByZ2JhKDAsMCwwLC4xMil9I3Jvb20tZm9ybXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59I3Jvb20taW5wdXR7dGV4dC1hbGlnbjpjZW50ZXI7d2lkdGg6NTAlO21hcmdpbjphdXRvO2xpbmUtaGVpZ2h0OjEuNTtmb250OjcwMCAxLjJyZW0gXFxcIlJvYm90byBTbGFiXFxcIixzYW5zLXNlcmlmO3BhZGRpbmc6MWVtIDJlbTtsZXR0ZXItc3BhY2luZzouMDVyZW19I3Jvb20tYnV0dG9ue21hcmdpbjphdXRvfSNsb2JieS1yb29tcy1saXN0LWRpdntiYWNrZ3JvdW5kOiNhNmIxYzk7d2lkdGg6MjFlbTttYXJnaW46MTVlbSBhdXRvIGF1dG8gYXV0bztkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2JveC1zaGFkb3c6MCAyLjhweCAyLjJweCByZ2JhKDAsMCwwLC4wMzQpLDAgNi43cHggNS4zcHggcmdiYSgwLDAsMCwuMDQ4KSwwIDE1LjVweCAxMHB4IHJnYmEoMCwwLDAsLjA2KSwwIDIyLjNweCAxNy45cHggcmdiYSgwLDAsMCwuMDg2KSwwIDEwMHB4IDgwcHggcmdiYSgwLDAsMCwuMTIpfSNsb2JieS1yb29tcy1saXN0LWRpdj51bD5saT5idXR0b257bWFyZ2luOjEuM2VtfS5idG57Y29sb3I6IzQwMzE3NDt0cmFuc2l0aW9uOmNvbG9yIC4yNXMgLjA4MzMzMzMzMzNzO3Bvc2l0aW9uOnJlbGF0aXZlfS5idG46OmJlZm9yZSwuYnRuOjphZnRlcntib3JkZXI6MCBzb2xpZCB0cmFuc3BhcmVudDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29udGVudDpcXFwiXFxcIjtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjA7Ym90dG9tOjA7cmlnaHQ6MH0uYnRuOjpiZWZvcmV7Ym9yZGVyLWJvdHRvbS13aWR0aDo0cHg7Ym9yZGVyLWxlZnQtd2lkdGg6NHB4fS5idG46OmFmdGVye2JvcmRlci10b3Atd2lkdGg6NHB4O2JvcmRlci1yaWdodC13aWR0aDo0cHh9LmJ0bjpob3Zlcntjb2xvcjojYjFhOWNkfS5idG46aG92ZXI6OmJlZm9yZSwuYnRuOmhvdmVyOjphZnRlcntib3JkZXItY29sb3I6I2IxYTljZDt0cmFuc2l0aW9uOmJvcmRlci1jb2xvciAwcyx3aWR0aCAuMjVzLGhlaWdodCAuMjVzO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmJ0bjpob3Zlcjo6YmVmb3Jle3RyYW5zaXRpb24tZGVsYXk6MHMsMHMsLjI1c30uYnRuOmhvdmVyOjphZnRlcnt0cmFuc2l0aW9uLWRlbGF5OjBzLC4yNXMsMHN9LmNvbnRyb2xsZXItYnRue2NvbG9yOiM0MDMxNzQ7dHJhbnNpdGlvbjpjb2xvciAuMjVzIC4wODMzMzMzMzMzcztwb3NpdGlvbjpyZWxhdGl2ZX0uY29udHJvbGxlci1idG46OmJlZm9yZSwuY29udHJvbGxlci1idG46OmFmdGVye2JvcmRlcjowIHNvbGlkIHRyYW5zcGFyZW50O2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb250ZW50OlxcXCJcXFwiO3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MDtoZWlnaHQ6MDtib3R0b206MDtyaWdodDowfS5jb250cm9sbGVyLWJ0bjo6YmVmb3Jle2JvcmRlci1ib3R0b20td2lkdGg6NHB4O2JvcmRlci1sZWZ0LXdpZHRoOjRweH0uY29udHJvbGxlci1idG46OmFmdGVye2JvcmRlci10b3Atd2lkdGg6NHB4O2JvcmRlci1yaWdodC13aWR0aDo0cHh9LmNvbnRyb2xsZXItYnRuOmhvdmVye2NvbG9yOiNiMWE5Y2R9LmNvbnRyb2xsZXItYnRuOmhvdmVyOjpiZWZvcmUsLmNvbnRyb2xsZXItYnRuOmhvdmVyOjphZnRlcntib3JkZXItY29sb3I6I2IxYTljZDt0cmFuc2l0aW9uOmJvcmRlci1jb2xvciAwcyx3aWR0aCAuMjVzLGhlaWdodCAuMjVzO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmNvbnRyb2xsZXItYnRuOmhvdmVyOjpiZWZvcmV7dHJhbnNpdGlvbi1kZWxheTowcywwcywuMjVzfS5jb250cm9sbGVyLWJ0bjpob3Zlcjo6YWZ0ZXJ7dHJhbnNpdGlvbi1kZWxheTowcywuMjVzLDBzfS5idG57Y3Vyc29yOnBvaW50ZXI7bGluZS1oZWlnaHQ6MS41O2ZvbnQ6NzAwIDEuMnJlbSBcXFwiUm9ib3RvIFNsYWJcXFwiLHNhbnMtc2VyaWY7cGFkZGluZzoxZW0gMmVtO2xldHRlci1zcGFjaW5nOi4wNXJlbX0jd2lubmVyLWRpdntiYWNrZ3JvdW5kOiNhNmIxYzk7d2lkdGg6MzB2dztoZWlnaHQ6MzB2dzttYXJnaW46YXV0bztwb3NpdGlvbjpyZWxhdGl2ZX0jd2lubmVyLW1lc3NhZ2V7Y29sb3I6IzQwMzE3NDtmb250LWZhbWlseTpcXFwiUXVhbnRpY29cXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjNlbTtmb250LXdlaWdodDpib2xkO3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTo1MCV9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBU0EsMlpBYUMsUUFBQSxDQUNBLFNBQUEsQ0FDQSxRQUFBLENBQ0EsY0FBQSxDQUNBLFlBQUEsQ0FDQSx1QkFBQSxDQUdELDhFQUVDLGFBQUEsQ0FJRCxLQUNDLGtCQUFBLENBR0QsS0FDQyxhQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxZQUFBLENBQ0Esc0JBQUEsQ0FFRCxNQUNDLGVBQUEsQ0FFRCxhQUNDLFdBQUEsQ0FFRCxvREFFQyxVQUFBLENBQ0EsWUFBQSxDQU9ELDBDQUNDLE1BQ0MsYUFBQSxDQUdELE1BQ0MsWUFBQSxDQUdELE9BQ0MsU0FBQSxDQUNBLGdCQUFBLENBQ0EsY0FBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FHRCxVQUNDLDRCQUFBLENBQ0EsU0FBQSxDQUdELGFBQ0MsK0JBQUEsQ0FDQSxTQUFBLENBR0QsWUFDQyw4QkFBQSxDQUNBLFNBQUEsQ0FHRCxXQUNDLDZCQUFBLENBQ0EsU0FBQSxDQUdELE9BQ0MsV0FBQSxDQUNBLGdCQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBRUQsTUFHQyxTQUFBLENBR0QsR0FDQyxVQUFBLENBQ0EsV0FBQSxDQUNBLHdCQUFBLENBQ0Esa0JBQUEsQ0FFRCxHQUNDLFdBQUEsQ0FHRCxRQUVDLGVBQUEsQ0FFRCxnQkFDQyxlQUFBLENBQ0EsU0FBQSxDQUNBLGVBQUEsQ0FDQSxZQUFBLENBQ0EsNkJBQUEsQ0FJRCxnQkFDQyxrQkFBQSxDQUNBLGlDQUFBLENBRUEsY0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxvQ0FBQSxDQUNBLGlLQUNDLENBT0Ysc0JBQ0MsMEJBQUEsQ0FDQSxrQkFBQSxDQUNBLG9LQUNDLENBT0YsUUFDQyxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUdELFdBQ0Msa0JBQUEsQ0FFRCxpQkFDQyxrQkFBQSxDQUdELGNBQ0Msa0JBQUEsQ0FHRCxhQUNDLGlDQUFBLENBQ0EsWUFBQSxDQUNBLGlCQUFBLENBR0Qsa0JBQ0MsZUFBQSxDQUNBLFlBQUEsQ0FFRCxjQUNDLGlDQUFBLENBQ0EsYUFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBQUEsQ0FNRixnRUFDQyxNQUNDLGFBQUEsQ0FHRCxNQUNDLFlBQUEsQ0FHRCxPQUNDLFNBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBR0QsVUFDQyw0QkFBQSxDQUNBLFNBQUEsQ0FHRCxhQUNDLCtCQUFBLENBQ0EsU0FBQSxDQUdELFlBQ0MsOEJBQUEsQ0FDQSxTQUFBLENBR0QsV0FDQyw2QkFBQSxDQUNBLFNBQUEsQ0FHRCxPQUNDLFdBQUEsQ0FDQSxnQkFBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUVELE1BR0MsU0FBQSxDQVFELEdBQ0MsVUFBQSxDQUNBLFdBQUEsQ0FDQSx3QkFBQSxDQUNBLGtCQUFBLENBRUQsR0FDQyxXQUFBLENBR0QsUUFFQyxlQUFBLENBRUQsZ0JBQ0MsZUFBQSxDQUNBLFNBQUEsQ0FDQSxlQUFBLENBQ0EsWUFBQSxDQUNBLDZCQUFBLENBSUQsZ0JBQ0Msa0JBQUEsQ0FDQSxpQ0FBQSxDQUVBLGNBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0Esb0NBQUEsQ0FDQSxpS0FDQyxDQU9GLHNCQUNDLDBCQUFBLENBQ0Esa0JBQUEsQ0FDQSxvS0FDQyxDQU9GLFFBQ0MsZUFBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FHRCxXQUNDLGtCQUFBLENBRUQsaUJBQ0Msa0JBQUEsQ0FHRCxjQUNDLGtCQUFBLENBR0QsYUFDQyxpQ0FBQSxDQUNBLFlBQUEsQ0FDQSxpQkFBQSxDQUdELGtCQUNDLGVBQUEsQ0FDQSxZQUFBLENBRUQsY0FDQyxpQ0FBQSxDQUNBLGFBQUEsQ0FDQSxjQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUFBLENBTUYsZ0VBQ0MsTUFDQyxhQUFBLENBSUQsTUFDQyxZQUFBLENBR0QsT0FDQyxXQUFBLENBQ0EsZ0JBQUEsQ0FDQSxjQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUdELFVBQ0MsNEJBQUEsQ0FDQSxTQUFBLENBR0QsYUFDQywrQkFBQSxDQUNBLFNBQUEsQ0FHRCxZQUNDLDhCQUFBLENBQ0EsU0FBQSxDQUdELFdBQ0MsNkJBQUEsQ0FDQSxTQUFBLENBR0QsT0FDQyxXQUFBLENBQ0EsZ0JBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FFRCxNQUdDLFNBQUEsQ0FHRCxHQUNDLFVBQUEsQ0FDQSxXQUFBLENBQ0Esd0JBQUEsQ0FDQSxrQkFBQSxDQUVELEdBQ0MsV0FBQSxDQUdELFFBRUMsZUFBQSxDQUVELGdCQUNDLGVBQUEsQ0FDQSxTQUFBLENBQ0EsZUFBQSxDQUNBLFlBQUEsQ0FDQSw2QkFBQSxDQUlELGdCQUNDLGtCQUFBLENBQ0EsaUNBQUEsQ0FFQSxjQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLG9DQUFBLENBQ0EsaUtBQ0MsQ0FPRixzQkFDQywwQkFBQSxDQUNBLGtCQUFBLENBQ0Esb0tBQ0MsQ0FPRixRQUNDLGVBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBR0QsV0FDQyxrQkFBQSxDQUVELGlCQUNDLGtCQUFBLENBR0QsY0FDQyxrQkFBQSxDQUdELGFBQ0MsaUNBQUEsQ0FDQSxZQUFBLENBQ0EsaUJBQUEsQ0FHRCxrQkFDQyxlQUFBLENBQ0EsWUFBQSxDQUVELGNBQ0MsaUNBQUEsQ0FDQSxnQkFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBQUEsQ0FNRixnRUFFQyxNQUNDLGFBQUEsQ0FHRCxNQUNDLFlBQUEsQ0FHRCxPQUNDLFdBQUEsQ0FDQSxZQUFBLENBQ0EsY0FBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FHRCxVQUNDLDRCQUFBLENBQ0EsU0FBQSxDQUdELGFBQ0MsK0JBQUEsQ0FDQSxTQUFBLENBR0QsWUFDQyw4QkFBQSxDQUNBLFNBQUEsQ0FHRCxXQUNDLDZCQUFBLENBQ0EsU0FBQSxDQUdELE9BQ0MsZ0JBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FHRCxNQUNDLFNBQUEsQ0FHRCxHQUNDLFVBQUEsQ0FDQSxXQUFBLENBQ0Esd0JBQUEsQ0FDQSxrQkFBQSxDQUVELEdBQ0MsV0FBQSxDQUdELFFBQ0MsZUFBQSxDQUdELGdCQUNDLGVBQUEsQ0FDQSxTQUFBLENBQ0EsZUFBQSxDQUNBLFlBQUEsQ0FDQSw2QkFBQSxDQUVELGdCQUNDLGtCQUFBLENBQ0EsaUNBQUEsQ0FDQSxjQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLG9DQUFBLENBQ0EsaUtBQ0MsQ0FNRixzQkFDQywwQkFBQSxDQUNBLGtCQUFBLENBQ0Esb0tBQ0MsQ0FPRixRQUNDLGdCQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUdELFdBQ0Msa0JBQUEsQ0FFRCxpQkFDQyxrQkFBQSxDQUVELGNBQ0Msa0JBQUEsQ0FHRCxhQUNDLGlDQUFBLENBQ0EsWUFBQSxDQUNBLGFBQUEsQ0FHRCxrQkFDQyxlQUFBLENBQ0EsWUFBQSxDQUVELGNBQ0MsaUNBQUEsQ0FDQSxXQUFBLENBQUEsQ0FLRixpRUFFQyxNQUNDLGFBQUEsQ0FHRCxNQUNDLFlBQUEsQ0FHRCxPQUNDLFdBQUEsQ0FDQSxZQUFBLENBQ0EsY0FBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FHRCxVQUNDLDRCQUFBLENBQ0EsU0FBQSxDQUdELGFBQ0MsK0JBQUEsQ0FDQSxTQUFBLENBR0QsWUFDQyw4QkFBQSxDQUNBLFNBQUEsQ0FHRCxXQUNDLDZCQUFBLENBQ0EsU0FBQSxDQUdELE9BQ0MsZ0JBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FHRCxNQUNDLFNBQUEsQ0FHRCxHQUNDLFVBQUEsQ0FDQSxXQUFBLENBQ0Esd0JBQUEsQ0FDQSxrQkFBQSxDQUVELEdBQ0MsV0FBQSxDQUdELFFBQ0MsZUFBQSxDQUdELGdCQUNDLGVBQUEsQ0FDQSxTQUFBLENBQ0EsZUFBQSxDQUNBLFlBQUEsQ0FDQSw2QkFBQSxDQUVELGdCQUNDLGtCQUFBLENBQ0EsaUNBQUEsQ0FDQSxhQUFBLENBQ0EsY0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxvQ0FBQSxDQUNBLGlLQUNDLENBTUYsc0JBQ0MsMEJBQUEsQ0FDQSxrQkFBQSxDQUNBLG9LQUNDLENBT0YsUUFDQyxnQkFBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FHRCxXQUNDLGtCQUFBLENBRUQsaUJBQ0Msa0JBQUEsQ0FFRCxjQUNDLGtCQUFBLENBR0QsYUFDQyxpQ0FBQSxDQUNBLFlBQUEsQ0FDQSxhQUFBLENBR0Qsa0JBQ0MsY0FBQSxDQUNBLFlBQUEsQ0FFRCxjQUNDLGlDQUFBLENBQ0EsV0FBQSxDQUFBLENBS0Ysa0VBRUMsTUFDQyxhQUFBLENBR0QsTUFDQyxZQUFBLENBR0QsT0FDQyxXQUFBLENBQ0EsWUFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBR0QsVUFDQyw0QkFBQSxDQUNBLFNBQUEsQ0FHRCxhQUNDLCtCQUFBLENBQ0EsU0FBQSxDQUdELFlBQ0MsOEJBQUEsQ0FDQSxTQUFBLENBR0QsV0FDQyw2QkFBQSxDQUNBLFNBQUEsQ0FHRCxPQUNDLGdCQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBR0QsTUFDQyxTQUFBLENBR0QsR0FDQyxVQUFBLENBQ0EsV0FBQSxDQUNBLHdCQUFBLENBQ0Esa0JBQUEsQ0FFRCxHQUNDLFdBQUEsQ0FHRCxRQUNDLGVBQUEsQ0FHRCxnQkFDQyxlQUFBLENBQ0EsU0FBQSxDQUNBLGVBQUEsQ0FDQSxZQUFBLENBQ0EsNkJBQUEsQ0FFRCxrQkFDQyxpQ0FBQSxDQUNBLGFBQUEsQ0FFRCxnQkFDQyxrQkFBQSxDQUNBLGlDQUFBLENBQ0EsYUFBQSxDQUNBLGNBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0Esb0NBQUEsQ0FDQSxpS0FDQyxDQU1GLHNCQUNDLDBCQUFBLENBQ0Esa0JBQUEsQ0FDQSxvS0FDQyxDQU9GLFFBQ0MsZ0JBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBR0QsV0FDQyxrQkFBQSxDQUVELGlCQUNDLGtCQUFBLENBRUQsY0FDQyxrQkFBQSxDQUdELGFBQ0MsaUNBQUEsQ0FDQSxZQUFBLENBQ0EsYUFBQSxDQUdELGtCQUNDLGNBQUEsQ0FDQSxZQUFBLENBRUQsY0FDQyxpQ0FBQSxDQUNBLFdBQUEsQ0FBQSxDQUtGLDJDQUVDLE1BQ0MsYUFBQSxDQUdELE1BQ0MsWUFBQSxDQUdELE9BQ0MsV0FBQSxDQUNBLFlBQUEsQ0FDQSxjQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUdELFVBQ0MsNEJBQUEsQ0FDQSxTQUFBLENBR0QsYUFDQywrQkFBQSxDQUNBLFNBQUEsQ0FHRCxZQUNDLDhCQUFBLENBQ0EsU0FBQSxDQUdELFdBQ0MsNkJBQUEsQ0FDQSxTQUFBLENBR0QsT0FDQyxnQkFBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUdELE1BQ0MsU0FBQSxDQUdELEdBQ0MsVUFBQSxDQUNBLFdBQUEsQ0FDQSx3QkFBQSxDQUNBLGtCQUFBLENBRUQsR0FDQyxXQUFBLENBR0QsUUFDQyxlQUFBLENBR0QsZ0JBQ0MsYUFBQSxDQUNBLFNBQUEsQ0FDQSxlQUFBLENBQ0EsWUFBQSxDQUNBLDZCQUFBLENBRUQsa0JBQ0MsaUNBQUEsQ0FDQSxlQUFBLENBRUQsZ0JBQ0Msa0JBQUEsQ0FDQSxpQ0FBQSxDQUNBLGVBQUEsQ0FDQSxjQUFBLENBQ0EsV0FBQSxDQUNBLGFBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLG9DQUFBLENBQ0EsaUtBQ0MsQ0FNRixzQkFDQywwQkFBQSxDQUNBLGtCQUFBLENBQ0Esb0tBQ0MsQ0FPRixRQUNDLGFBQUEsQ0FDQSxnQkFBQSxDQUNBLGlCQUFBLENBR0QsV0FDQyxrQkFBQSxDQUVELGlCQUNDLGtCQUFBLENBRUQsY0FDQyxrQkFBQSxDQUdELGFBQ0MsaUNBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQUNBLGFBQUEsQ0FHRCxrQkFDQyxjQUFBLENBQ0EsWUFBQSxDQUVELGNBQ0MsaUNBQUEsQ0FDQSxhQUFBLENBQ0EsV0FBQSxDQUFBLENBS0YsYUFDQyxjQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0EsYUFBQSxDQUNBLFlBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUdELGdCQUNDLGdCQUFBLENBR0Qsb0JBQ0MsV0FBQSxDQUNBLFNBQUEsQ0FDQSxVQUFBLENBR0QsWUFDQyxXQUFBLENBQ0EsWUFBQSxDQUdELFVBQ0MsMEJBQUEsQ0FDQSxXQUFBLENBR0QsU0FDQyxlQUFBLENBR0QsV0FDQyxXQUFBLENBQ0EsY0FBQSxDQUNBLFdBQUEsQ0FDQSxrQkFBQSxDQUNBLGFBQUEsQ0FHRCxpQkFDQyxZQUFBLENBR0QsWUFDQyxlQUFBLENBQ0EsV0FBQSxDQUNBLGNBQUEsQ0FDQSxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0EsVUFBQSxDQUVELGtCQUNDLGVBQUEsQ0FHRCxXQUVDLFNBQUEsQ0FFRCxjQUNDLGVBQUEsQ0FDQSxpQkFBQSxDQUVELFlBQ0MsMEJBQUEsQ0FDQSxjQUFBLENBQ0EsY0FBQSxDQUNBLFFBQUEsQ0FDQSxNQUFBLENBQ0EsT0FBQSxDQUNBLFlBQUEsQ0FDQSxXQUFBLENBQ0EscUJBQUEsQ0FDQSwwQkFBQSxDQUVELGFBQ0MsV0FBQSxDQUNBLGNBQUEsQ0FDQSxXQUFBLENBQ0Esa0JBQUEsQ0FDQSxhQUFBLENBRUQsbUJBQUEsWUFBQSxDQUNBLG1CQUNDLGVBQUEsQ0FDQSxXQUFBLENBQ0EsY0FBQSxDQUNBLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxVQUFBLENBRUQseUJBQ0MsZUFBQSxDQUdELGdCQUNDLGVBQUEsQ0FDQSxvQkFBQSxDQUNBLGNBQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FFRCxtQkFBQSxrQkFBQSxDQUNBLGtDQUFBLGtCQUFBLENBQ0Esa0JBQ0MsV0FBQSxDQUNBLFdBQUEsQ0FJRCxZQUNDLGtCQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSwwQkFBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLG9LQUNDLENBT0YsS0FDQyxrQkFBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsVUFBQSxDQUNBLFVBQUEsQ0FDQSxvQ0FBQSxDQUNBLGlLQUNDLENBT0YsV0FDQywwQkFBQSxDQUNBLG9CQUFBLENBQ0Esa0JBQUEsQ0FDQSxvS0FDQyxDQVFGLFVBQ0Msa0JBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLDBCQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0Esb0tBQ0MsQ0FPRixXQUNDLFVBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBR0QsWUFDQyxpQkFBQSxDQUNBLFNBQUEsQ0FDQSxXQUFBLENBQ0EsZUFBQSxDQUNFLHdDQUFBLENBQ0EsZUFBQSxDQUNBLHFCQUFBLENBR0gsYUFDRSxXQUFBLENBSUYsc0JBQ0Msa0JBQUEsQ0FDQSxVQUFBLENBQ0EsMEJBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0Esb0tBQ0MsQ0FRRixtQ0FDQyxZQUFBLENBeURELEtBaERFLGFBaUQ0QixDQWhENUIsa0NBQUEsQ0FDQSxpQkFBQSxDQUVBLHlCQUVFLDBCQUFBLENBQ0EscUJBQUEsQ0FDQSxVQUFBLENBQ0EsbUJBQUEsQ0FDQSxpQkFBQSxDQUNBLE9BQUEsQ0FBQSxRQUFBLENBRUEsUUFBQSxDQUNBLE9BQUEsQ0FHRixhQUdFLHVCQTZCNEMsQ0E1QjVDLHFCQTRCNEMsQ0F6QjlDLFlBR0Usb0JBc0I0QyxDQXJCNUMsc0JBcUI0QyxDQWxCOUMsV0FDRSxhQWlCbUMsQ0FmbkMscUNBRUUsb0JBYWlDLENBWmpDLGlEQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FHRixtQkFBQSwyQkFBQSxDQUVBLGtCQUFBLDJCQUFBLENBT0osZ0JBbkRFLGFBb0Q0QixDQW5ENUIsa0NBQUEsQ0FDQSxpQkFBQSxDQUVBLCtDQUVFLDBCQUFBLENBQ0EscUJBQUEsQ0FDQSxVQUFBLENBQ0EsbUJBQUEsQ0FDQSxpQkFBQSxDQUNBLE9BQUEsQ0FBQSxRQUFBLENBRUEsUUFBQSxDQUNBLE9BQUEsQ0FHRix3QkFHRSx1QkFnQzRDLENBL0I1QyxxQkErQjRDLENBNUI5Qyx1QkFHRSxvQkF5QjRDLENBeEI1QyxzQkF3QjRDLENBckI5QyxzQkFDRSxhQW9CbUMsQ0FsQm5DLDJEQUVFLG9CQWdCaUMsQ0FmakMsaURBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUdGLDhCQUFBLDJCQUFBLENBRUEsNkJBQUEsMkJBQUEsQ0FZSixLQUVFLGNBQUEsQ0FDQSxlQUFBLENBQ0Esd0NBQUEsQ0FDQSxlQUFBLENBQ0EscUJBQUEsQ0FLRixZQUNDLGtCQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FFRCxnQkFDQyxhQUFBLENBQ0EsaUNBQUEsQ0FDQSxhQUFBLENBQ0EsZ0JBQUEsQ0FDQSxpQkFBQSxDQUNBLGlCQUFBLENBQ0EsVUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXHJcXG5cXHJcXG4vKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0LyBcXHJcXG4gICB2Mi4wIHwgMjAxMTAxMjZcXHJcXG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxcclxcbiovXFxyXFxuXFxyXFxuQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9UXVhbnRpY286d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCcpO1xcclxcblxcclxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxyXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcclxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXHJcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcclxcbmIsIHUsIGksIGNlbnRlcixcXHJcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcclxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcclxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcclxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXHJcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcclxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcclxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdHBhZGRpbmc6IDA7XFxyXFxuXFx0Ym9yZGVyOiAwO1xcclxcblxcdGZvbnQtc2l6ZTogMTAwJTtcXHJcXG5cXHRmb250OiBpbmhlcml0O1xcclxcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXHJcXG59XFxyXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcclxcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcclxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcblxcclxcblxcclxcbmh0bWwge1xcclxcblxcdGJhY2tncm91bmQ6ICM0RDYxOEI7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxO1xcclxcblxcdHdpZHRoOiAxMDB2dztcXHJcXG5cXHRoZWlnaHQ6IDEwMHZoO1xcclxcblxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcbm9sLCB1bCB7XFxyXFxuXFx0bGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuYmxvY2txdW90ZSwgcSB7XFxyXFxuXFx0cXVvdGVzOiBub25lO1xcclxcbn1cXHJcXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXHJcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxyXFxuXFx0Y29udGVudDogJyc7XFxyXFxuXFx0Y29udGVudDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLypcXHJcXG5cXHRtZWRpYSBxdWVyaWVzXFxyXFxuKi9cXHJcXG4vKiBzbWFsbCBwaG9uZSAqL1xcclxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIxcHgpIHtcXHJcXG5cXHR0YWJsZSB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxZW07XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5oaWRlIHtcXHJcXG5cXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQjYm9hcmQge1xcclxcblxcdFxcdHdpZHRoOiA5NSU7XFxyXFxuXFx0XFx0bWluLWhlaWdodDogMzA0cHg7XFxyXFxuXFx0XFx0bWFyZ2luLXRvcDogMmVtO1xcclxcblxcdFxcdG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcblxcdFxcdG1hcmdpbi1yaWdodDogYXV0bztcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LndhbGwtdG9wIHtcXHJcXG5cXHRcXHRib3JkZXItdG9wOiAycHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1ib3R0b20ge1xcclxcblxcdFxcdGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLXJpZ2h0IHtcXHJcXG5cXHRcXHRib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWxlZnQge1xcclxcblxcdFxcdGJvcmRlci1sZWZ0OiAycHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQudGFibGUgeyBcXHJcXG5cXHRcXHR3aWR0aDogMTAwdnc7XFxyXFxuXFx0XFx0Ym9yZGVyLXNwYWNpbmc6IDA7IFxcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0XFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHR9XFxyXFxuXFx0LmhhbGwgeyBcXHJcXG5cXHRcXHQvKiBib3JkZXI6IDVweCBzb2xpZCAjM0E2MzhFOyAgKi9cXHJcXG5cXHRcXHQvKiB3aWR0aDogNGVtOyBoZWlnaHQ6IDRlbTsgICovXFxyXFxuXFx0XFx0ei1pbmRleDogNTtcXHJcXG5cXHR9XFx0XFxyXFxuXFx0XFxyXFxuXFx0dGQge1xcclxcblxcdFxcdHdpZHRoOiAzM3B4O1xcclxcblxcdFxcdGhlaWdodDogMzNweDtcXHJcXG5cXHRcXHRib3JkZXI6IDJweCBzb2xpZCAjNEQ2MThCO1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM3Njg2QTg7IFxcclxcblxcdH1cXHJcXG5cXHR0ciB7XFxyXFxuXFx0XFx0aGVpZ2h0OiAzM3B4O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuYnV0dG9uIHtcXHJcXG5cXHRcXHQvKiBtYXJnaW46IDIwcHggYXV0bzsgKi9cXHJcXG5cXHRcXHRwYWRkaW5nOiA1cHggN3B4O1xcclxcblxcdH1cXHJcXG5cXHQuY29udHJvbGxlci1kaXYge1xcclxcblxcdFxcdG1hcmdpbjogMWVtIGF1dG87XFxyXFxuXFx0XFx0d2lkdGg6IDgwJTtcXHJcXG5cXHRcXHRwYWRkaW5nOiA1cHggN3B4O1xcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0XFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG5cXHQuY29udHJvbGxlci1idG4ge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCOEMzRDk7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0Ly8gbGV0dGVyLXNwYWNpbmc6IDAuMDVyZW07XFxyXFxuXFx0XFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdFxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHRcXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0XFx0aGVpZ2h0OiA0NXB4O1xcclxcblxcdFxcdHdpZHRoOiAxMDBweDtcXHJcXG5cXHRcXHR0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzIGVhc2UtaW4tb3V0O1xcclxcblxcdFxcdGJveC1zaGFkb3c6IFxcclxcblxcdFxcdFxcdDAgMS40cHggMS4xcHggcmdiYSgwLCAwLCAwLCAwLjAzNCksXFxyXFxuXFx0XFx0XFx0MCAzLjRweCAyLjZweCByZ2JhKDAsIDAsIDAsIDAuMDQ4KSxcXHJcXG5cXHRcXHRcXHQwIDcuN3B4IDVweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdFxcdDAgMTEuMTVweCA4LjVweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHRcXHQwIDUwcHggNDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQuY29udHJvbGxlci1idG46aG92ZXIge1xcclxcblxcdFxcdHRyYW5zaXRpb246IC4zcyBlYXNlLWluLW91dDtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjNzM4M0E2O1xcclxcblxcdFxcdGJveC1zaGFkb3c6IFxcclxcblxcdFxcdFxcdDAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAzNCksXFxyXFxuXFx0XFx0XFx0MCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDQ4KSxcXHJcXG5cXHRcXHRcXHQwIDE1LjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0XFx0MCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdFxcdDAgMTAwcHggODBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcclxcblxcdH1cXHRcXHJcXG5cXHRcXHJcXG5cXHQucGxheWVyIHtcXHJcXG5cXHRcXHRmb250LXNpemU6IDEuM2VtO1xcclxcblxcdFxcdGxpbmUtaGVpZ2h0OiAzNnB4O1xcclxcblxcdFxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmhpZ2hsaWdodCB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzhEQkI1RTtcXHJcXG5cXHR9XFxyXFxuXFx0LmhpZ2hsaWdodDpob3ZlcntcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQkRFMjk3O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuc2VsZWN0ZWRXYWxsIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjAyRDFGO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQucGxheWVyLXR1cm4ge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdHBhZGRpbmc6IDEwcHg7XFxyXFxuXFx0XFx0dGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1jb3VudGVyLWRpdiB7XFxyXFxuXFx0XFx0bWFyZ2luOiAyZW0gYXV0bztcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdH1cXHJcXG5cXHQud2FsbC1jb3VudGVyIHtcXHJcXG5cXHRcXHRmb250LWZhbWlseTogJ1F1YW50aWNvJywgc2Fucy1zZXJpZjtcXHJcXG5cXHRcXHRmb250LXNpemU6IDFlbTtcXHJcXG5cXHRcXHRtYXgtd2lkdGg6IDc1cHg7XFxyXFxuXFx0XFx0bWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxuXFx0XFx0bWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG59XFxyXFxuXFxyXFxuLyogbWVkaXVtIHBob25lICovXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNzZweCkgYW5kIChtaW4td2lkdGg6IDMyMnB4KSB7XFxyXFxuXFx0dGFibGUge1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMWVtO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuaGlkZSB7XFxyXFxuXFx0XFx0ZGlzcGxheTogbm9uZTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0I2JvYXJkIHtcXHJcXG5cXHRcXHR3aWR0aDogOTUlO1xcclxcblxcdFxcdG1heC1oZWlnaHQ6IDMzNjBweDtcXHJcXG5cXHRcXHRtYXJnaW4tdG9wOiAyZW07XFxyXFxuXFx0XFx0bWFyZ2luLWxlZnQ6IGF1dG87XFxyXFxuXFx0XFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQud2FsbC10b3Age1xcclxcblxcdFxcdGJvcmRlci10b3A6IDJweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWJvdHRvbSB7XFxyXFxuXFx0XFx0Ym9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtcmlnaHQge1xcclxcblxcdFxcdGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtbGVmdCB7XFxyXFxuXFx0XFx0Ym9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC50YWJsZSB7IFxcclxcblxcdFxcdHdpZHRoOiAxMDB2dztcXHJcXG5cXHRcXHRib3JkZXItc3BhY2luZzogMDsgXFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcdH1cXHJcXG5cXHQuaGFsbCB7IFxcclxcblxcdFxcdC8qIGJvcmRlcjogNXB4IHNvbGlkICMzQTYzOEU7ICAqL1xcclxcblxcdFxcdC8qIHdpZHRoOiA0ZW07IGhlaWdodDogNGVtOyAgKi9cXHJcXG5cXHRcXHR6LWluZGV4OiA1O1xcclxcblxcdH1cXHJcXG5cXHQudGFibGUgLmZsb29yIHsgXFxyXFxuXFx0XFx0LyogYmFja2dyb3VuZDogYnJvd247ICAqL1xcclxcblxcdFxcdC8vIG1hcmdpbjogMXB4O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHRcXHJcXG5cXHR0ZCB7XFxyXFxuXFx0XFx0d2lkdGg6IDM2cHg7XFxyXFxuXFx0XFx0aGVpZ2h0OiAzNnB4O1xcclxcblxcdFxcdGJvcmRlcjogMnB4IHNvbGlkICM0RDYxOEI7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzc2ODZBODsgXFxyXFxuXFx0fVxcclxcblxcdHRyIHtcXHJcXG5cXHRcXHRoZWlnaHQ6IDQzcHg7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5idXR0b24ge1xcclxcblxcdFxcdC8qIG1hcmdpbjogMjBweCBhdXRvOyAqL1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0fVxcclxcblxcdC5jb250cm9sbGVyLWRpdiB7XFxyXFxuXFx0XFx0bWFyZ2luOiAxZW0gYXV0bztcXHJcXG5cXHRcXHR3aWR0aDogODAlO1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcblxcdC5jb250cm9sbGVyLWJ0biB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0I4QzNEOTtcXHJcXG5cXHRcXHRmb250LWZhbWlseTogJ1F1YW50aWNvJywgc2Fucy1zZXJpZjtcXHJcXG5cXHRcXHQvLyBsZXR0ZXItc3BhY2luZzogMC4wNXJlbTtcXHJcXG5cXHRcXHRjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFx0XFx0Ym9yZGVyOiBub25lO1xcclxcblxcdFxcdG1hcmdpbjogYXV0bztcXHJcXG5cXHRcXHRoZWlnaHQ6IDQ1cHg7XFxyXFxuXFx0XFx0d2lkdGg6IDEwMHB4O1xcclxcblxcdFxcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAxLjRweCAxLjFweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDMuNHB4IDIuNnB4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgNy43cHggNXB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0XFx0MCAxMS4xNXB4IDguNXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdFxcdDAgNTBweCA0MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdC5jb250cm9sbGVyLWJ0bjpob3ZlciB7XFxyXFxuXFx0XFx0dHJhbnNpdGlvbjogLjNzIGVhc2UtaW4tb3V0O1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM3MzgzQTY7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgMTUuNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHRcXHQwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0XFx0MCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcdFxcclxcblxcdFxcclxcblxcdC5wbGF5ZXIge1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMS43ZW07XFxyXFxuXFx0XFx0bGluZS1oZWlnaHQ6IDM2cHg7XFxyXFxuXFx0XFx0dGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuaGlnaGxpZ2h0IHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjOERCQjVFO1xcclxcblxcdH1cXHJcXG5cXHQuaGlnaGxpZ2h0OmhvdmVye1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCREUyOTc7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5zZWxlY3RlZFdhbGwge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCMDJEMUY7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5wbGF5ZXItdHVybiB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0cGFkZGluZzogMTBweDtcXHJcXG5cXHRcXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWNvdW50ZXItZGl2IHtcXHJcXG5cXHRcXHRtYXJnaW46IDJlbSBhdXRvO1xcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0fVxcclxcblxcdC53YWxsLWNvdW50ZXIge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMWVtO1xcclxcblxcdFxcdG1heC13aWR0aDogNzVweDtcXHJcXG5cXHRcXHRtYXJnaW4tbGVmdDogMjBweDtcXHJcXG5cXHRcXHRtYXJnaW4tcmlnaHQ6IDIwcHg7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcbn1cXHJcXG5cXHJcXG4vKiBsYXJnZSBwaG9uZSAqL1xcclxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIGFuZCAobWluLXdpZHRoOiAzNzdweCkge1xcclxcblxcdHRhYmxlIHtcXHJcXG5cXHRcXHRmb250LXNpemU6IDFlbTtcXHJcXG5cXHRcXHRcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmhpZGUge1xcclxcblxcdFxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdCNib2FyZCB7XFxyXFxuXFx0XFx0d2lkdGg6IDM4N3B4O1xcclxcblxcdFxcdG1heC1oZWlnaHQ6IDM4N3B4O1xcclxcblxcdFxcdG1hcmdpbi10b3A6IDJlbTtcXHJcXG5cXHRcXHRtYXJnaW4tbGVmdDogYXV0bztcXHJcXG5cXHRcXHRtYXJnaW4tcmlnaHQ6IGF1dG87XFxyXFxuXFx0fVxcclxcblxcclxcblxcdC53YWxsLXRvcCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXRvcDogMnB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtYm90dG9tIHtcXHJcXG5cXHRcXHRib3JkZXItYm90dG9tOiAycHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1yaWdodCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXJpZ2h0OiAycHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1sZWZ0IHtcXHJcXG5cXHRcXHRib3JkZXItbGVmdDogMnB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnRhYmxlIHsgXFxyXFxuXFx0XFx0d2lkdGg6IDEwMHZ3O1xcclxcblxcdFxcdGJvcmRlci1zcGFjaW5nOiAwOyBcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFx0fVxcclxcblxcdC5oYWxsIHsgXFxyXFxuXFx0XFx0LyogYm9yZGVyOiA1cHggc29saWQgIzNBNjM4RTsgICovXFxyXFxuXFx0XFx0Lyogd2lkdGg6IDRlbTsgaGVpZ2h0OiA0ZW07ICAqL1xcclxcblxcdFxcdHotaW5kZXg6IDU7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdHRkIHtcXHJcXG5cXHRcXHR3aWR0aDogMzlweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDM5cHg7XFxyXFxuXFx0XFx0Ym9yZGVyOiAycHggc29saWQgIzRENjE4QjtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjNzY4NkE4OyBcXHJcXG5cXHR9XFxyXFxuXFx0dHIge1xcclxcblxcdFxcdGhlaWdodDogNDNweDtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmJ1dHRvbiB7XFxyXFxuXFx0XFx0LyogbWFyZ2luOiAyMHB4IGF1dG87ICovXFxyXFxuXFx0XFx0cGFkZGluZzogNXB4IDdweDtcXHJcXG5cXHR9XFxyXFxuXFx0LmNvbnRyb2xsZXItZGl2IHtcXHJcXG5cXHRcXHRtYXJnaW46IDFlbSBhdXRvO1xcclxcblxcdFxcdHdpZHRoOiA4MCU7XFxyXFxuXFx0XFx0cGFkZGluZzogNXB4IDdweDtcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuXFx0LmNvbnRyb2xsZXItYnRuIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjhDM0Q5O1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdC8vIGxldHRlci1zcGFjaW5nOiAwLjA1cmVtO1xcclxcblxcdFxcdGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHRcXHRib3JkZXI6IG5vbmU7XFxyXFxuXFx0XFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdFxcdGhlaWdodDogNDVweDtcXHJcXG5cXHRcXHR3aWR0aDogMTAwcHg7XFxyXFxuXFx0XFx0dHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zcyBlYXNlLWluLW91dDtcXHJcXG5cXHRcXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHRcXHQwIDEuNHB4IDEuMXB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdFxcdDAgMy40cHggMi42cHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0XFx0MCA3LjdweCA1cHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHRcXHQwIDExLjE1cHggOC41cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0XFx0MCA1MHB4IDQwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LmNvbnRyb2xsZXItYnRuOmhvdmVyIHtcXHJcXG5cXHRcXHR0cmFuc2l0aW9uOiAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzczODNBNjtcXHJcXG5cXHRcXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHRcXHQwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdFxcdDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0XFx0MCAxNS41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdFxcdDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHRcXHQwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnBsYXllciB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxLjdlbTtcXHJcXG5cXHRcXHRsaW5lLWhlaWdodDogNDNweDtcXHJcXG5cXHRcXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5oaWdobGlnaHQge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM4REJCNUU7XFxyXFxuXFx0fVxcclxcblxcdC5oaWdobGlnaHQ6aG92ZXJ7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0JERTI5NztcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnNlbGVjdGVkV2FsbCB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0IwMkQxRjtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnBsYXllci10dXJuIHtcXHJcXG5cXHRcXHRmb250LWZhbWlseTogJ1F1YW50aWNvJywgc2Fucy1zZXJpZjtcXHJcXG5cXHRcXHRwYWRkaW5nOiAxM3B4O1xcclxcblxcdFxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtY291bnRlci1kaXYge1xcclxcblxcdFxcdG1hcmdpbjogMmVtIGF1dG87XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHR9XFxyXFxuXFx0LndhbGwtY291bnRlciB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxLjI1ZW07XFxyXFxuXFx0XFx0bWF4LXdpZHRoOiA4MHB4O1xcclxcblxcdFxcdG1hcmdpbi1sZWZ0OiAyMHB4O1xcclxcblxcdFxcdG1hcmdpbi1yaWdodDogMjBweDtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxufVxcclxcblxcclxcbi8qIHRhYmxldCAqL1xcclxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIGFuZCAobWluLXdpZHRoOiA2NDFweCkge1xcclxcblxcclxcblxcdHRhYmxlIHtcXHJcXG5cXHRcXHRmb250LXNpemU6IDFlbTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmhpZGUge1xcclxcblxcdFxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdCNib2FyZCB7XFxyXFxuXFx0XFx0d2lkdGg6IDQ5NXB4O1xcclxcblxcdFxcdGhlaWdodDogNDk1cHg7XFxyXFxuXFx0XFx0bWFyZ2luLXRvcDogMmVtO1xcclxcblxcdFxcdG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcblxcdFxcdG1hcmdpbi1yaWdodDogYXV0bztcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtdG9wIHtcXHJcXG5cXHRcXHRib3JkZXItdG9wOiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1ib3R0b20ge1xcclxcblxcdFxcdGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLXJpZ2h0IHtcXHJcXG5cXHRcXHRib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWxlZnQge1xcclxcblxcdFxcdGJvcmRlci1sZWZ0OiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQudGFibGUgeyBcXHJcXG5cXHRcXHRib3JkZXItc3BhY2luZzogMDsgXFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQuaGFsbCB7IFxcclxcblxcdFxcdHotaW5kZXg6IDU7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdHRkIHtcXHJcXG5cXHRcXHR3aWR0aDogNDlweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDQ5cHg7XFxyXFxuXFx0XFx0Ym9yZGVyOiAzcHggc29saWQgIzRENjE4QjtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjNzY4NkE4OyBcXHJcXG5cXHR9XFxyXFxuXFx0dHIge1xcclxcblxcdFxcdGhlaWdodDogNTVweDtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmJ1dHRvbiB7XFxyXFxuXFx0XFx0cGFkZGluZzogNXB4IDdweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LmNvbnRyb2xsZXItZGl2IHtcXHJcXG5cXHRcXHRtYXJnaW46IDFlbSBhdXRvO1xcclxcblxcdFxcdHdpZHRoOiA4MCU7XFxyXFxuXFx0XFx0cGFkZGluZzogNXB4IDdweDtcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHR9XFxyXFxuXFx0LmNvbnRyb2xsZXItYnRuIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjhDM0Q5O1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHRcXHRib3JkZXI6IG5vbmU7XFxyXFxuXFx0XFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdFxcdGhlaWdodDogNDVweDtcXHJcXG5cXHRcXHR3aWR0aDogMTAwcHg7XFxyXFxuXFx0XFx0dHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zcyBlYXNlLWluLW91dDtcXHJcXG5cXHRcXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHRcXHQwIDEuNHB4IDEuMXB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdFxcdDAgMy40cHggMi42cHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0XFx0MCA3LjdweCA1cHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHRcXHQwIDExLjE1cHggOC41cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0XFx0MCA1MHB4IDQwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG5cXHR9XFxyXFxuXFx0LmNvbnRyb2xsZXItYnRuOmhvdmVyIHtcXHJcXG5cXHRcXHR0cmFuc2l0aW9uOiAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzczODNBNjtcXHJcXG5cXHRcXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHRcXHQwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdFxcdDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0XFx0MCAxNS41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdFxcdDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHRcXHQwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnBsYXllciB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxLjc1ZW07XFxyXFxuXFx0XFx0bGluZS1oZWlnaHQ6IDU1cHg7XFxyXFxuXFx0XFx0dGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuaGlnaGxpZ2h0IHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjOERCQjVFO1xcclxcblxcdH1cXHJcXG5cXHQuaGlnaGxpZ2h0OmhvdmVye1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCREUyOTc7XFxyXFxuXFx0fVxcdFxcclxcblxcdC5zZWxlY3RlZFdhbGwge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCMDJEMUY7XFxyXFxuXFx0fVxcdFxcclxcblxcclxcblxcdC5wbGF5ZXItdHVybiB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0cGFkZGluZzogMjBweDtcXHJcXG5cXHRcXHRtYXJnaW46IDAgYXV0bztcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtY291bnRlci1kaXYge1xcclxcblxcdFxcdG1hcmdpbi10b3A6IDMwcHg7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHR9XFxyXFxuXFx0LndhbGwtY291bnRlciB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuLyogbGFwdG9wIDEwMjRweCAqL1xcclxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSBhbmQgKG1pbi13aWR0aDogNzY5cHgpIHtcXHJcXG5cXHJcXG5cXHR0YWJsZSB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxZW07XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5oaWRlIHtcXHJcXG5cXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQjYm9hcmQge1xcclxcblxcdFxcdHdpZHRoOiA0OTVweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDQ5NXB4O1xcclxcblxcdFxcdG1hcmdpbi10b3A6IDFlbTtcXHJcXG5cXHRcXHRtYXJnaW4tbGVmdDogYXV0bztcXHJcXG5cXHRcXHRtYXJnaW4tcmlnaHQ6IGF1dG87XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLXRvcCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXRvcDogM3B4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtYm90dG9tIHtcXHJcXG5cXHRcXHRib3JkZXItYm90dG9tOiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1yaWdodCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXJpZ2h0OiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1sZWZ0IHtcXHJcXG5cXHRcXHRib3JkZXItbGVmdDogM3B4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnRhYmxlIHsgXFxyXFxuXFx0XFx0Ym9yZGVyLXNwYWNpbmc6IDA7IFxcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0XFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LmhhbGwgeyBcXHJcXG5cXHRcXHR6LWluZGV4OiA1O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHR0ZCB7XFxyXFxuXFx0XFx0d2lkdGg6IDQ5cHg7XFxyXFxuXFx0XFx0aGVpZ2h0OiA0OXB4O1xcclxcblxcdFxcdGJvcmRlcjogM3B4IHNvbGlkICM0RDYxOEI7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzc2ODZBODsgXFxyXFxuXFx0fVxcclxcblxcdHRyIHtcXHJcXG5cXHRcXHRoZWlnaHQ6IDU1cHg7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5idXR0b24ge1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdC5jb250cm9sbGVyLWRpdiB7XFxyXFxuXFx0XFx0bWFyZ2luOiAxZW0gYXV0bztcXHJcXG5cXHRcXHR3aWR0aDogODAlO1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFx0fVxcclxcblxcdC5jb250cm9sbGVyLWJ0biB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0I4QzNEOTtcXHJcXG5cXHRcXHRmb250LWZhbWlseTogJ1F1YW50aWNvJywgc2Fucy1zZXJpZjtcXHJcXG5cXHRcXHRmb250LXNpemU6IDFlbTtcXHJcXG5cXHRcXHRjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFx0XFx0Ym9yZGVyOiBub25lO1xcclxcblxcdFxcdG1hcmdpbjogYXV0bztcXHJcXG5cXHRcXHRoZWlnaHQ6IDU1cHg7XFxyXFxuXFx0XFx0d2lkdGg6IDEzM3B4O1xcclxcblxcdFxcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAxLjRweCAxLjFweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDMuNHB4IDIuNnB4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgNy43cHggNXB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0XFx0MCAxMS4xNXB4IDguNXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdFxcdDAgNTBweCA0MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcclxcblxcdC5jb250cm9sbGVyLWJ0bjpob3ZlciB7XFxyXFxuXFx0XFx0dHJhbnNpdGlvbjogLjNzIGVhc2UtaW4tb3V0O1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM3MzgzQTY7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgMTUuNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHRcXHQwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0XFx0MCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5wbGF5ZXIge1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMS43NWVtO1xcclxcblxcdFxcdGxpbmUtaGVpZ2h0OiA1NXB4O1xcclxcblxcdFxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmhpZ2hsaWdodCB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzhEQkI1RTtcXHJcXG5cXHR9XFxyXFxuXFx0LmhpZ2hsaWdodDpob3ZlcntcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQkRFMjk3O1xcclxcblxcdH1cXHRcXHJcXG5cXHQuc2VsZWN0ZWRXYWxsIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjAyRDFGO1xcclxcblxcdH1cXHRcXHJcXG5cXHJcXG5cXHQucGxheWVyLXR1cm4ge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdHBhZGRpbmc6IDIwcHg7XFxyXFxuXFx0XFx0bWFyZ2luOiAwIGF1dG87XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWNvdW50ZXItZGl2IHtcXHJcXG5cXHRcXHRtYXJnaW4tdG9wOiA1cHg7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHR9XFxyXFxuXFx0LndhbGwtY291bnRlciB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuLyogbGFyZ2UgbGFwdG9wICovXFxyXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNDQwcHgpIGFuZCAobWluLXdpZHRoOiAxMDI1cHgpIHtcXHJcXG5cXHJcXG5cXHR0YWJsZSB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxZW07XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5oaWRlIHtcXHJcXG5cXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQjYm9hcmQge1xcclxcblxcdFxcdHdpZHRoOiA2MzBweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDYzMHB4O1xcclxcblxcdFxcdG1hcmdpbi10b3A6IDFlbTtcXHJcXG5cXHRcXHRtYXJnaW4tbGVmdDogYXV0bztcXHJcXG5cXHRcXHRtYXJnaW4tcmlnaHQ6IGF1dG87XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLXRvcCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXRvcDogM3B4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtYm90dG9tIHtcXHJcXG5cXHRcXHRib3JkZXItYm90dG9tOiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1yaWdodCB7XFxyXFxuXFx0XFx0Ym9yZGVyLXJpZ2h0OiAzcHggc29saWQgI0ZGQjAwMDtcXHJcXG5cXHRcXHR6LWluZGV4OiA5O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1sZWZ0IHtcXHJcXG5cXHRcXHRib3JkZXItbGVmdDogM3B4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LnRhYmxlIHsgXFxyXFxuXFx0XFx0Ym9yZGVyLXNwYWNpbmc6IDA7IFxcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0XFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LmhhbGwgeyBcXHJcXG5cXHRcXHR6LWluZGV4OiA1O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHR0ZCB7XFxyXFxuXFx0XFx0d2lkdGg6IDYwcHg7XFxyXFxuXFx0XFx0aGVpZ2h0OiA2MHB4O1xcclxcblxcdFxcdGJvcmRlcjogNXB4IHNvbGlkICM0RDYxOEI7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzc2ODZBODsgXFxyXFxuXFx0fVxcclxcblxcdHRyIHtcXHJcXG5cXHRcXHRoZWlnaHQ6IDcwcHg7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5idXR0b24ge1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdC5jb250cm9sbGVyLWRpdiB7XFxyXFxuXFx0XFx0bWFyZ2luOiAxZW0gYXV0bztcXHJcXG5cXHRcXHR3aWR0aDogODAlO1xcclxcblxcdFxcdHBhZGRpbmc6IDVweCA3cHg7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFx0fVxcclxcblxcdC5jb250cm9sbGVyLWRpdiA+IHAge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMWVtO1xcclxcblxcdH1cXHJcXG5cXHQuY29udHJvbGxlci1idG4ge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICNCOEMzRDk7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxZW07XFxyXFxuXFx0XFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdFxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHRcXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0XFx0aGVpZ2h0OiA1NXB4O1xcclxcblxcdFxcdHdpZHRoOiAxMzNweDtcXHJcXG5cXHRcXHR0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzIGVhc2UtaW4tb3V0O1xcclxcblxcdFxcdGJveC1zaGFkb3c6IFxcclxcblxcdFxcdFxcdDAgMS40cHggMS4xcHggcmdiYSgwLCAwLCAwLCAwLjAzNCksXFxyXFxuXFx0XFx0XFx0MCAzLjRweCAyLjZweCByZ2JhKDAsIDAsIDAsIDAuMDQ4KSxcXHJcXG5cXHRcXHRcXHQwIDcuN3B4IDVweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdFxcdDAgMTEuMTVweCA4LjVweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHRcXHQwIDUwcHggNDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcclxcblxcdH1cXHJcXG5cXHQuY29udHJvbGxlci1idG46aG92ZXIge1xcclxcblxcdFxcdHRyYW5zaXRpb246IC4zcyBlYXNlLWluLW91dDtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjNzM4M0E2O1xcclxcblxcdFxcdGJveC1zaGFkb3c6IFxcclxcblxcdFxcdFxcdDAgMi44cHggMi4ycHggcmdiYSgwLCAwLCAwLCAwLjAzNCksXFxyXFxuXFx0XFx0XFx0MCA2LjdweCA1LjNweCByZ2JhKDAsIDAsIDAsIDAuMDQ4KSxcXHJcXG5cXHRcXHRcXHQwIDE1LjVweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0XFx0MCAyMi4zcHggMTcuOXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdFxcdDAgMTAwcHggODBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQucGxheWVyIHtcXHJcXG5cXHRcXHRmb250LXNpemU6IDEuNzVlbTtcXHJcXG5cXHRcXHRsaW5lLWhlaWdodDogNTVweDtcXHJcXG5cXHRcXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5oaWdobGlnaHQge1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM4REJCNUU7XFxyXFxuXFx0fVxcclxcblxcdC5oaWdobGlnaHQ6aG92ZXJ7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0JERTI5NztcXHJcXG5cXHR9XFx0XFxyXFxuXFx0LnNlbGVjdGVkV2FsbCB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogI0IwMkQxRjtcXHJcXG5cXHR9XFx0XFxyXFxuXFxyXFxuXFx0LnBsYXllci10dXJuIHtcXHJcXG5cXHRcXHRmb250LWZhbWlseTogJ1F1YW50aWNvJywgc2Fucy1zZXJpZjtcXHJcXG5cXHRcXHRwYWRkaW5nOiAyMHB4O1xcclxcblxcdFxcdG1hcmdpbjogMCBhdXRvO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC1jb3VudGVyLWRpdiB7XFxyXFxuXFx0XFx0bWFyZ2luLXRvcDogNXB4O1xcclxcblxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0fVxcclxcblxcdC53YWxsLWNvdW50ZXIge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdG1hcmdpbjogYXV0bztcXHJcXG5cXHR9XFxyXFxufVxcclxcblxcclxcbi8qIDRrIGxhcHRvcCAqL1xcclxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQ0MXB4KSB7XFxyXFxuXFxyXFxuXFx0dGFibGUge1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMWVtO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuaGlkZSB7XFxyXFxuXFx0XFx0ZGlzcGxheTogbm9uZTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0I2JvYXJkIHtcXHJcXG5cXHRcXHR3aWR0aDogNzIwcHg7XFxyXFxuXFx0XFx0aGVpZ2h0OiA3MjBweDtcXHJcXG5cXHRcXHRtYXJnaW4tdG9wOiAzZW07XFxyXFxuXFx0XFx0bWFyZ2luLWxlZnQ6IGF1dG87XFxyXFxuXFx0XFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQud2FsbC10b3Age1xcclxcblxcdFxcdGJvcmRlci10b3A6IDVweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWJvdHRvbSB7XFxyXFxuXFx0XFx0Ym9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtcmlnaHQge1xcclxcblxcdFxcdGJvcmRlci1yaWdodDogNXB4IHNvbGlkICNGRkIwMDA7XFxyXFxuXFx0XFx0ei1pbmRleDogOTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LndhbGwtbGVmdCB7XFxyXFxuXFx0XFx0Ym9yZGVyLWxlZnQ6IDVweCBzb2xpZCAjRkZCMDAwO1xcclxcblxcdFxcdHotaW5kZXg6IDk7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC50YWJsZSB7IFxcclxcblxcdFxcdGJvcmRlci1zcGFjaW5nOiAwOyBcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFx0fVxcclxcblxcclxcblxcdC5oYWxsIHsgXFxyXFxuXFx0XFx0ei1pbmRleDogNTtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0dGQge1xcclxcblxcdFxcdHdpZHRoOiA3MHB4O1xcclxcblxcdFxcdGhlaWdodDogNzBweDtcXHJcXG5cXHRcXHRib3JkZXI6IDVweCBzb2xpZCAjNEQ2MThCO1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM3Njg2QTg7IFxcclxcblxcdH1cXHJcXG5cXHR0ciB7XFxyXFxuXFx0XFx0aGVpZ2h0OiA4MHB4O1xcclxcblxcdH1cXHJcXG5cXHRcXHJcXG5cXHQuYnV0dG9uIHtcXHJcXG5cXHRcXHRwYWRkaW5nOiA1cHggN3B4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQuY29udHJvbGxlci1kaXYge1xcclxcblxcdFxcdG1hcmdpbjogMCBhdXRvO1xcclxcblxcdFxcdHdpZHRoOiA4MCU7XFxyXFxuXFx0XFx0cGFkZGluZzogNXB4IDdweDtcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHR9XFxyXFxuXFx0LmNvbnRyb2xsZXItZGl2ID4gcCB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxLjVlbTtcXHJcXG5cXHR9XFxyXFxuXFx0LmNvbnRyb2xsZXItYnRuIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjhDM0Q5O1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMS41ZW07XFxyXFxuXFx0XFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdFxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHRcXHRtYXJnaW46IDAgYXV0bztcXHJcXG5cXHRcXHRoZWlnaHQ6IDc1cHg7XFxyXFxuXFx0XFx0d2lkdGg6IDIwMHB4O1xcclxcblxcdFxcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAxLjRweCAxLjFweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDMuNHB4IDIuNnB4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgNy43cHggNXB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0XFx0MCAxMS4xNXB4IDguNXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdFxcdDAgNTBweCA0MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcclxcblxcdC5jb250cm9sbGVyLWJ0bjpob3ZlciB7XFxyXFxuXFx0XFx0dHJhbnNpdGlvbjogLjNzIGVhc2UtaW4tb3V0O1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICM3MzgzQTY7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0XFx0MCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHRcXHQwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdFxcdDAgMTUuNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHRcXHQwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0XFx0MCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC5wbGF5ZXIge1xcclxcblxcdFxcdGZvbnQtc2l6ZTogM2VtO1xcclxcblxcdFxcdGxpbmUtaGVpZ2h0OiA4MHB4O1xcclxcblxcdFxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR9XFxyXFxuXFx0XFxyXFxuXFx0LmhpZ2hsaWdodCB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogIzhEQkI1RTtcXHJcXG5cXHR9XFxyXFxuXFx0LmhpZ2hsaWdodDpob3ZlcntcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQkRFMjk3O1xcclxcblxcdH1cXHRcXHJcXG5cXHQuc2VsZWN0ZWRXYWxsIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAjQjAyRDFGO1xcclxcblxcdH1cXHRcXHJcXG5cXHJcXG5cXHQucGxheWVyLXR1cm4ge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMmVtO1xcclxcblxcdFxcdHBhZGRpbmc6IDIwcHg7XFxyXFxuXFx0XFx0bWFyZ2luOiAwIGF1dG87XFxyXFxuXFx0fVxcclxcblxcdFxcclxcblxcdC53YWxsLWNvdW50ZXItZGl2IHtcXHJcXG5cXHRcXHRtYXJnaW4tdG9wOiAyZW07XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHR9XFxyXFxuXFx0LndhbGwtY291bnRlciB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICdRdWFudGljbycsIHNhbnMtc2VyaWY7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAyZW07XFxyXFxuXFx0XFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuI3Jlc3RhcnQtZGl2IHtcXHJcXG5cXHRwb3NpdGlvbjogZml4ZWQ7XFxyXFxuXFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcdGZvbnQtc2l6ZTogMmVtO1xcclxcblxcdHBhZGRpbmc6IDE1cHg7XFxyXFxuXFx0bWFyZ2luOiAyMDBweDtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG5cXHR3aWR0aDogNDAwcHg7XFxyXFxuXFx0aGVpZ2h0OiAyMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuI3Jlc3RhcnQtZGl2IGgxIHtcXHJcXG5cXHRtYXJnaW46IDEwcHggYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuI3Jlc3RhcnQtZGl2IGJ1dHRvbiB7XFxyXFxuXFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdHdpZHRoOiAzMCU7XFxyXFxuXFx0aGVpZ2h0OiAxNSU7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25UZXN0IHtcXHJcXG5cXHR3aWR0aDogMzAwcHg7XFxyXFxuXFx0aGVpZ2h0OiAxMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb21Gb3JtIHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcclxcblxcdG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuI2Zvcm1EaXYge1xcclxcblxcdG1hcmdpbjogMzAlIGF1dG87XFxyXFxufVxcclxcblxcclxcbiNyb29tSW5wdXQge1xcclxcblxcdGJvcmRlcjogbm9uZTsgXFxyXFxuXFx0cGFkZGluZzogMCAxcmVtO1xcclxcblxcdGZsZXgtZ3JvdzogMTtcXHJcXG5cXHRib3JkZXItcmFkaXVzOiAycmVtO1xcclxcblxcdG1hcmdpbjogMC4yNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb21JbnB1dDpmb2N1cyB7XFxyXFxuXFx0b3V0bGluZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb21CdXR0b24ge1xcclxcblxcdGJhY2tncm91bmQ6ICMzMzM7XFxyXFxuXFx0Ym9yZGVyOiBub25lO1xcclxcblxcdHBhZGRpbmc6IDAgMXJlbTsgXFxyXFxuXFx0bWFyZ2luOiAwLjI1cmVtOyBcXHJcXG5cXHRib3JkZXItcmFkaXVzOiAzcHg7IFxcclxcblxcdG91dGxpbmU6IG5vbmU7IFxcclxcblxcdGNvbG9yOiAjZmZmO1xcclxcbn1cXHJcXG4jcm9vbUJ1dHRvbjpob3ZlciB7XFxyXFxuXFx0YmFja2dyb3VuZDogZ3JheTtcXHJcXG59XFxyXFxuXFxyXFxuI2xvYmJ5LWRpdiB7XFxyXFxuXFx0XFxyXFxuXFx0d2lkdGg6IDgwJTtcXHJcXG59XFxyXFxuI2xvYmJ5LWRpdiA+IGgxIHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjZmZmO1xcclxcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuI2xvYmJ5LWZvcm0geyBcXHJcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMTUpOyBcXHJcXG5cXHRwYWRkaW5nOiAwLjI1cmVtOyBcXHJcXG5cXHRwb3NpdGlvbjogZml4ZWQ7IFxcclxcblxcdGJvdHRvbTogMDsgXFxyXFxuXFx0bGVmdDogMDsgXFxyXFxuXFx0cmlnaHQ6IDA7IFxcclxcblxcdGRpc3BsYXk6IGZsZXg7IFxcclxcblxcdGhlaWdodDogM3JlbTsgXFxyXFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDsgXFxyXFxuXFx0YmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpOyBcXHJcXG59XFxyXFxuI2xvYmJ5LWlucHV0IHsgXFxyXFxuXFx0Ym9yZGVyOiBub25lOyBcXHJcXG5cXHRwYWRkaW5nOiAwIDFyZW07IFxcclxcblxcdGZsZXgtZ3JvdzogMTsgXFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMnJlbTsgXFxyXFxuXFx0bWFyZ2luOiAwLjI1cmVtOyBcXHJcXG59XFxyXFxuI2xvYmJ5LWlucHV0OmZvY3VzIHsgb3V0bGluZTogbm9uZTsgfVxcclxcbiNsb2JieS1mb3JtID4gYnV0dG9uIHsgXFxyXFxuXFx0YmFja2dyb3VuZDogIzMzMzsgXFxyXFxuXFx0Ym9yZGVyOiBub25lOyBcXHJcXG5cXHRwYWRkaW5nOiAwIDFyZW07IFxcclxcblxcdG1hcmdpbjogMC4yNXJlbTsgXFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogM3B4OyBcXHJcXG5cXHRvdXRsaW5lOiBub25lOyBcXHJcXG5cXHRjb2xvcjogI2ZmZjsgXFxyXFxufVxcclxcbiNsb2JieS1mb3JtID4gYnV0dG9uOmhvdmVyIHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiBncmF5O1xcclxcbn1cXHJcXG5cXHJcXG4jbG9iYnktbWVzc2FnZXMgeyBcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjZmZmOyBcXHJcXG5cXHRsaXN0LXN0eWxlLXR5cGU6IG5vbmU7IFxcclxcblxcdG1hcmdpbjogMTAwcHggMDsgXFxyXFxuXFx0cGFkZGluZzogMDsgXFxyXFxuXFx0d2lkdGg6IDEwMCU7XFxyXFxuXFx0aGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG4jbG9iYnktbWVzc2FnZXMgPiBsaSB7IHBhZGRpbmc6IDAuNXJlbSAxcmVtOyB9XFxyXFxuI2xvYmJ5LW1lc3NhZ2VzID4gbGk6bnRoLWNoaWxkKG9kZCkgeyBiYWNrZ3JvdW5kOiAjZWZlZmVmOyB9XFxyXFxuI2xvYmJ5LXN0YXJ0LWdhbWUge1xcclxcblxcdHdpZHRoOiAxMDBweDtcXHJcXG5cXHRoZWlnaHQ6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi8qIHNwbGFzaCBkaXYgKi9cXHJcXG4jc3BsYXNoLWRpdiB7XFxyXFxuXFx0YmFja2dyb3VuZDogI0E2QjFDOTtcXHJcXG5cXHR3aWR0aDogMjFlbTtcXHJcXG5cXHRoZWlnaHQ6IDIxZW07XFxyXFxuXFx0bWFyZ2luOiAxNWVtIGF1dG8gYXV0byBhdXRvO1xcclxcblxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHQwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0MCAxNS41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHQwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG59XFxyXFxuXFxyXFxuLmJ0biB7XFxyXFxuXFx0YmFja2dyb3VuZDogI0I4QzNEOTtcXHJcXG5cXHRib3JkZXI6IG5vbmU7XFxyXFxuXFx0bWFyZ2luOiBhdXRvO1xcclxcblxcdGhlaWdodDogNWVtO1xcclxcblxcdHdpZHRoOiAxM2VtO1xcclxcblxcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuXFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0MCAxLjRweCAxLjFweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHQwIDMuNHB4IDIuNnB4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdDAgNy43cHggNXB4IHJnYmEoMCwgMCwgMCwgMC4wNiksXFxyXFxuXFx0XFx0MCAxMS4xNXB4IDguNXB4IHJnYmEoMCwgMCwgMCwgMC4wODYpLFxcclxcblxcdFxcdDAgNTBweCA0MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxufVxcclxcblxcclxcbi5idG46aG92ZXIge1xcclxcblxcdHRyYW5zaXRpb246IC4zcyBlYXNlLWluLW91dDtcXHJcXG5cXHR0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxyXFxuXFx0YmFja2dyb3VuZDogIzczODNBNjtcXHJcXG5cXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHQwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0MCAxNS41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHQwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG59XFxyXFxuXFxyXFxuLyogZm9ybSBkaXYgKi9cXHJcXG4jZm9ybS1kaXYge1xcclxcblxcdGJhY2tncm91bmQ6ICNBNkIxQzk7XFxyXFxuXFx0d2lkdGg6IDIxZW07XFxyXFxuXFx0aGVpZ2h0OiAyMWVtO1xcclxcblxcdG1hcmdpbjogMTVlbSBhdXRvIGF1dG8gYXV0bztcXHJcXG5cXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFx0Ym94LXNoYWRvdzogXFxyXFxuXFx0XFx0MCAyLjhweCAyLjJweCByZ2JhKDAsIDAsIDAsIDAuMDM0KSxcXHJcXG5cXHRcXHQwIDYuN3B4IDUuM3B4IHJnYmEoMCwgMCwgMCwgMC4wNDgpLFxcclxcblxcdFxcdDAgMTUuNXB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjA2KSxcXHJcXG5cXHRcXHQwIDIyLjNweCAxNy45cHggcmdiYSgwLCAwLCAwLCAwLjA4NiksXFxyXFxuXFx0XFx0MCAxMDBweCA4MHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxyXFxufVxcclxcblxcclxcbiNyb29tLWZvcm0ge1xcclxcblxcdHdpZHRoOiAxMDAlO1xcclxcblxcdGhlaWdodDogMTAwJTtcXHJcXG5cXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbiNyb29tLWlucHV0IHtcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0d2lkdGg6IDUwJTtcXHJcXG5cXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDEuNTtcXHJcXG4gIFxcdGZvbnQ6IDcwMCAxLjJyZW0gJ1JvYm90byBTbGFiJywgc2Fucy1zZXJpZjtcXHJcXG4gIFxcdHBhZGRpbmc6IDFlbSAyZW07XFxyXFxuICBcXHRsZXR0ZXItc3BhY2luZzogMC4wNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb20tYnV0dG9uIHtcXHJcXG4gXFx0bWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBsb2JieSByb29tcyBsaXN0ICovXFxyXFxuI2xvYmJ5LXJvb21zLWxpc3QtZGl2IHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjQTZCMUM5O1xcclxcblxcdHdpZHRoOiAyMWVtO1xcclxcblxcdG1hcmdpbjogMTVlbSBhdXRvIGF1dG8gYXV0bztcXHJcXG5cXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHRib3gtc2hhZG93OiBcXHJcXG5cXHRcXHQwIDIuOHB4IDIuMnB4IHJnYmEoMCwgMCwgMCwgMC4wMzQpLFxcclxcblxcdFxcdDAgNi43cHggNS4zcHggcmdiYSgwLCAwLCAwLCAwLjA0OCksXFxyXFxuXFx0XFx0MCAxNS41cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMDYpLFxcclxcblxcdFxcdDAgMjIuM3B4IDE3LjlweCByZ2JhKDAsIDAsIDAsIDAuMDg2KSxcXHJcXG5cXHRcXHQwIDEwMHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuI2xvYmJ5LXJvb21zLWxpc3QtZGl2ID4gdWwgPiBsaSA+IGJ1dHRvbiB7XFxyXFxuXFx0bWFyZ2luOiAxLjNlbTtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuQG1peGluIGJ0bi1ib3JkZXItZHJhd2luZygkY29sb3I6ICNGRkVFQ0QsICRob3ZlcjogYmxhY2ssICR3aWR0aDogMnB4LCAkdmVydGljYWw6IHRvcCwgJGhvcml6b250YWw6IGxlZnQsICRkdXJhdGlvbjogMC4yNXMpIHtcXHJcXG4vLyAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwICR3aWR0aCAkY29sb3I7XFxyXFxuICBjb2xvcjogJGNvbG9yO1xcclxcbiAgdHJhbnNpdGlvbjogY29sb3IgJGR1cmF0aW9uICRkdXJhdGlvbi8zO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgXFxyXFxuICAmOjpiZWZvcmUsXFxyXFxuICAmOjphZnRlciB7XFxyXFxuICAgIGJvcmRlcjogMCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgY29udGVudDogJyc7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHdpZHRoOiAwOyBoZWlnaHQ6IDA7XFxyXFxuICAgIFxcclxcbiAgICAjeyR2ZXJ0aWNhbH06IDA7IFxcclxcbiAgICAjeyRob3Jpem9udGFsfTogMDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICY6OmJlZm9yZSB7XFxyXFxuICAgICRoLXNpZGU6IGlmKCRob3Jpem9udGFsID09ICdsZWZ0JywgJ3JpZ2h0JywgJ2xlZnQnKTtcXHJcXG4gICAgXFxyXFxuICAgIGJvcmRlci0jeyR2ZXJ0aWNhbH0td2lkdGg6ICR3aWR0aDtcXHJcXG4gICAgYm9yZGVyLSN7JGgtc2lkZX0td2lkdGg6ICR3aWR0aDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgJjo6YWZ0ZXIge1xcclxcbiAgICAkdi1zaWRlOiBpZigkdmVydGljYWwgPT0gJ3RvcCcsICdib3R0b20nLCAndG9wJyk7XFxyXFxuICAgIFxcclxcbiAgICBib3JkZXItI3skdi1zaWRlfS13aWR0aDogJHdpZHRoO1xcclxcbiAgICBib3JkZXItI3skaG9yaXpvbnRhbH0td2lkdGg6ICR3aWR0aDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgJjpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAkaG92ZXI7XFxyXFxuICAgIFxcclxcbiAgICAmOjpiZWZvcmUsXFxyXFxuICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICBib3JkZXItY29sb3I6ICRob3ZlcjtcXHJcXG4gICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMHMsIHdpZHRoICRkdXJhdGlvbiwgaGVpZ2h0ICRkdXJhdGlvbjtcXHJcXG4gICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICY6OmJlZm9yZSB7IHRyYW5zaXRpb24tZGVsYXk6IDBzLCAwcywgJGR1cmF0aW9uOyB9XFxyXFxuICAgIFxcclxcbiAgICAmOjphZnRlciB7IHRyYW5zaXRpb24tZGVsYXk6IDBzLCAkZHVyYXRpb24sIDBzOyB9XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5idG4ge1xcclxcbiAgQGluY2x1ZGUgYnRuLWJvcmRlci1kcmF3aW5nKCM0MDMxNzQsICNCMUE5Q0QsIDRweCwgYm90dG9tLCByaWdodCk7XFxyXFxufVxcclxcbi5jb250cm9sbGVyLWJ0biB7XFxyXFxuICBAaW5jbHVkZSBidG4tYm9yZGVyLWRyYXdpbmcoIzQwMzE3NCwgI0IxQTlDRCwgNHB4LCBib3R0b20sIHJpZ2h0KTtcXHJcXG59XFxyXFxuXFxyXFxuLy89PT0gQnV0dG9uIHN0eWxpbmcsIHNlbWktaWdub3JlXFxyXFxuLmJ0biB7XFxyXFxuLy8gICBib3JkZXI6IG5vbmU7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgZm9udDogNzAwIDEuMnJlbSAnUm9ib3RvIFNsYWInLCBzYW5zLXNlcmlmO1xcclxcbiAgcGFkZGluZzogMWVtIDJlbTtcXHJcXG4gIGxldHRlci1zcGFjaW5nOiAwLjA1cmVtO1xcclxcbiAgXFxyXFxuLy8gICAmOmZvY3VzIHsgb3V0bGluZTogMnB4IGRvdHRlZCAjNEQ2MThDOyB9XFxyXFxufVxcclxcblxcclxcbiN3aW5uZXItZGl2IHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjQTZCMUM5O1xcclxcblxcdHdpZHRoOiAzMHZ3O1xcclxcblxcdGhlaWdodDogMzB2dztcXHJcXG5cXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG4jd2lubmVyLW1lc3NhZ2Uge1xcclxcblxcdGNvbG9yOiAjNDAzMTc0O1xcclxcblxcdGZvbnQtZmFtaWx5OiAnUXVhbnRpY28nLCBzYW5zLXNlcmlmO1xcclxcblxcdGZvbnQtc2l6ZTogM2VtO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0Ym90dG9tOiA1MCU7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiAnJSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gY3JlYXRlRGVidWcuZGVzdHJveTsgLy8gWFhYIFRlbXBvcmFyeS4gV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVidWcsICdlbmFibGVkJywge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6ICgpID0+IGVuYWJsZU92ZXJyaWRlID09PSBudWxsID8gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpIDogZW5hYmxlT3ZlcnJpZGUsXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIm1vZHVsZS5leHBvcnRzID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgfVxufSkoKTtcbiIsImNvbnN0IFNvY2tldCA9IHJlcXVpcmUoXCIuL3NvY2tldFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAodXJpLCBvcHRzKSA9PiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5Tb2NrZXQgPSBTb2NrZXQ7XG5tb2R1bGUuZXhwb3J0cy5wcm90b2NvbCA9IFNvY2tldC5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcbm1vZHVsZS5leHBvcnRzLlRyYW5zcG9ydCA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydFwiKTtcbm1vZHVsZS5leHBvcnRzLnRyYW5zcG9ydHMgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRzL2luZGV4XCIpO1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG4iLCJjb25zdCB0cmFuc3BvcnRzID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0cy9pbmRleFwiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6c29ja2V0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBwYXJzZXVyaSA9IHJlcXVpcmUoXCJwYXJzZXVyaVwiKTtcbmNvbnN0IHBhcnNlcXMgPSByZXF1aXJlKFwicGFyc2Vxc1wiKTtcblxuY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHVyaSwgb3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgb3B0cyA9IHVyaTtcbiAgICAgIHVyaSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVyaSkge1xuICAgICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSBcImh0dHBzXCIgfHwgdXJpLnByb3RvY29sID09PSBcIndzc1wiO1xuICAgICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgICBpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICAgIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICAgIH1cblxuICAgIHRoaXMuc2VjdXJlID1cbiAgICAgIG51bGwgIT0gb3B0cy5zZWN1cmVcbiAgICAgICAgPyBvcHRzLnNlY3VyZVxuICAgICAgICA6IHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcblxuICAgIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICB9XG5cbiAgICB0aGlzLmhvc3RuYW1lID1cbiAgICAgIG9wdHMuaG9zdG5hbWUgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhdGlvbi5ob3N0bmFtZSA6IFwibG9jYWxob3N0XCIpO1xuICAgIHRoaXMucG9ydCA9XG4gICAgICBvcHRzLnBvcnQgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgICAgOiB0aGlzLnNlY3VyZVxuICAgICAgICA/IDQ0M1xuICAgICAgICA6IDgwKTtcblxuICAgIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbXCJwb2xsaW5nXCIsIFwid2Vic29ja2V0XCJdO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgICB0aGlzLm9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBwYXRoOiBcIi9lbmdpbmUuaW9cIixcbiAgICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICB1cGdyYWRlOiB0cnVlLFxuICAgICAgICBqc29ucDogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wUGFyYW06IFwidFwiLFxuICAgICAgICByZW1lbWJlclVwZ3JhZGU6IGZhbHNlLFxuICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IHRydWUsXG4gICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB7XG4gICAgICAgICAgdGhyZXNob2xkOiAxMDI0XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zcG9ydE9wdGlvbnM6IHt9XG4gICAgICB9LFxuICAgICAgb3B0c1xuICAgICk7XG5cbiAgICB0aGlzLm9wdHMucGF0aCA9IHRoaXMub3B0cy5wYXRoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSArIFwiL1wiO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMucXVlcnkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMub3B0cy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICAgIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiYmVmb3JldW5sb2FkXCIsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGNsb3NlIHRoZSB0cmFuc3BvcnRcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNyZWF0ZVRyYW5zcG9ydChuYW1lKSB7XG4gICAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgICBjb25zdCBxdWVyeSA9IGNsb25lKHRoaXMub3B0cy5xdWVyeSk7XG5cbiAgICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgICAvLyB0cmFuc3BvcnQgbmFtZVxuICAgIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLm9wdHMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSxcbiAgICAgIHRoaXMub3B0cyxcbiAgICAgIHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHNvY2tldDogdGhpcyxcbiAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgIHNlY3VyZTogdGhpcy5zZWN1cmUsXG4gICAgICAgIHBvcnQ6IHRoaXMucG9ydFxuICAgICAgfVxuICAgICk7XG5cbiAgICBkZWJ1ZyhcIm9wdGlvbnM6ICVqXCIsIG9wdHMpO1xuXG4gICAgcmV0dXJuIG5ldyB0cmFuc3BvcnRzW25hbWVdKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGxldCB0cmFuc3BvcnQ7XG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRzLnJlbWVtYmVyVXBncmFkZSAmJlxuICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJlxuICAgICAgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoXCJ3ZWJzb2NrZXRcIikgIT09IC0xXG4gICAgKSB7XG4gICAgICB0cmFuc3BvcnQgPSBcIndlYnNvY2tldFwiO1xuICAgIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIFwiTm8gdHJhbnNwb3J0cyBhdmFpbGFibGVcIik7XG4gICAgICB9LCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcblxuICAgIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgICB0cnkge1xuICAgICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkZWJ1ZyhcImVycm9yIHdoaWxlIGNyZWF0aW5nIHRyYW5zcG9ydDogJXNcIiwgZSk7XG4gICAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzZXRUcmFuc3BvcnQodHJhbnNwb3J0KSB7XG4gICAgZGVidWcoXCJzZXR0aW5nIHRyYW5zcG9ydCAlc1wiLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgIGRlYnVnKFwiY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzXCIsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gICAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnNcbiAgICB0cmFuc3BvcnRcbiAgICAgIC5vbihcImRyYWluXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLm9uRHJhaW4oKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJwYWNrZXRcIiwgZnVuY3Rpb24ocGFja2V0KSB7XG4gICAgICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgICAgIH0pXG4gICAgICAub24oXCJlcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbG9zZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwcm9iZShuYW1lKSB7XG4gICAgZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICAgIGxldCB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICAgIGxldCBmYWlsZWQgPSBmYWxzZTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIG9uVHJhbnNwb3J0T3BlbigpIHtcbiAgICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgICBjb25zdCB1cGdyYWRlTG9zZXNCaW5hcnkgPVxuICAgICAgICAgICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgICBmYWlsZWQgPSBmYWlsZWQgfHwgdXBncmFkZUxvc2VzQmluYXJ5O1xuICAgICAgfVxuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBvcGVuZWQnLCBuYW1lKTtcbiAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwicGluZ1wiLCBkYXRhOiBcInByb2JlXCIgfV0pO1xuICAgICAgdHJhbnNwb3J0Lm9uY2UoXCJwYWNrZXRcIiwgZnVuY3Rpb24obXNnKSB7XG4gICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKFwicG9uZ1wiID09PSBtc2cudHlwZSAmJiBcInByb2JlXCIgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLmVtaXQoXCJ1cGdyYWRpbmdcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuO1xuICAgICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBcIndlYnNvY2tldFwiID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICAgIGRlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0IFwiJXNcIicsIHNlbGYudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgICAgZGVidWcoXCJjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXRcIik7XG5cbiAgICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgICAgc2VsZi5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwidXBncmFkZVwiIH1dKTtcbiAgICAgICAgICAgIHNlbGYuZW1pdChcInVwZ3JhZGVcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yXCIpO1xuICAgICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgICBzZWxmLmVtaXQoXCJ1cGdyYWRlRXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0KCkge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICAgIGZhaWxlZCA9IHRydWU7XG5cbiAgICAgIGNsZWFudXAoKTtcblxuICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvcjogXCIgKyBlcnIpO1xuICAgICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuXG4gICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgICBzZWxmLmVtaXQoXCJ1cGdyYWRlRXJyb3JcIiwgZXJyb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UoKSB7XG4gICAgICBvbmVycm9yKFwidHJhbnNwb3J0IGNsb3NlZFwiKTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgb25lcnJvcihcInNvY2tldCBjbG9zZWRcIik7XG4gICAgfVxuXG4gICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICBmdW5jdGlvbiBvbnVwZ3JhZGUodG8pIHtcbiAgICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuICAgIH1cblxuICAgIHRyYW5zcG9ydC5vbmNlKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgIHRyYW5zcG9ydC5vbmNlKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0Lm9uY2UoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICAgIHRoaXMub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIHRoaXMub25jZShcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuXG4gICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgb25PcGVuKCkge1xuICAgIGRlYnVnKFwic29ja2V0IG9wZW5cIik7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gICAgdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgICB0aGlzLmZsdXNoKCk7XG5cbiAgICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gICAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICAgIGlmIChcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgIHRoaXMub3B0cy51cGdyYWRlICYmXG4gICAgICB0aGlzLnRyYW5zcG9ydC5wYXVzZVxuICAgICkge1xuICAgICAgZGVidWcoXCJzdGFydGluZyB1cGdyYWRlIHByb2Jlc1wiKTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDtcbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25QYWNrZXQocGFja2V0KSB7XG4gICAgaWYgKFxuICAgICAgXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZVxuICAgICkge1xuICAgICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgICB0aGlzLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcblxuICAgICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgICAgdGhpcy5lbWl0KFwiaGVhcnRiZWF0XCIpO1xuXG4gICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJwb25nXCIpO1xuICAgICAgICAgIHRoaXMuZW1pdChcInBvbmdcIik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uSGFuZHNoYWtlKGRhdGEpIHtcbiAgICB0aGlzLmVtaXQoXCJoYW5kc2hha2VcIiwgZGF0YSk7XG4gICAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICAgIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICAgIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICAgIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gICAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gICAgdGhpcy5vbk9wZW4oKTtcbiAgICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0XG4gICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHRoaXMucmVzZXRQaW5nVGltZW91dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW5kIHJlc2V0cyBwaW5nIHRpbWVvdXQgdGltZXIgYmFzZWQgb24gc2VydmVyIHBpbmdzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJlc2V0UGluZ1RpbWVvdXQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLm9uQ2xvc2UoXCJwaW5nIHRpbWVvdXRcIik7XG4gICAgfSwgdGhpcy5waW5nSW50ZXJ2YWwgKyB0aGlzLnBpbmdUaW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRHJhaW4oKSB7XG4gICAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAgIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZmx1c2goKSB7XG4gICAgaWYgKFxuICAgICAgXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmXG4gICAgICB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICAgIXRoaXMudXBncmFkaW5nICYmXG4gICAgICB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aFxuICAgICkge1xuICAgICAgZGVidWcoXCJmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldFwiLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgICAgLy8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGxlbmd0aCBvZiB3cml0ZUJ1ZmZlclxuICAgICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICAgIHRoaXMuZW1pdChcImZsdXNoXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgd3JpdGUobXNnLCBvcHRpb25zLCBmbikge1xuICAgIHRoaXMuc2VuZFBhY2tldChcIm1lc3NhZ2VcIiwgbXNnLCBvcHRpb25zLCBmbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZW5kKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcGFja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFBhY2tldCh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkYXRhKSB7XG4gICAgICBmbiA9IGRhdGE7XG4gICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgICBmbiA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7XG5cbiAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9O1xuICAgIHRoaXMuZW1pdChcInBhY2tldENyZWF0ZVwiLCBwYWNrZXQpO1xuICAgIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgIGlmIChmbikgdGhpcy5vbmNlKFwiZmx1c2hcIiwgZm4pO1xuICAgIHRoaXMuZmx1c2goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NpbmdcIjtcblxuICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMub25jZShcImRyYWluXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIHNlbGYub25DbG9zZShcImZvcmNlZCBjbG9zZVwiKTtcbiAgICAgIGRlYnVnKFwic29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZVwiKTtcbiAgICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlKCkge1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2FpdEZvclVwZ3JhZGUoKSB7XG4gICAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgICAgc2VsZi5vbmNlKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgc2VsZi5vbmNlKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25FcnJvcihlcnIpIHtcbiAgICBkZWJ1ZyhcInNvY2tldCBlcnJvciAlalwiLCBlcnIpO1xuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKHJlYXNvbiwgZGVzYykge1xuICAgIGlmIChcbiAgICAgIFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGVcbiAgICApIHtcbiAgICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgLy8gY2xlYXIgdGltZXJzXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcblxuICAgICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcblxuICAgICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAgIC8vIGlnbm9yZSBmdXJ0aGVyIHRyYW5zcG9ydCBjb21tdW5pY2F0aW9uXG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuXG4gICAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgICB0aGlzLmlkID0gbnVsbDtcblxuICAgICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgICAgdGhpcy5lbWl0KFwiY2xvc2VcIiwgcmVhc29uLCBkZXNjKTtcblxuICAgICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICAgIHNlbGYud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdXBncmFkZXMsIHJldHVybmluZyBvbmx5IHRob3NlIG1hdGNoaW5nIGNsaWVudCB0cmFuc3BvcnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAgICogQGFwaSBwcml2YXRlXG4gICAqXG4gICAqL1xuICBmaWx0ZXJVcGdyYWRlcyh1cGdyYWRlcykge1xuICAgIGNvbnN0IGZpbHRlcmVkVXBncmFkZXMgPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgaiA9IHVwZ3JhZGVzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGo7IGkrKykge1xuICAgICAgaWYgKH50aGlzLnRyYW5zcG9ydHMuaW5kZXhPZih1cGdyYWRlc1tpXSkpXG4gICAgICAgIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xuICB9XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxuXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgY29uc3QgbyA9IHt9O1xuICBmb3IgKGxldCBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcbiIsImNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgRW1pdHRlciA9IHJlcXVpcmUoXCJjb21wb25lbnQtZW1pdHRlclwiKTtcblxuY2xhc3MgVHJhbnNwb3J0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO1xuICAgIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgYW4gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIG9uRXJyb3IobXNnLCBkZXNjKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgZXJyLnR5cGUgPSBcIlRyYW5zcG9ydEVycm9yXCI7XG4gICAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgIHRoaXMuZG9PcGVuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VuZChwYWNrZXRzKSB7XG4gICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zcG9ydCBub3Qgb3BlblwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gb3BlblxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uT3BlbigpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmVtaXQoXCJvcGVuXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aXRoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EYXRhKGRhdGEpIHtcbiAgICBjb25zdCBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICAgIHRoaXMub25QYWNrZXQocGFja2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICAgKi9cbiAgb25QYWNrZXQocGFja2V0KSB7XG4gICAgdGhpcy5lbWl0KFwicGFja2V0XCIsIHBhY2tldCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgIHRoaXMuZW1pdChcImNsb3NlXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuIiwiY29uc3QgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKFwieG1saHR0cHJlcXVlc3Qtc3NsXCIpO1xuY29uc3QgWEhSID0gcmVxdWlyZShcIi4vcG9sbGluZy14aHJcIik7XG5jb25zdCBKU09OUCA9IHJlcXVpcmUoXCIuL3BvbGxpbmctanNvbnBcIik7XG5jb25zdCB3ZWJzb2NrZXQgPSByZXF1aXJlKFwiLi93ZWJzb2NrZXRcIik7XG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcob3B0cykge1xuICBsZXQgeGhyO1xuICBsZXQgeGQgPSBmYWxzZTtcbiAgbGV0IHhzID0gZmFsc2U7XG4gIGNvbnN0IGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgbGV0IHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoXCJvcGVuXCIgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoXCJKU09OUCBkaXNhYmxlZFwiKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJjb25zdCBQb2xsaW5nID0gcmVxdWlyZShcIi4vcG9sbGluZ1wiKTtcbmNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi4vZ2xvYmFsVGhpc1wiKTtcblxuY29uc3Qgck5ld2xpbmUgPSAvXFxuL2c7XG5jb25zdCByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbmxldCBjYWxsYmFja3M7XG5cbmNsYXNzIEpTT05QUG9sbGluZyBleHRlbmRzIFBvbGxpbmcge1xuICAvKipcbiAgICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAgIC8vIGRlZmluZSBnbG9iYWwgY2FsbGJhY2tzIGFycmF5IGlmIG5vdCBwcmVzZW50XG4gICAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciBtdWx0aXBsZSBlbmdpbmVzIGluIHRoZSBzYW1lIHBhZ2VcbiAgICAgIGNhbGxiYWNrcyA9IGdsb2JhbFRoaXMuX19fZWlvID0gZ2xvYmFsVGhpcy5fX19laW8gfHwgW107XG4gICAgfVxuXG4gICAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICAgIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKG1zZykge1xuICAgICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgICB9KTtcblxuICAgIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAgICovXG4gIGdldCBzdXBwb3J0c0JpbmFyeSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9DbG9zZSgpIHtcbiAgICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICAgIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgICAgIHRoaXMuc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7fTtcbiAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICAgIH1cblxuICAgIHN1cGVyLmRvQ2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvUG9sbCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG4gICAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5vbkVycm9yKFwianNvbnAgcG9sbCBlcnJvclwiLCBlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtcbiAgICBpZiAoaW5zZXJ0QXQpIHtcbiAgICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cbiAgICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICAgIGNvbnN0IGlzVUFnZWNrbyA9XG4gICAgICBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb1dyaXRlKGRhdGEsIGZuKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGlmcmFtZTtcblxuICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgICBjb25zdCBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICAgICAgY29uc3QgaWQgPSAodGhpcy5pZnJhbWVJZCA9IFwiZWlvX2lmcmFtZV9cIiArIHRoaXMuaW5kZXgpO1xuXG4gICAgICBmb3JtLmNsYXNzTmFtZSA9IFwic29ja2V0aW9cIjtcbiAgICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICBmb3JtLnN0eWxlLnRvcCA9IFwiLTEwMDBweFwiO1xuICAgICAgZm9ybS5zdHlsZS5sZWZ0ID0gXCItMTAwMHB4XCI7XG4gICAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgICAgZm9ybS5tZXRob2QgPSBcIlBPU1RcIjtcbiAgICAgIGZvcm0uc2V0QXR0cmlidXRlKFwiYWNjZXB0LWNoYXJzZXRcIiwgXCJ1dGYtOFwiKTtcbiAgICAgIGFyZWEubmFtZSA9IFwiZFwiO1xuICAgICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgICB0aGlzLmFyZWEgPSBhcmVhO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpbml0SWZyYW1lKCk7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRJZnJhbWUoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzZWxmLmZvcm0ucmVtb3ZlQ2hpbGQoc2VsZi5pZnJhbWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgc2VsZi5vbkVycm9yKFwianNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvclwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgICAgY29uc3QgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nO1xuICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBcImphdmFzY3JpcHQ6MFwiO1xuICAgICAgfVxuXG4gICAgICBpZnJhbWUuaWQgPSBzZWxmLmlmcmFtZUlkO1xuXG4gICAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICAgIH1cblxuICAgIGluaXRJZnJhbWUoKTtcblxuICAgIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAgIC8vIGRvdWJsZSBlc2NhcGluZyBpcyByZXF1aXJlZCBmb3IgZXNjYXBlZCBuZXcgbGluZXMgYmVjYXVzZSB1bmVzY2FwaW5nIG9mIG5ldyBsaW5lcyBjYW4gYmUgZG9uZSBzYWZlbHkgb24gc2VydmVyLXNpZGVcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgXCJcXFxcXFxuXCIpO1xuICAgIHRoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgXCJcXFxcblwiKTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgICAgdGhpcy5pZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cblxuY29uc3QgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKFwieG1saHR0cHJlcXVlc3Qtc3NsXCIpO1xuY29uc3QgUG9sbGluZyA9IHJlcXVpcmUoXCIuL3BvbGxpbmdcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgeyBwaWNrIH0gPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi4vZ2xvYmFsVGhpc1wiKTtcblxuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyXCIpO1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkoKSB7fVxuXG5jb25zdCBoYXNYSFIyID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbmNsYXNzIFhIUiBleHRlbmRzIFBvbGxpbmcge1xuICAvKipcbiAgICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zdCBpc1NTTCA9IFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgbGV0IHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMueGQgPVxuICAgICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUpIHx8XG4gICAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAgICAgKi9cbiAgICBjb25zdCBmb3JjZUJhc2U2NCA9IG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NDtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gaGFzWEhSMiAmJiAhZm9yY2VCYXNlNjQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICByZXF1ZXN0KG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24ob3B0cywgeyB4ZDogdGhpcy54ZCwgeHM6IHRoaXMueHMgfSwgdGhpcy5vcHRzKTtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcy51cmkoKSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9Xcml0ZShkYXRhLCBmbikge1xuICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJlcS5vbihcInN1Y2Nlc3NcIiwgZm4pO1xuICAgIHJlcS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc2VsZi5vbkVycm9yKFwieGhyIHBvc3QgZXJyb3JcIiwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvUG9sbCgpIHtcbiAgICBkZWJ1ZyhcInhociBwb2xsXCIpO1xuICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJlcS5vbihcImRhdGFcIiwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgc2VsZi5vbkRhdGEoZGF0YSk7XG4gICAgfSk7XG4gICAgcmVxLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoXCJ4aHIgcG9sbCBlcnJvclwiLCBlcnIpO1xuICAgIH0pO1xuICAgIHRoaXMucG9sbFhociA9IHJlcTtcbiAgfVxufVxuXG5jbGFzcyBSZXF1ZXN0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG5cbiAgICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgdGhpcy51cmkgPSB1cmk7XG4gICAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IG9wdHMgPSBwaWNrKFxuICAgICAgdGhpcy5vcHRzLFxuICAgICAgXCJhZ2VudFwiLFxuICAgICAgXCJlbmFibGVzWERSXCIsXG4gICAgICBcInBmeFwiLFxuICAgICAgXCJrZXlcIixcbiAgICAgIFwicGFzc3BocmFzZVwiLFxuICAgICAgXCJjZXJ0XCIsXG4gICAgICBcImNhXCIsXG4gICAgICBcImNpcGhlcnNcIixcbiAgICAgIFwicmVqZWN0VW5hdXRob3JpemVkXCJcbiAgICApO1xuICAgIG9wdHMueGRvbWFpbiA9ICEhdGhpcy5vcHRzLnhkO1xuICAgIG9wdHMueHNjaGVtZSA9ICEhdGhpcy5vcHRzLnhzO1xuXG4gICAgY29uc3QgeGhyID0gKHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRyeSB7XG4gICAgICBkZWJ1ZyhcInhociBvcGVuICVzOiAlc1wiLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpO1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5vcHRzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICBpZiAoXCJQT1NUXCIgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgLy8gaWU2IGNoZWNrXG4gICAgICBpZiAoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHIpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMub3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9O1xuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZi5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSBcIm51bWJlclwiID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZyhcInhociBkYXRhICVzXCIsIHRoaXMuZGF0YSk7XG4gICAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uU3VjY2VzcygpIHtcbiAgICB0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO1xuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EYXRhKGRhdGEpIHtcbiAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGRhdGEpO1xuICAgIHRoaXMub25TdWNjZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25FcnJvcihlcnIpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHRoaXMuY2xlYW51cCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgaG91c2UuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xlYW51cChmcm9tRXJyb3IpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHhtbGh0dHByZXF1ZXN0XG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgfVxuXG4gICAgaWYgKGZyb21FcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gICAgfVxuXG4gICAgdGhpcy54aHIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGxvYWQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25Mb2FkKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgaGFzWERSKCkge1xuICAgIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xuICB9XG5cbiAgLyoqXG4gICAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGFib3J0KCkge1xuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG59XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IHRlcm1pbmF0aW9uRXZlbnQgPSBcIm9ucGFnZWhpZGVcIiBpbiBnbG9iYWxUaGlzID8gXCJwYWdlaGlkZVwiIDogXCJ1bmxvYWRcIjtcbiAgICBhZGRFdmVudExpc3RlbmVyKHRlcm1pbmF0aW9uRXZlbnQsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCkge1xuICBmb3IgKGxldCBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuIiwiY29uc3QgVHJhbnNwb3J0ID0gcmVxdWlyZShcIi4uL3RyYW5zcG9ydFwiKTtcbmNvbnN0IHBhcnNlcXMgPSByZXF1aXJlKFwicGFyc2Vxc1wiKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgeWVhc3QgPSByZXF1aXJlKFwieWVhc3RcIik7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nXCIpO1xuXG5jbGFzcyBQb2xsaW5nIGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIFwicG9sbGluZ1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAgICogd2hlbiB0aGUgdHJhbnNwb3J0IGlzIG9wZW4uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9PcGVuKCkge1xuICAgIHRoaXMucG9sbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlcyBwb2xsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwYXVzZShvblBhdXNlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNpbmdcIjtcblxuICAgIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgZGVidWcoXCJwYXVzZWRcIik7XG4gICAgICBzZWxmLnJlYWR5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgb25QYXVzZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGxldCB0b3RhbCA9IDA7XG5cbiAgICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICB0b3RhbCsrO1xuICAgICAgICB0aGlzLm9uY2UoXCJwb2xsQ29tcGxldGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVidWcoXCJwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICB0b3RhbCsrO1xuICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWJ1ZyhcInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlXCIpO1xuICAgICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgcG9sbCgpIHtcbiAgICBkZWJ1ZyhcInBvbGxpbmdcIik7XG4gICAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmRvUG9sbCgpO1xuICAgIHRoaXMuZW1pdChcInBvbGxcIik7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EYXRhKGRhdGEpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBkZWJ1ZyhcInBvbGxpbmcgZ290IGRhdGEgJXNcIiwgZGF0YSk7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihwYWNrZXQsIGluZGV4LCB0b3RhbCkge1xuICAgICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgICAgaWYgKFwib3BlbmluZ1wiID09PSBzZWxmLnJlYWR5U3RhdGUgJiYgcGFja2V0LnR5cGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICAgIGlmIChcImNsb3NlXCIgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgICB9O1xuXG4gICAgLy8gZGVjb2RlIHBheWxvYWRcbiAgICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKS5mb3JFYWNoKGNhbGxiYWNrKTtcblxuICAgIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gICAgaWYgKFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWl0KFwicG9sbENvbXBsZXRlXCIpO1xuXG4gICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdpZ25vcmluZyBwb2xsIC0gdHJhbnNwb3J0IHN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvQ2xvc2UoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIGRlYnVnKFwid3JpdGluZyBjbG9zZSBwYWNrZXRcIik7XG4gICAgICBzZWxmLndyaXRlKFt7IHR5cGU6IFwiY2xvc2VcIiB9XSk7XG4gICAgfVxuXG4gICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIGRlYnVnKFwidHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nXCIpO1xuICAgICAgY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZVwiKTtcbiAgICAgIHRoaXMub25jZShcIm9wZW5cIiwgY2xvc2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHdyaXRlKHBhY2tldHMpIHtcbiAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCBkYXRhID0+IHtcbiAgICAgIHRoaXMuZG9Xcml0ZShkYXRhLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdXJpKCkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiO1xuICAgIGxldCBwb3J0ID0gXCJcIjtcblxuICAgIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gICAgaWYgKGZhbHNlICE9PSB0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgICBxdWVyeS5iNjQgPSAxO1xuICAgIH1cblxuICAgIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgKChcImh0dHBzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgIChcImh0dHBcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDgwKSlcbiAgICApIHtcbiAgICAgIHBvcnQgPSBcIjpcIiArIHRoaXMub3B0cy5wb3J0O1xuICAgIH1cblxuICAgIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICAgIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICB9XG5cbiAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICByZXR1cm4gKFxuICAgICAgc2NoZW1hICtcbiAgICAgIFwiOi8vXCIgK1xuICAgICAgKGlwdjYgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArXG4gICAgICBwb3J0ICtcbiAgICAgIHRoaXMub3B0cy5wYXRoICtcbiAgICAgIHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG4iLCJjb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4uL2dsb2JhbFRoaXNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJTb2NrZXQ6IGdsb2JhbFRoaXMuV2ViU29ja2V0IHx8IGdsb2JhbFRoaXMuTW96V2ViU29ja2V0LFxuICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQ6IHRydWUsXG4gIGRlZmF1bHRCaW5hcnlUeXBlOiBcImFycmF5YnVmZmVyXCJcbn07XG4iLCJjb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5jb25zdCB5ZWFzdCA9IHJlcXVpcmUoXCJ5ZWFzdFwiKTtcbmNvbnN0IHsgcGljayB9ID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5jb25zdCB7XG4gIFdlYlNvY2tldCxcbiAgdXNpbmdCcm93c2VyV2ViU29ja2V0LFxuICBkZWZhdWx0QmluYXJ5VHlwZVxufSA9IHJlcXVpcmUoXCIuL3dlYnNvY2tldC1jb25zdHJ1Y3RvclwiKTtcblxuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldFwiKTtcblxuLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG5jb25zdCBpc1JlYWN0TmF0aXZlID1cbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwic3RyaW5nXCIgJiZcbiAgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gXCJyZWFjdG5hdGl2ZVwiO1xuXG5jbGFzcyBXUyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gIC8qKlxuICAgKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9ICFvcHRzLmZvcmNlQmFzZTY0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIFwid2Vic29ja2V0XCI7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgc29ja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvT3BlbigpIHtcbiAgICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmkgPSB0aGlzLnVyaSgpO1xuICAgIGNvbnN0IHByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG5cbiAgICAvLyBSZWFjdCBOYXRpdmUgb25seSBzdXBwb3J0cyB0aGUgJ2hlYWRlcnMnIG9wdGlvbiwgYW5kIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIGFueXRoaW5nIGVsc2UgaXMgcGFzc2VkXG4gICAgY29uc3Qgb3B0cyA9IGlzUmVhY3ROYXRpdmVcbiAgICAgID8ge31cbiAgICAgIDogcGljayhcbiAgICAgICAgICB0aGlzLm9wdHMsXG4gICAgICAgICAgXCJhZ2VudFwiLFxuICAgICAgICAgIFwicGVyTWVzc2FnZURlZmxhdGVcIixcbiAgICAgICAgICBcInBmeFwiLFxuICAgICAgICAgIFwia2V5XCIsXG4gICAgICAgICAgXCJwYXNzcGhyYXNlXCIsXG4gICAgICAgICAgXCJjZXJ0XCIsXG4gICAgICAgICAgXCJjYVwiLFxuICAgICAgICAgIFwiY2lwaGVyc1wiLFxuICAgICAgICAgIFwicmVqZWN0VW5hdXRob3JpemVkXCIsXG4gICAgICAgICAgXCJsb2NhbEFkZHJlc3NcIixcbiAgICAgICAgICBcInByb3RvY29sVmVyc2lvblwiLFxuICAgICAgICAgIFwib3JpZ2luXCIsXG4gICAgICAgICAgXCJtYXhQYXlsb2FkXCIsXG4gICAgICAgICAgXCJmYW1pbHlcIixcbiAgICAgICAgICBcImNoZWNrU2VydmVySWRlbnRpdHlcIlxuICAgICAgICApO1xuXG4gICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgIG9wdHMuaGVhZGVycyA9IHRoaXMub3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMud3MgPVxuICAgICAgICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIWlzUmVhY3ROYXRpdmVcbiAgICAgICAgICA/IHByb3RvY29sc1xuICAgICAgICAgICAgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgICAgOiBuZXcgV2ViU29ja2V0KHVyaSlcbiAgICAgICAgICA6IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfVxuXG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSB8fCBkZWZhdWx0QmluYXJ5VHlwZTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5vbk9wZW4oKTtcbiAgICB9O1xuICAgIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgfTtcbiAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgICB9O1xuICAgIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHNlbGYub25FcnJvcihcIndlYnNvY2tldCBlcnJvclwiLCBlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB3cml0ZShwYWNrZXRzKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gICAgbGV0IHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGwgPSB0b3RhbDtcbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgKGZ1bmN0aW9uKHBhY2tldCkge1xuICAgICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmICghdXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGxlbiA9XG4gICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGRhdGFcbiAgICAgICAgICAgICAgICAgID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSlcbiAgICAgICAgICAgICAgICAgIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLm9wdHMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh1c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGRlYnVnKFwid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudFwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KShwYWNrZXRzW2ldKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgc2VsZi5lbWl0KFwiZmx1c2hcIik7XG5cbiAgICAgIC8vIGZha2UgZHJhaW5cbiAgICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBjbG9zZVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uQ2xvc2UoKSB7XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHNvY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgICAgdGhpcy53cyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdXJpKCkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCI7XG4gICAgbGV0IHBvcnQgPSBcIlwiO1xuXG4gICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgKChcIndzc1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAgICAoXCJ3c1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKVxuICAgICkge1xuICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgfVxuXG4gICAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgICBpZiAodGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICBxdWVyeVt0aGlzLm9wdHMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgICB9XG5cbiAgICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgfVxuXG4gICAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgICBxdWVyeSA9IFwiP1wiICsgcXVlcnk7XG4gICAgfVxuXG4gICAgY29uc3QgaXB2NiA9IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgcmV0dXJuIChcbiAgICAgIHNjaGVtYSArXG4gICAgICBcIjovL1wiICtcbiAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgcG9ydCArXG4gICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICBxdWVyeVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjaGVjaygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgISFXZWJTb2NrZXQgJiZcbiAgICAgICEoXCJfX2luaXRpYWxpemVcIiBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSlcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG4iLCJtb2R1bGUuZXhwb3J0cy5waWNrID0gKG9iaiwgLi4uYXR0cikgPT4ge1xuICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGFjY1trXSA9IG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbmNvbnN0IGhhc0NPUlMgPSByZXF1aXJlKFwiaGFzLWNvcnNcIik7XG5jb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4vZ2xvYmFsVGhpc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRzKSB7XG4gIGNvbnN0IHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgY29uc3QgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgY29uc3QgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0oXG4gICAgICAgIFwiTWljcm9zb2Z0LlhNTEhUVFBcIlxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59O1xuIiwiY29uc3QgUEFDS0VUX1RZUEVTID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gbm8gTWFwID0gbm8gcG9seWZpbGxcblBBQ0tFVF9UWVBFU1tcIm9wZW5cIl0gPSBcIjBcIjtcblBBQ0tFVF9UWVBFU1tcImNsb3NlXCJdID0gXCIxXCI7XG5QQUNLRVRfVFlQRVNbXCJwaW5nXCJdID0gXCIyXCI7XG5QQUNLRVRfVFlQRVNbXCJwb25nXCJdID0gXCIzXCI7XG5QQUNLRVRfVFlQRVNbXCJtZXNzYWdlXCJdID0gXCI0XCI7XG5QQUNLRVRfVFlQRVNbXCJ1cGdyYWRlXCJdID0gXCI1XCI7XG5QQUNLRVRfVFlQRVNbXCJub29wXCJdID0gXCI2XCI7XG5cbmNvbnN0IFBBQ0tFVF9UWVBFU19SRVZFUlNFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbk9iamVjdC5rZXlzKFBBQ0tFVF9UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICBQQUNLRVRfVFlQRVNfUkVWRVJTRVtQQUNLRVRfVFlQRVNba2V5XV0gPSBrZXk7XG59KTtcblxuY29uc3QgRVJST1JfUEFDS0VUID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBBQ0tFVF9UWVBFUyxcbiAgUEFDS0VUX1RZUEVTX1JFVkVSU0UsXG4gIEVSUk9SX1BBQ0tFVFxufTtcbiIsImNvbnN0IHsgUEFDS0VUX1RZUEVTX1JFVkVSU0UsIEVSUk9SX1BBQ0tFVCB9ID0gcmVxdWlyZShcIi4vY29tbW9uc1wiKTtcblxuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5cbmxldCBiYXNlNjRkZWNvZGVyO1xuaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlcikge1xuICBiYXNlNjRkZWNvZGVyID0gcmVxdWlyZShcImJhc2U2NC1hcnJheWJ1ZmZlclwiKTtcbn1cblxuY29uc3QgZGVjb2RlUGFja2V0ID0gKGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpID0+IHtcbiAgaWYgKHR5cGVvZiBlbmNvZGVkUGFja2V0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgZGF0YTogbWFwQmluYXJ5KGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpXG4gICAgfTtcbiAgfVxuICBjb25zdCB0eXBlID0gZW5jb2RlZFBhY2tldC5jaGFyQXQoMCk7XG4gIGlmICh0eXBlID09PSBcImJcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgIGRhdGE6IGRlY29kZUJhc2U2NFBhY2tldChlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKSwgYmluYXJ5VHlwZSlcbiAgICB9O1xuICB9XG4gIGNvbnN0IHBhY2tldFR5cGUgPSBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXTtcbiAgaWYgKCFwYWNrZXRUeXBlKSB7XG4gICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgfVxuICByZXR1cm4gZW5jb2RlZFBhY2tldC5sZW5ndGggPiAxXG4gICAgPyB7XG4gICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdLFxuICAgICAgICBkYXRhOiBlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKVxuICAgICAgfVxuICAgIDoge1xuICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXVxuICAgICAgfTtcbn07XG5cbmNvbnN0IGRlY29kZUJhc2U2NFBhY2tldCA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gIGlmIChiYXNlNjRkZWNvZGVyKSB7XG4gICAgY29uc3QgZGVjb2RlZCA9IGJhc2U2NGRlY29kZXIuZGVjb2RlKGRhdGEpO1xuICAgIHJldHVybiBtYXBCaW5hcnkoZGVjb2RlZCwgYmluYXJ5VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgYmFzZTY0OiB0cnVlLCBkYXRhIH07IC8vIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnNcbiAgfVxufTtcblxuY29uc3QgbWFwQmluYXJ5ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgc3dpdGNoIChiaW5hcnlUeXBlKSB7XG4gICAgY2FzZSBcImJsb2JcIjpcbiAgICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgQmxvYihbZGF0YV0pIDogZGF0YTtcbiAgICBjYXNlIFwiYXJyYXlidWZmZXJcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGRhdGE7IC8vIGFzc3VtaW5nIHRoZSBkYXRhIGlzIGFscmVhZHkgYW4gQXJyYXlCdWZmZXJcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVQYWNrZXQ7XG4iLCJjb25zdCB7IFBBQ0tFVF9UWVBFUyB9ID0gcmVxdWlyZShcIi4vY29tbW9uc1wiKTtcblxuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPVxuICB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcblxuLy8gQXJyYXlCdWZmZXIuaXNWaWV3IG1ldGhvZCBpcyBub3QgZGVmaW5lZCBpbiBJRTEwXG5jb25zdCBpc1ZpZXcgPSBvYmogPT4ge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxuICAgIDogb2JqICYmIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5cbmNvbnN0IGVuY29kZVBhY2tldCA9ICh7IHR5cGUsIGRhdGEgfSwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSA9PiB7XG4gIGlmICh3aXRoTmF0aXZlQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KGRhdGEsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgd2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmXG4gICAgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcoZGF0YSkpXG4gICkge1xuICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEgOiBkYXRhLmJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQobmV3IEJsb2IoW2RhdGFdKSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICAvLyBwbGFpbiBzdHJpbmdcbiAgcmV0dXJuIGNhbGxiYWNrKFBBQ0tFVF9UWVBFU1t0eXBlXSArIChkYXRhIHx8IFwiXCIpKTtcbn07XG5cbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgIGNhbGxiYWNrKFwiYlwiICsgY29udGVudCk7XG4gIH07XG4gIHJldHVybiBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZGF0YSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZVBhY2tldDtcbiIsImNvbnN0IGVuY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2VuY29kZVBhY2tldFwiKTtcbmNvbnN0IGRlY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2RlY29kZVBhY2tldFwiKTtcblxuY29uc3QgU0VQQVJBVE9SID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMCk7IC8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZWxpbWl0ZXIjQVNDSUlfZGVsaW1pdGVkX3RleHRcblxuY29uc3QgZW5jb2RlUGF5bG9hZCA9IChwYWNrZXRzLCBjYWxsYmFjaykgPT4ge1xuICAvLyBzb21lIHBhY2tldHMgbWF5IGJlIGFkZGVkIHRvIHRoZSBhcnJheSB3aGlsZSBlbmNvZGluZywgc28gdGhlIGluaXRpYWwgbGVuZ3RoIG11c3QgYmUgc2F2ZWRcbiAgY29uc3QgbGVuZ3RoID0gcGFja2V0cy5sZW5ndGg7XG4gIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG5cbiAgcGFja2V0cy5mb3JFYWNoKChwYWNrZXQsIGkpID0+IHtcbiAgICAvLyBmb3JjZSBiYXNlNjQgZW5jb2RpbmcgZm9yIGJpbmFyeSBwYWNrZXRzXG4gICAgZW5jb2RlUGFja2V0KHBhY2tldCwgZmFsc2UsIGVuY29kZWRQYWNrZXQgPT4ge1xuICAgICAgZW5jb2RlZFBhY2tldHNbaV0gPSBlbmNvZGVkUGFja2V0O1xuICAgICAgaWYgKCsrY291bnQgPT09IGxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhlbmNvZGVkUGFja2V0cy5qb2luKFNFUEFSQVRPUikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGRlY29kZVBheWxvYWQgPSAoZW5jb2RlZFBheWxvYWQsIGJpbmFyeVR5cGUpID0+IHtcbiAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBlbmNvZGVkUGF5bG9hZC5zcGxpdChTRVBBUkFUT1IpO1xuICBjb25zdCBwYWNrZXRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZWNvZGVkUGFja2V0ID0gZGVjb2RlUGFja2V0KGVuY29kZWRQYWNrZXRzW2ldLCBiaW5hcnlUeXBlKTtcbiAgICBwYWNrZXRzLnB1c2goZGVjb2RlZFBhY2tldCk7XG4gICAgaWYgKGRlY29kZWRQYWNrZXQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhY2tldHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcHJvdG9jb2w6IDQsXG4gIGVuY29kZVBhY2tldCxcbiAgZW5jb2RlUGF5bG9hZCxcbiAgZGVjb2RlUGFja2V0LFxuICBkZWNvZGVQYXlsb2FkXG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIvKipcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICB2YXIgc3RyID0gJyc7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xuICB2YXIgcXJ5ID0ge307XG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICB9XG4gIHJldHVybiBxcnk7XG59O1xuIiwiLyoqXG4gKiBQYXJzZXMgYW4gVVJJXG4gKlxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XG5cbnZhciBwYXJ0cyA9IFtcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XG4gICAgdmFyIHNyYyA9IHN0cixcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxuICAgICAgICB1cmkgPSB7fSxcbiAgICAgICAgaSA9IDE0O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcbiAgICB9XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xuICAgIH1cblxuICAgIHVyaS5wYXRoTmFtZXMgPSBwYXRoTmFtZXModXJpLCB1cmlbJ3BhdGgnXSk7XG4gICAgdXJpLnF1ZXJ5S2V5ID0gcXVlcnlLZXkodXJpLCB1cmlbJ3F1ZXJ5J10pO1xuXG4gICAgcmV0dXJuIHVyaTtcbn07XG5cbmZ1bmN0aW9uIHBhdGhOYW1lcyhvYmosIHBhdGgpIHtcbiAgICB2YXIgcmVneCA9IC9cXC97Miw5fS9nLFxuICAgICAgICBuYW1lcyA9IHBhdGgucmVwbGFjZShyZWd4LCBcIi9cIikuc3BsaXQoXCIvXCIpO1xuXG4gICAgaWYgKHBhdGguc3Vic3RyKDAsIDEpID09ICcvJyB8fCBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuYW1lcy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICAgIGlmIChwYXRoLnN1YnN0cihwYXRoLmxlbmd0aCAtIDEsIDEpID09ICcvJykge1xuICAgICAgICBuYW1lcy5zcGxpY2UobmFtZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVzO1xufVxuXG5mdW5jdGlvbiBxdWVyeUtleSh1cmksIHF1ZXJ5KSB7XG4gICAgdmFyIGRhdGEgPSB7fTtcblxuICAgIHF1ZXJ5LnJlcGxhY2UoLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuICAgICAgICBpZiAoJDEpIHtcbiAgICAgICAgICAgIGRhdGFbJDFdID0gJDI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNvY2tldCA9IGV4cG9ydHMuaW8gPSBleHBvcnRzLk1hbmFnZXIgPSBleHBvcnRzLnByb3RvY29sID0gdm9pZCAwO1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwiLi91cmxcIik7XG5jb25zdCBtYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9tYW5hZ2VyXCIpO1xuY29uc3Qgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb2NrZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvY2tldF8xLlNvY2tldDsgfSB9KTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudFwiKTtcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cbmNvbnN0IGNhY2hlID0gKGV4cG9ydHMubWFuYWdlcnMgPSB7fSk7XG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBwYXJzZWQgPSB1cmxfMS51cmwodXJpLCBvcHRzLnBhdGgpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gICAgY29uc3QgaWQgPSBwYXJzZWQuaWQ7XG4gICAgY29uc3QgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF1bXCJuc3BzXCJdO1xuICAgIGNvbnN0IG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8XG4gICAgICAgIG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fFxuICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHxcbiAgICAgICAgc2FtZU5hbWVzcGFjZTtcbiAgICBsZXQgaW87XG4gICAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgZGVidWcoXCJpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgIGlvID0gbmV3IG1hbmFnZXJfMS5NYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgZGVidWcoXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBuZXcgbWFuYWdlcl8xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xuICAgIH1cbiAgICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbmV4cG9ydHMuaW8gPSBsb29rdXA7XG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwcm90b2NvbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc29ja2V0X2lvX3BhcnNlcl8xLnByb3RvY29sOyB9IH0pO1xuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbWFuYWdlcl8yID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hbmFnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hbmFnZXJfMi5NYW5hZ2VyOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hbmFnZXIgPSB2b2lkIDA7XG5jb25zdCBlaW8gPSByZXF1aXJlKFwiZW5naW5lLmlvLWNsaWVudFwiKTtcbmNvbnN0IHNvY2tldF8xID0gcmVxdWlyZShcIi4vc29ja2V0XCIpO1xuY29uc3QgRW1pdHRlciA9IHJlcXVpcmUoXCJjb21wb25lbnQtZW1pdHRlclwiKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO1xuY29uc3Qgb25fMSA9IHJlcXVpcmUoXCIuL29uXCIpO1xuY29uc3QgQmFja29mZiA9IHJlcXVpcmUoXCJiYWNrbzJcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6bWFuYWdlclwiKTtcbmNsYXNzIE1hbmFnZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uc3BzID0ge307XG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xuICAgICAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAgIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIjtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gICAgICAgIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgICAgICAgICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgICAgICAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgY29uc3QgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gICAgICAgIHRoaXMuX2F1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb24odikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1pbih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJhbmRvbWl6YXRpb25GYWN0b3Iodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEppdHRlcih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRpbWVvdXQodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAgICAgKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb3Blbihmbikge1xuICAgICAgICBkZWJ1ZyhcInJlYWR5U3RhdGUgJXNcIiwgdGhpcy5fcmVhZHlTdGF0ZSk7XG4gICAgICAgIGlmICh+dGhpcy5fcmVhZHlTdGF0ZS5pbmRleE9mKFwib3BlblwiKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBkZWJ1ZyhcIm9wZW5pbmcgJXNcIiwgdGhpcy51cmkpO1xuICAgICAgICB0aGlzLmVuZ2luZSA9IGVpbyh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICAvLyBlbWl0IGBvcGVuYFxuICAgICAgICBjb25zdCBvcGVuU3ViRGVzdHJveSA9IG9uXzEub24oc29ja2V0LCBcIm9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcbiAgICAgICAgICAgIGZuICYmIGZuKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlbWl0IGBlcnJvcmBcbiAgICAgICAgY29uc3QgZXJyb3JTdWIgPSBvbl8xLm9uKHNvY2tldCwgXCJlcnJvclwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhcImVycm9yXCIpO1xuICAgICAgICAgICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgICAgICAgICBzZWxmLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICAgICAgICAgIGRlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZFwiLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTsgLy8gcHJldmVudHMgYSByYWNlIGNvbmRpdGlvbiB3aXRoIHRoZSAnb3BlbicgZXZlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldCB0aW1lclxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdChcImVycm9yXCIsIG5ldyBFcnJvcihcInRpbWVvdXRcIikpO1xuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnMucHVzaChvcGVuU3ViRGVzdHJveSk7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBvcGVuKClcbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW4oZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcIm9wZW5cIik7XG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICBzdXBlci5lbWl0KFwib3BlblwiKTtcbiAgICAgICAgLy8gYWRkIG5ldyBzdWJzXG4gICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICAgICAgICB0aGlzLnN1YnMucHVzaChvbl8xLm9uKHNvY2tldCwgXCJwaW5nXCIsIHRoaXMub25waW5nLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJlcnJvclwiLCB0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksIG9uXzEub24oc29ja2V0LCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKSwgb25fMS5vbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25waW5nKCkge1xuICAgICAgICBzdXBlci5lbWl0KFwicGluZ1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGVjb2RlZChwYWNrZXQpIHtcbiAgICAgICAgc3VwZXIuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGRlYnVnKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgc3VwZXIuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTb2NrZXR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNvY2tldChuc3AsIG9wdHMpIHtcbiAgICAgICAgbGV0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICBpZiAoIXNvY2tldCkge1xuICAgICAgICAgICAgc29ja2V0ID0gbmV3IHNvY2tldF8xLlNvY2tldCh0aGlzLCBuc3AsIG9wdHMpO1xuICAgICAgICAgICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzb2NrZXQgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc29ja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVzdHJveShzb2NrZXQpIHtcbiAgICAgICAgY29uc3QgbnNwcyA9IE9iamVjdC5rZXlzKHRoaXMubnNwcyk7XG4gICAgICAgIGZvciAoY29uc3QgbnNwIG9mIG5zcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICAgICAgaWYgKHNvY2tldC5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcInNvY2tldCAlcyBpcyBzdGlsbCBhY3RpdmUsIHNraXBwaW5nIGNsb3NlXCIsIG5zcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGRlYnVnKFwid3JpdGluZyBwYWNrZXQgJWpcIiwgcGFja2V0KTtcbiAgICAgICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW4gdXAgdHJhbnNwb3J0IHN1YnNjcmlwdGlvbnMgYW5kIHBhY2tldCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIGRlYnVnKFwiY2xlYW51cFwiKTtcbiAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuc3Vicy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jbG9zZSgpIHtcbiAgICAgICAgZGVidWcoXCJkaXNjb25uZWN0XCIpO1xuICAgICAgICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLl9yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAvLyBgb25jbG9zZWAgd2lsbCBub3QgZmlyZSBiZWNhdXNlXG4gICAgICAgICAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSlcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLmNsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjbG9zZSgpXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwib25jbG9zZVwiKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgc3VwZXIuZW1pdChcImNsb3NlXCIsIHJlYXNvbik7XG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZWNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcgfHwgdGhpcy5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBmYWlsZWRcIik7XG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgICAgICAgICAgZGVidWcoXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcIiwgZGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiYXR0ZW1wdGluZyByZWNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcInJlY29ubmVjdF9hdHRlbXB0XCIsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNlbGYub3BlbigoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGF0dGVtcHQgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwicmVjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25yZWNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnN0IGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgc3VwZXIuZW1pdChcInJlY29ubmVjdFwiLCBhdHRlbXB0KTtcbiAgICB9XG59XG5leHBvcnRzLk1hbmFnZXIgPSBNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uID0gdm9pZCAwO1xuZnVuY3Rpb24gb24ob2JqLCBldiwgZm4pIHtcbiAgICBvYmoub24oZXYsIGZuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgb2JqLm9mZihldiwgZm4pO1xuICAgIH07XG59XG5leHBvcnRzLm9uID0gb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0ID0gdm9pZCAwO1xuY29uc3Qgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3Qgb25fMSA9IHJlcXVpcmUoXCIuL29uXCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50OnNvY2tldFwiKTtcbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKi9cbmNvbnN0IFJFU0VSVkVEX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNvbm5lY3Q6IDEsXG4gICAgY29ubmVjdF9lcnJvcjogMSxcbiAgICBkaXNjb25uZWN0OiAxLFxuICAgIGRpc2Nvbm5lY3Rpbmc6IDEsXG4gICAgLy8gRXZlbnRFbWl0dGVyIHJlc2VydmVkIGV2ZW50czogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNfZXZlbnRfbmV3bGlzdGVuZXJcbiAgICBuZXdMaXN0ZW5lcjogMSxcbiAgICByZW1vdmVMaXN0ZW5lcjogMSxcbn0pO1xuY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW8sIG5zcCwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xuICAgICAgICB0aGlzLm5zcCA9IG5zcDtcbiAgICAgICAgdGhpcy5pZHMgPSAwO1xuICAgICAgICB0aGlzLmFja3MgPSB7fTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5hdXRoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGggPSBvcHRzLmF1dGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgb25fMS5vbihpbywgXCJvcGVuXCIsIHRoaXMub25vcGVuLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJwYWNrZXRcIiwgdGhpcy5vbnBhY2tldC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uXzEub24oaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFNvY2tldCB3aWxsIHRyeSB0byByZWNvbm5lY3Qgd2hlbiBpdHMgTWFuYWdlciBjb25uZWN0cyBvciByZWNvbm5lY3RzXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdWJFdmVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlvW1wiX3JlY29ubmVjdGluZ1wiXSlcbiAgICAgICAgICAgIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMuaW8uX3JlYWR5U3RhdGUpXG4gICAgICAgICAgICB0aGlzLm9ub3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNvbm5lY3QoKVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VuZCguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChcIm1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGBlbWl0YC5cbiAgICAgKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldiAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZW1pdChldiwgLi4uYXJncykge1xuICAgICAgICBpZiAoUkVTRVJWRURfRVZFTlRTLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBldiArICdcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnVuc2hpZnQoZXYpO1xuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVCxcbiAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgIH07XG4gICAgICAgIHBhY2tldC5vcHRpb25zID0ge307XG4gICAgICAgIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gdGhpcy5mbGFncy5jb21wcmVzcyAhPT0gZmFsc2U7XG4gICAgICAgIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZFwiLCB0aGlzLmlkcyk7XG4gICAgICAgICAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNUcmFuc3BvcnRXcml0YWJsZSA9IHRoaXMuaW8uZW5naW5lICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydC53cml0YWJsZTtcbiAgICAgICAgY29uc3QgZGlzY2FyZFBhY2tldCA9IHRoaXMuZmxhZ3Mudm9sYXRpbGUgJiYgKCFpc1RyYW5zcG9ydFdyaXRhYmxlIHx8ICF0aGlzLmNvbm5lY3RlZCk7XG4gICAgICAgIGlmIChkaXNjYXJkUGFja2V0KSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImRpc2NhcmQgcGFja2V0IGFzIHRoZSB0cmFuc3BvcnQgaXMgbm90IGN1cnJlbnRseSB3cml0YWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwYWNrZXQocGFja2V0KSB7XG4gICAgICAgIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgICAgICAgdGhpcy5pby5fcGFja2V0KHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ub3BlbigpIHtcbiAgICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmdcIik7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdXRoID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5hdXRoKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNULCBkYXRhIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGE6IHRoaXMuYXV0aCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgb3IgbWFuYWdlciBgZXJyb3JgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVyclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgc3VwZXIuZW1pdChcImNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFzb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwiY2xvc2UgKCVzKVwiLCByZWFzb24pO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICBzdXBlci5lbWl0KFwiZGlzY29ubmVjdFwiLCByZWFzb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgICAgICAgaWYgKCFzYW1lTmFtZXNwYWNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICYmIHBhY2tldC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhY2tldC5kYXRhLnNpZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNvbm5lY3QoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImNvbm5lY3RfZXJyb3JcIiwgbmV3IEVycm9yKFwiSXQgc2VlbXMgeW91IGFyZSB0cnlpbmcgdG8gcmVhY2ggYSBTb2NrZXQuSU8gc2VydmVyIGluIHYyLnggd2l0aCBhIHYzLnggY2xpZW50LCBidXQgdGhleSBhcmUgbm90IGNvbXBhdGlibGUgKG1vcmUgaW5mb3JtYXRpb24gaGVyZTogaHR0cHM6Ly9zb2NrZXQuaW8vZG9jcy92My9taWdyYXRpbmctZnJvbS0yLXgtdG8tMy0wLylcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IocGFja2V0LmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGVyci5kYXRhID0gcGFja2V0LmRhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIGV2ZW50ICVqXCIsIGFyZ3MpO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWNrKGlkKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgc2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VudCA9IHRydWU7XG4gICAgICAgICAgICBkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsIGFyZ3MpO1xuICAgICAgICAgICAgc2VsZi5wYWNrZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkFDSyxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uYWNrKHBhY2tldCkge1xuICAgICAgICBjb25zdCBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjaykge1xuICAgICAgICAgICAgZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYmFkIGFjayAlc1wiLCBwYWNrZXQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNvbm5lY3QoaWQpIHtcbiAgICAgICAgZGVidWcoXCJzb2NrZXQgY29ubmVjdGVkIHdpdGggaWQgJXNcIiwgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgc3VwZXIuZW1pdChcImNvbm5lY3RcIik7XG4gICAgICAgIHRoaXMuZW1pdEJ1ZmZlcmVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGVtaXRCdWZmZXJlZCgpIHtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLmZvckVhY2goKGFyZ3MpID0+IHRoaXMuZW1pdEV2ZW50KGFyZ3MpKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKChwYWNrZXQpID0+IHRoaXMucGFja2V0KHBhY2tldCkpO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGlzY29ubmVjdCgpIHtcbiAgICAgICAgZGVidWcoXCJzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpXCIsIHRoaXMubnNwKTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMub25jbG9zZShcImlvIHNlcnZlciBkaXNjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICAgICAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gICAgICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpIHtcbiAgICAgICAgICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pb1tcIl9kZXN0cm95XCJdKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgZGVidWcoXCJwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7XG4gICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkRJU0NPTk5FQ1QgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgLy8gZmlyZSBldmVudHNcbiAgICAgICAgICAgIHRoaXMub25jbG9zZShcImlvIGNsaWVudCBkaXNjb25uZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgZGlzY29ubmVjdCgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wcmVzcyAtIGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbXByZXNzKGNvbXByZXNzKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGV2ZW50IG1lc3NhZ2Ugd2lsbCBiZSBkcm9wcGVkIHdoZW4gdGhpcyBzb2NrZXQgaXMgbm90XG4gICAgICogcmVhZHkgdG8gc2VuZCBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IHZvbGF0aWxlKCkge1xuICAgICAgICB0aGlzLmZsYWdzLnZvbGF0aWxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvbkFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay4gVGhlIGxpc3RlbmVyIGlzIGFkZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3RlbmVycyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwcmVwZW5kQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb2ZmQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5fYW55TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRoYXQgYXJlIGxpc3RlbmluZyBmb3IgYW55IGV2ZW50IHRoYXQgaXMgc3BlY2lmaWVkLiBUaGlzIGFycmF5IGNhbiBiZSBtYW5pcHVsYXRlZCxcbiAgICAgKiBlLmcuIHRvIHJlbW92ZSBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlzdGVuZXJzQW55KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuU29ja2V0ID0gU29ja2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVybCA9IHZvaWQgMDtcbmNvbnN0IHBhcnNldXJpID0gcmVxdWlyZShcInBhcnNldXJpXCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50OnVybFwiKTtcbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0gdXJpIC0gdXJsXG4gKiBAcGFyYW0gcGF0aCAtIHRoZSByZXF1ZXN0IHBhdGggb2YgdGhlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSBsb2MgLSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXJsKHVyaSwgcGF0aCA9IFwiXCIsIGxvYykge1xuICAgIGxldCBvYmogPSB1cmk7XG4gICAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBsb2NhdGlvbik7XG4gICAgaWYgKG51bGwgPT0gdXJpKVxuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2MuaG9zdDtcbiAgICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInByb3RvY29sLWxlc3MgdXJsICVzXCIsIHVyaSk7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVyaSA9IFwiaHR0cHM6Ly9cIiArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBwYXJzZVxuICAgICAgICBkZWJ1ZyhcInBhcnNlICVzXCIsIHVyaSk7XG4gICAgICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICAgIGlmICghb2JqLnBvcnQpIHtcbiAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiODBcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI0NDNcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvYmoucGF0aCA9IG9iai5wYXRoIHx8IFwiL1wiO1xuICAgIGNvbnN0IGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgY29uc3QgaG9zdCA9IGlwdjYgPyBcIltcIiArIG9iai5ob3N0ICsgXCJdXCIgOiBvYmouaG9zdDtcbiAgICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gICAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgXCI6Ly9cIiArIGhvc3QgKyBcIjpcIiArIG9iai5wb3J0ICsgcGF0aDtcbiAgICAvLyBkZWZpbmUgaHJlZlxuICAgIG9iai5ocmVmID1cbiAgICAgICAgb2JqLnByb3RvY29sICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgaG9zdCArXG4gICAgICAgICAgICAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtcbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0cy51cmwgPSB1cmw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBleHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gdm9pZCAwO1xuY29uc3QgaXNfYmluYXJ5XzEgPSByZXF1aXJlKFwiLi9pcy1iaW5hcnlcIik7XG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIHwgQmxvYiB8IEZpbGUgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0KSB7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgIGNvbnN0IHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgICBjb25zdCBwYWNrID0gcGFja2V0O1xuICAgIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICAgIHJldHVybiB7IHBhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVycyB9O1xufVxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGRlY29uc3RydWN0UGFja2V0O1xuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChpc19iaW5hcnlfMS5pc0JpbmFyeShkYXRhKSkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiByZWNvbnN0cnVjdFBhY2tldChwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gICAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gICAgcmV0dXJuIHBhY2tldDtcbn1cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSByZWNvbnN0cnVjdFBhY2tldDtcbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gICAgaWYgKCFkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgICAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVjb2RlciA9IGV4cG9ydHMuRW5jb2RlciA9IGV4cG9ydHMuUGFja2V0VHlwZSA9IGV4cG9ydHMucHJvdG9jb2wgPSB2b2lkIDA7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgYmluYXJ5XzEgPSByZXF1aXJlKFwiLi9iaW5hcnlcIik7XG5jb25zdCBpc19iaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2lzLWJpbmFyeVwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMucHJvdG9jb2wgPSA1O1xudmFyIFBhY2tldFR5cGU7XG4oZnVuY3Rpb24gKFBhY2tldFR5cGUpIHtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUXCJdID0gMF0gPSBcIkNPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJESVNDT05ORUNUXCJdID0gMV0gPSBcIkRJU0NPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJFVkVOVFwiXSA9IDJdID0gXCJFVkVOVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkFDS1wiXSA9IDNdID0gXCJBQ0tcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUX0VSUk9SXCJdID0gNF0gPSBcIkNPTk5FQ1RfRVJST1JcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfRVZFTlRcIl0gPSA1XSA9IFwiQklOQVJZX0VWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQklOQVJZX0FDS1wiXSA9IDZdID0gXCJCSU5BUllfQUNLXCI7XG59KShQYWNrZXRUeXBlID0gZXhwb3J0cy5QYWNrZXRUeXBlIHx8IChleHBvcnRzLlBhY2tldFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKi9cbmNsYXNzIEVuY29kZXIge1xuICAgIC8qKlxuICAgICAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICAgICAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAgICAgKi9cbiAgICBlbmNvZGUob2JqKSB7XG4gICAgICAgIGRlYnVnKFwiZW5jb2RpbmcgcGFja2V0ICVqXCIsIG9iaik7XG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVCB8fCBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5BQ0spIHtcbiAgICAgICAgICAgIGlmIChpc19iaW5hcnlfMS5oYXNCaW5hcnkob2JqKSkge1xuICAgICAgICAgICAgICAgIG9iai50eXBlID1cbiAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gUGFja2V0VHlwZS5CSU5BUllfRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogUGFja2V0VHlwZS5CSU5BUllfQUNLO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZUFzQmluYXJ5KG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmVuY29kZUFzU3RyaW5nKG9iaildO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAgICAgKi9cbiAgICBlbmNvZGVBc1N0cmluZyhvYmopIHtcbiAgICAgICAgLy8gZmlyc3QgaXMgdHlwZVxuICAgICAgICBsZXQgc3RyID0gXCJcIiArIG9iai50eXBlO1xuICAgICAgICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgICAgICAgaWYgKG9iai50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArIFwiLVwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgICAgICAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gICAgICAgIGlmIChvYmoubnNwICYmIFwiL1wiICE9PSBvYmoubnNwKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLm5zcCArIFwiLFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICAgICAgICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmouaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8ganNvbiBkYXRhXG4gICAgICAgIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgICAgICAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZW5jb2RlZCAlaiBhcyAlc1wiLCBvYmosIHN0cik7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICAgICAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAgICAgKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAgICAgKi9cbiAgICBlbmNvZGVBc0JpbmFyeShvYmopIHtcbiAgICAgICAgY29uc3QgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnlfMS5kZWNvbnN0cnVjdFBhY2tldChvYmopO1xuICAgICAgICBjb25zdCBwYWNrID0gdGhpcy5lbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgICAgICBjb25zdCBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcbiAgICAgICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgICAgICByZXR1cm4gYnVmZmVyczsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gICAgfVxufVxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2Rlcjtcbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICovXG5jbGFzcyBEZWNvZGVyIGV4dGVuZHMgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYW4gZW5jb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAgICAgKi9cbiAgICBhZGQob2JqKSB7XG4gICAgICAgIGxldCBwYWNrZXQ7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYWNrZXQgPSB0aGlzLmRlY29kZVN0cmluZyhvYmopO1xuICAgICAgICAgICAgaWYgKHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgICAgIHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgICAgICAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0LmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNfYmluYXJ5XzEuaXNCaW5hcnkob2JqKSB8fCBvYmouYmFzZTY0KSB7XG4gICAgICAgICAgICAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiICsgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAgICAgKi9cbiAgICBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgLy8gbG9vayB1cCB0eXBlXG4gICAgICAgIGNvbnN0IHAgPSB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChQYWNrZXRUeXBlW3AudHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBwYWNrZXQgdHlwZSBcIiArIHAudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICAgICAgICBpZiAocC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgcC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSBcIi1cIiAmJiBpICE9IHN0ci5sZW5ndGgpIHsgfVxuICAgICAgICAgICAgY29uc3QgYnVmID0gc3RyLnN1YnN0cmluZyhzdGFydCwgaSk7XG4gICAgICAgICAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBhdHRhY2htZW50c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICAgICAgICBpZiAoXCIvXCIgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChcIixcIiA9PT0gYylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5uc3AgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHAubnNwID0gXCIvXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBpZFxuICAgICAgICBjb25zdCBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gICAgICAgIGlmIChcIlwiICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5pZCA9IE51bWJlcihzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gICAgICAgIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICAgICAgICAgIGlmIChEZWNvZGVyLmlzUGF5bG9hZFZhbGlkKHAudHlwZSwgcGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXlsb2FkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZGVjb2RlZCAlcyBhcyAlalwiLCBzdHIsIHApO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgc3RhdGljIGlzUGF5bG9hZFZhbGlkKHR5cGUsIHBheWxvYWQpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bG9hZCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXlsb2FkID09PSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJiBwYXlsb2FkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmluYXJ5UmVjb25zdHJ1Y3RvciB7XG4gICAgY29uc3RydWN0b3IocGFja2V0KSB7XG4gICAgICAgIHRoaXMucGFja2V0ID0gcGFja2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAgICAgKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICAgICAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gICAgICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgdGFrZUJpbmFyeURhdGEoYmluRGF0YSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgICAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldCA9IGJpbmFyeV8xLnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gICAgICovXG4gICAgZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQmluYXJ5ID0gZXhwb3J0cy5pc0JpbmFyeSA9IHZvaWQgMDtcbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNWaWV3ID0gKG9iaikgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxuICAgICAgICA6IG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEZpbGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gXCJbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl1cIik7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBCdWZmZXIsIGFuIEFycmF5QnVmZmVyLCBhIEJsb2Igb3IgYSBGaWxlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICAgIHJldHVybiAoKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKTtcbn1cbmV4cG9ydHMuaXNCaW5hcnkgPSBpc0JpbmFyeTtcbmZ1bmN0aW9uIGhhc0JpbmFyeShvYmosIHRvSlNPTikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNCaW5hcnkob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9iai50b0pTT04gJiZcbiAgICAgICAgdHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaGFzQmluYXJ5ID0gaGFzQmluYXJ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiaW1wb3J0IFNxdWFyZSBmcm9tIFwiLi9zcXVhcmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKHAxLCBwMikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSA5O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gOTtcclxuICAgICAgICB0aGlzLnAxID0gcDE7XHJcbiAgICAgICAgdGhpcy5wMiA9IHAyXHJcbiAgICAgICAgdGhpcy5ncmlkID0gQm9hcmQubWFrZUdyaWQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMud2lubmVyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51dGlsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBsYXllcnMocGxheWVyMSwgcDFQb3MsIHBsYXllcjIsIHAyUG9zKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwic2V0UGxheWVyc1wiKTtcclxuICAgICAgICAvKiBwMVBvcyAmIHAyUG9zID0gW3JvdywgY29sXSAqL1xyXG4gICAgICAgIGxldCBncmlkU3F1YXJlMiA9IHRoaXMuZ3JpZFtwMlBvc1swXV1bcDJQb3NbMV1dO1xyXG4gICAgICAgIGxldCBncmlkU3F1YXJlMSA9IHRoaXMuZ3JpZFtwMVBvc1swXV1bcDFQb3NbMV1dO1xyXG4gICAgICAgIGlmKCEhcGxheWVyMikge1xyXG4gICAgICAgICAgICBncmlkU3F1YXJlMi5tb2RlbCA9IFwicGVyc29uXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ3JpZFNxdWFyZTIubW9kZWwgPSBcImFpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCEhcGxheWVyMSkge1xyXG4gICAgICAgICAgICBncmlkU3F1YXJlMS5tb2RlbCA9IFwicGVyc29uXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ3JpZFNxdWFyZTEubW9kZWwgPSBcImFpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyaWRTcXVhcmUyLnBsYXllciA9IHRoaXMucDI7XHJcbiAgICAgICAgZ3JpZFNxdWFyZTEucGxheWVyID0gdGhpcy5wMTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja05laWdoYm9ycyhzcXVhcmUpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJjaGVja05laWdoYm9yc1wiKTtcclxuICAgICAgICAvKiBcclxuICAgICAgICByZXF1aXJlcyBbW251bV1bbnVtXV0gXHJcbiAgICAgICAgc3F1YXJlID0gW3Jvd0lkeCwgY29sSWR4XVxyXG4gICAgICAgICovXHJcbiAgICAgICAgbGV0IG5laWdoYm9ycyA9IFtdO1xyXG4gICAgICAgIGxldCBjb2xJZHggPSBzcXVhcmVbMV07XHJcbiAgICAgICAgbGV0IHJvd0lkeCAgPSBzcXVhcmVbMF07XHJcbiAgICAgICAgKHJvd0lkeCAtIDEgPj0gMCkgPyBuZWlnaGJvcnMucHVzaChbcm93SWR4IC0gMSwgY29sSWR4XSkgOiBuZWlnaGJvcnMucHVzaChbLTEsIC0xXSk7ICAvLyBub3J0aFxyXG4gICAgICAgIChyb3dJZHggKyAxIDw9IDgpID8gbmVpZ2hib3JzLnB1c2goW3Jvd0lkeCArIDEsIGNvbElkeF0pIDogbmVpZ2hib3JzLnB1c2goWy0xLCAtMV0pOyAgLy8gc291dGhcclxuICAgICAgICAoY29sSWR4IC0gMSA+PSAwKSA/IG5laWdoYm9ycy5wdXNoKFtyb3dJZHgsIGNvbElkeCAtIDFdKSA6IG5laWdoYm9ycy5wdXNoKFstMSwgLTFdKTsgIC8vIHdlc3RcclxuICAgICAgICAoY29sSWR4ICsgMSA8PSA4KSA/IG5laWdoYm9ycy5wdXNoKFtyb3dJZHgsIGNvbElkeCArIDFdKSA6IG5laWdoYm9ycy5wdXNoKFstMSwgLTFdKTsgIC8vIGVhc3RcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja0Nyb3NzV2FsbChuZWlnaGJvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQ3Jvc3NXYWxsKG5laWdoYm9ycykge1xyXG4gICAgICAgIHJldHVybiBuZWlnaGJvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgaXNXYWxsZWQoZGlyLCByb3dJZHgsIGNvbElkeCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImlzV2FsbGVkXCIpO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICByZXR1cm5zIHRydWUgaWYgcGF0aCBpcyBibG9ja2VkIGJ5IHdhbGxcclxuICAgICAgICAgcmV0dXJucyBmYWxzZSBpZiBwYXRoIGlzIGZyZWVcclxuICAgICAgICAqL1xyXG4gICAgICAgXHJcbiAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuZ3JpZFtyb3dJZHhdW2NvbElkeF07XHJcbiAgICAgICAgaWYoZGlyID09PSBcInVwXCIpIHtcclxuICAgICAgICAgICAgaWYoc3F1YXJlLndhbGxzLk5vcnRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgaWYoc3F1YXJlLndhbGxzLkVhc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXIgPT09IFwiZG93blwiKSB7XHJcbiAgICAgICAgICAgIGlmKHNxdWFyZS53YWxscy5Tb3V0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpciA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgaWYoc3F1YXJlLndhbGxzLldlc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYmZzKHJvb3QsIGdvYWwgPSBbXCIwMFwiLFwiMDFcIixcIjAyXCIsXCIwM1wiLFwiMDRcIixcIjA1XCIsXCIwNlwiLFwiMDdcIixcIjA4XCJdKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiYmZzXCIpO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgIHJvb3QgPT09IFtyb3dJZHgsIGNvbElkeF1cclxuXHJcbiAgICAgICAgdGhpcyBmdW5jdGlvbiBpcyBzbyBjcnVzdHkgXHJcbiAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgIGxldCBoYXNobWFwID0gbmV3IE1hcCgpOyBcclxuICAgICAgICBsZXQgUSA9IFtdOyAvL2FycmF5IG9mIFtyb3csIGNvbF1cclxuICAgICAgICBsZXQgZGlzY292ZXJlZCA9IFtdOyAvL2FycmF5IG9mIGlkXHJcbiAgICAgICAgaGFzaG1hcC5zZXQocm9vdCwgbnVsbClcclxuICAgICAgICBRLnB1c2gocm9vdCk7XHJcbiAgICAgICAgZGlzY292ZXJlZC5wdXNoKHJvb3Quam9pbihcIlwiKSk7XHJcbiAgICAgICAgd2hpbGUgKFEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgdiA9IFEuc2hpZnQoKTsgLy8gcG9zXHJcbiAgICAgICAgICAgIGxldCBpZCA9IHYuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuZ3JpZFt2WzBdXVt2WzFdXTsgLy9zcXVhcmVcclxuICAgICAgICAgICAgaWYgKGdvYWwuaW5jbHVkZXMoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IHRoaXMudHJhdmVyc2VIYXNobWFwKGhhc2htYXAsIHYuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2godi5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbdi5qb2luKFwiXCIpLCBwYXRoXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmaW5kaW5nIGFsbCBwb3NzaWJsZSBkaXJlY3Rpb25zXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoKCFzcXVhcmUud2FsbHMuTm9ydGggJiYgKHBhcnNlSW50KHZbMF0pID4gMCkpKXtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdWID0gdi5qb2luKFwiXCIpLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgbmV3VlswXSA9IHBhcnNlSW50KG5ld1ZbMF0pIC0gMTtcclxuICAgICAgICAgICAgICAgIGlkID0gbmV3Vi5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNjb3ZlcmVkLmluY2x1ZGVzKGlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyZWQucHVzaChpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgUS5wdXNoKG5ld1YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2htYXAuc2V0KG5ld1Yuam9pbihcIlwiKSwgdi5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKCFzcXVhcmUud2FsbHMuU291dGggJiYgKHBhcnNlSW50KHZbMF0pIDwgOCkpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3ViA9IHYuam9pbihcIlwiKS5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZbMF0gPSBwYXJzZUludChuZXdWWzBdKSArIDE7XHJcbiAgICAgICAgICAgICAgICBpZCA9IG5ld1Yuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZGlzY292ZXJlZC5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFEucHVzaChuZXdWKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNobWFwLnNldChuZXdWLmpvaW4oXCJcIiksIHYuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCghc3F1YXJlLndhbGxzLkVhc3QgJiYgKHBhcnNlSW50KHZbMV0pIDwgOCkpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3ViA9IHYuam9pbihcIlwiKS5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZbMV0gPSBwYXJzZUludChuZXdWWzFdKSArIDE7XHJcbiAgICAgICAgICAgICAgICBpZCA9IG5ld1Yuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZGlzY292ZXJlZC5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFEucHVzaChuZXdWKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNobWFwLnNldChuZXdWLmpvaW4oXCJcIiksIHYuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCghc3F1YXJlLndhbGxzLldlc3QgJiYgKHBhcnNlSW50KHZbMV0pID4gMCkpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3ViA9IHYuam9pbihcIlwiKS5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZbMV0gPSBwYXJzZUludChuZXdWWzFdKSAtIDE7XHJcbiAgICAgICAgICAgICAgICBpZCA9IG5ld1Yuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZGlzY292ZXJlZC5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFEucHVzaChuZXdWKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNobWFwLnNldChuZXdWLmpvaW4oXCJcIiksIHYuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYXZlcnNlSGFzaG1hcChoYXNoLCBzdGFydCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcInRyYXZlcnNlSGFzaG1hcFwiKTtcclxuICAgICAgICBsZXQgbm9kZSA9IGhhc2guZ2V0KHN0YXJ0KTtcclxuICAgICAgICBsZXQgcGF0aCA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIHBhdGgucHVzaChub2RlKVxyXG4gICAgICAgICAgICBub2RlID0gaGFzaC5nZXQobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoLnJldmVyc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIG1ha2VHcmlkKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBjb25zdCBncmlkID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IHJvd0lkeCA9IDA7IHJvd0lkeCA8IGhlaWdodDsgcm93SWR4KyspIHtcclxuICAgICAgICAgICAgZ3JpZC5wdXNoKFtdKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgd2lkdGg7IGNvbElkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3F1YXJlID0gbmV3IFNxdWFyZShjb2xJZHggLCByb3dJZHgpXHJcbiAgICAgICAgICAgICAgICBncmlkW3Jvd0lkeF0ucHVzaChzcXVhcmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBncmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc1ZhbGlkUG9zKGNvbElkeCwgcm93SWR4KSB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvbiB0byBjaGVjayB0aGUgZW5kcyBvZiB0aGUgYm9hcmRcclxuICAgICAgICBpZiAoKGNvbElkeCA8IDAgfHwgcm93SWR4IDwgMCkgfHwgKGNvbElkeCA+IDggfHwgcm93SWR4ID4gOCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZmFsc2UpIHtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBCb2FyZCBmcm9tIFwiLi9ib2FyZFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihzb2NrZXQsIHJvb20pIHtcclxuICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuICAgICAgICB0aGlzLnJvb20gPSByb29tO1xyXG4gICAgICAgIC8qIHRoaXMucGxheWVyID0gW3Jvd0lkeCwgY29sSWR4XSAqL1xyXG4gICAgICAgIHRoaXMucGxheWVyMUlEID0gcm9vbS5wbGF5ZXIxO1xyXG4gICAgICAgIHRoaXMucGxheWVyMklEID0gcm9vbS5wbGF5ZXIyO1xyXG4gICAgICAgIHRoaXMuYm9hcmQgPSBuZXcgQm9hcmQodGhpcy5wbGF5ZXIxSUQsIHRoaXMucGxheWVyMklEKTtcclxuICAgICAgICB0aGlzLmdyaWQgPSB0aGlzLmJvYXJkLmdyaWQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID0gXCJub29uZVwiO1xyXG4gICAgICAgIHRoaXMucGxheWVyMSA9IFs4LCA0XTtcclxuICAgICAgICB0aGlzLnBsYXllcjIgPSBbMCwgNF07XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIxV2FsbHMgPSAxMDtcclxuICAgICAgICB0aGlzLnBsYXllcjJXYWxscyA9IDEwO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBcIm5vdCBkb2luZyBhbnl0aGluZ1wiO1xyXG4gICAgICAgIHRoaXMudXRpbDtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZlUGxheWVyID0gdGhpcy5tb3ZlUGxheWVyLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNPdmVyKCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImlzT3ZlclwiKTtcclxuICAgICAgICBpZiAodGhpcy53aW5uZXIoKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbXB1dGVyQWlUdXJuKCkge1xyXG4gICAgLy8gICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImNvbXB1dGVyQWlUdXJuXCIpO1xyXG4gICAgLy8gICAgIGlmKHRoaXMuY3VycmVudFBsYXllciA9PT0gXCJwbGF5ZXIyXCIpIHtcclxuICAgIC8vICAgICAgICAgbGV0IHAyUGF0aCA9IHRoaXMuYm9hcmQuYmZzKHRoaXMucGxheWVyMiwgW1wiODBcIixcIjgxXCIsXCI4MlwiLFwiODNcIixcIjg0XCIsXCI4NVwiLFwiODZcIixcIjg3XCIsXCI4OFwiXSlcclxuICAgIC8vICAgICAgICAgbGV0IHAxUGF0aCA9IHRoaXMuYm9hcmQuYmZzKHRoaXMucGxheWVyMSk7XHJcbiAgICAvLyAgICAgICAgIGxldCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcclxuICAgIC8vICAgICAgICAgaWYgKChwMVBhdGhbMV0ubGVuZ3RoIDw9IHAyUGF0aFsxXS5sZW5ndGgpICYmICh0aGlzLnBsYXllcjJXYWxscyA+IDApKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAvKiBwbGFjZSB3YWxsIGlmIHBsYXllcjEgaXMgY2xvc2VyIHRvIGdvYWwgKi9cclxuICAgIC8vICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwMVBhdGhbMV0ubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsZXQgcm93SWR4ID0gcDFQYXRoWzFdW2ldLnNwbGl0KFwiXCIpWzBdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxldCBjb2xJZHggPSBwMVBhdGhbMV1baV0uc3BsaXQoXCJcIilbMV07ICAgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGV0IG5leHRSb3dJZHggPSBwMVBhdGhbMV1baSArIDFdLnNwbGl0KFwiXCIpWzBdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxldCBuZXh0Q29sSWR4ID0gcDFQYXRoWzFdW2kgKyAxXS5zcGxpdChcIlwiKVsxXTtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsZXQgcGxhY2VkV2FsbCA9IGZhbHNlO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxldCBzcXVhcmVBID0gW3BhcnNlSW50KG5leHRSb3dJZHgpLCBwYXJzZUludChuZXh0Q29sSWR4KV07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGV0IHNxdWFyZU5laWdoYm9ycyA9IHRoaXMuYm9hcmQuY2hlY2tOZWlnaGJvcnMoc3F1YXJlQSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGV0IHNxdWFyZUI7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgLyogXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGVmdCBhbmQgdXAgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcGxhY2VXYWxsKGRpciwgZXZlbnQsIHNxdWFyZUEsIHNxdWFyZUIpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZGlyID0gTm9ydGgsIFNvdXRoLCBFYXN0LCBXZXN0XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZXZlbnQgPSBudWxsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc3F1YXJlQSA9IFtyb3dJZHgsIGNvbElkeF1cclxuICAgIC8vICAgICAgICAgICAgICAgICBzcXVhcmVCID0gW3Jvd0lkeCwgY29sSWR4XVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICovXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYoY29sSWR4ID09PSBuZXh0Q29sSWR4KSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBhdGggaXMgbW92aW5nIHVwIG9yIGRvd25cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2hlY2sgbmVpZ2hib3JzIGFuZCBzZXQgc3F1YXJlQiB0byBhIHZhbGlkIG9uZVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMgPSBbbm9ydGgsIHNvdXRoLCB3ZXN0LCBlYXN0XVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB1c2UgcmFuZG9tIGlmIHlvdSB3YW50XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUEgPSBuZXh0IGJlc3QgcG9zIG9mIHBsYXllcjEgKG9wcG9uZW50KVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBzcXVhcmVCID0gc3F1YXJlIHRvIHRoZSB3ZXN0IG9mIHNxdWFyZUFcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmKHJhbmRvbSA9PT0gMCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNxdWFyZU5laWdoYm9yc1syXVswXSAhPT0gLTEpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVCID0gc3F1YXJlTmVpZ2hib3JzWzJdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVCID0gc3F1YXJlTmVpZ2hib3JzWzNdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNxdWFyZU5laWdoYm9yc1szXVswXSAhPT0gLTEpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVCID0gc3F1YXJlTmVpZ2hib3JzWzNdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVCID0gc3F1YXJlTmVpZ2hib3JzWzJdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBsYWNlZFdhbGwgPSB0aGlzLnBsYWNlV2FsbChcIlNvdXRoXCIsIHNxdWFyZUEsIHNxdWFyZUIpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2VkV2FsbCA9PT0gdHJ1ZSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKHJvd0lkeCA9PT0gbmV4dFJvd0lkeCkge1xyXG5cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgaWYocmFuZG9tID09PSAwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3F1YXJlTmVpZ2hib3JzWzBdWzBdICE9PSAtMSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUIgPSBzcXVhcmVOZWlnaGJvcnNbMF07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUIgPSBzcXVhcmVOZWlnaGJvcnNbMV07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3F1YXJlTmVpZ2hib3JzWzFdWzBdICE9PSAtMSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUIgPSBzcXVhcmVOZWlnaGJvcnNbMV07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUIgPSBzcXVhcmVOZWlnaGJvcnNbMF07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xJZHggPiBuZXh0Q29sSWR4KSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWRXYWxsID0gdGhpcy5wbGFjZVdhbGwoXCJFYXN0XCIsIHNxdWFyZUEsIHNxdWFyZUIpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlZFdhbGwgPT09IHRydWUpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZFdhbGwgPSB0aGlzLnBsYWNlV2FsbChcIldlc3RcIiwgc3F1YXJlQSwgc3F1YXJlQik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2VkV2FsbCA9PT0gdHJ1ZSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgIC8qIG1vdmUgcGxheWVyMiB0b3dhcmRzIGdvYWwgKi9cclxuICAgIC8vICAgICAgICAgICAgIGxldCBjdXJyUm93ID0gcDJQYXRoWzFdWzBdLnNwbGl0KFwiXCIpWzBdO1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IGN1cnJDb2wgPSBwMlBhdGhbMV1bMF0uc3BsaXQoXCJcIilbMV07XHJcbiAgICAvLyAgICAgICAgICAgICBsZXQgbW92ZXMgPSB0aGlzLmdldEF2YWlsYWJsZU1vdmVzKFtwYXJzZUludChjdXJyUm93KSwgcGFyc2VJbnQoY3VyckNvbCldKTtcclxuICAgIC8vICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW92ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsZXQgbW92ZSA9IG1vdmVzW2ldLmpvaW4oXCJcIik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKHAyUGF0aFsxXS5pbmNsdWRlcyhtb3ZlKSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVBsYXllcihtb3Zlc1tpXSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHdpbm5lcigpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJ3aW5uZXJcIik7XHJcbiAgICAgICAgbGV0IHdpbm5lciA9IG51bGw7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JpZFswXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZih0aGlzLmdyaWRbMF1baV0ucGxheWVyID09PSB0aGlzLnBsYXllcjFJRCkge1xyXG4gICAgICAgICAgICAgICAgd2lubmVyID0gdGhpcy5wbGF5ZXIxSUQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5ncmlkWzhdW2ldLnBsYXllciA9PT0gdGhpcy5wbGF5ZXIySUQpIHtcclxuICAgICAgICAgICAgICAgIHdpbm5lciA9IHRoaXMucGxheWVyMklEO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aW5uZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdGFrZVR1cm4oYWN0aW9uLCBkaXIgPSBudWxsLCBldmVudCwgc3F1YXJlQSA9IG51bGwsIHNxdWFyZUIgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwidGFrZVR1cm5cIik7XHJcbiAgICAgICAgLy8gbW92ZW1lbnQgb3Igd2FsbCBwbGFjZW1lbnQ/XHJcblxyXG4gICAgICAgIGlmIChhY3Rpb24gPT09IFwibW92ZVwiKSB7XHJcbiAgICAgICAgICAgIGlmKGRpciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlUGxheWVyKGV2ZW50LnRhcmdldC5pZC5zcGxpdChcIlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhY3Rpb24gPT09IFwicGxhY2VXYWxsXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZVdhbGwoZGlyLCBzcXVhcmVBLCBzcXVhcmVCKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHBsYWNlV2FsbChkaXIsIHNxdWFyZUEsIHNxdWFyZUIpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJwbGFjZVdhbGxcIik7XHJcbiAgICAgICAgLypcclxuICAgICAgICBzcXVhcmVBICYgc3F1YXJlQiA9IFtyb3dJZHgsIGNvbElkeF1cclxuICAgICAgICBnZXQgU3F1YXJlIGFuZCBzZXQgdGhlIHNwZWNpZmljIHdhbGxzIHRvIHRydWUgXHJcbiAgICAgICAgZ2V0IG5laWdoYm9ycyBhbmQgc3NldCBzcGVjaWZpYyB3YWxscyB0byB0cnVlLi4uIG9wcG9zaXRlIHdhbGxcclxuICAgICAgICBzcXVhcmVQb3MgPSB0aGlzLmdyaWRbcm93SWR4LCBjb2xJZHhdXHJcbiAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgIGlmKHNxdWFyZUFbMF0gPiA4IHx8IHNxdWFyZUFbMF0gPCAwIHx8IHNxdWFyZUJbMF0gPiA4IHx8IHNxdWFyZUJbMF0gPCAwXHJcbiAgICAgICAgICAgIHx8IHNxdWFyZUFbMV0gPiA4IHx8IHNxdWFyZUFbMV0gPCAwIHx8IHNxdWFyZUJbMV0gPiA4IHx8IHNxdWFyZUJbMV0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzcXJBID0gdGhpcy5ncmlkW3NxdWFyZUFbMF1dW3NxdWFyZUFbMV1dO1xyXG4gICAgICAgIGxldCBzcXJCID0gdGhpcy5ncmlkW3NxdWFyZUJbMF1dW3NxdWFyZUJbMV1dO1xyXG4gICAgICAgIGxldCBuZWlnaGJvcnNBID0gdGhpcy5ib2FyZC5jaGVja05laWdoYm9ycyhbc3FyQS5yb3dJZHgsIHNxckEuY29sSWR4XSk7XHJcbiAgICAgICAgbGV0IG5laWdoYm9yc0IgPSB0aGlzLmJvYXJkLmNoZWNrTmVpZ2hib3JzKFtzcXJCLnJvd0lkeCwgc3FyQi5jb2xJZHhdKTtcclxuICAgICAgICBsZXQgaXNWYWxpZFdhbGw7XHJcbiAgICAgICAgbGV0IHBsYXllcldhbGxzO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBsYXllciA9PT0gdGhpcy5wbGF5ZXIxSUQgPyBwbGF5ZXJXYWxscyA9IHRoaXMucGxheWVyMVdhbGxzIDogcGxheWVyV2FsbHMgPSB0aGlzLnBsYXllcjJXYWxsc1xyXG4gICAgICAgIGlmIChwbGF5ZXJXYWxscyA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGlmKGRpciA9PT0gXCJOb3J0aFwiICYmICghc3FyQS53YWxscy5Ob3J0aCAmJiAhc3FyQi53YWxscy5Ob3J0aCkpe1xyXG4gICAgICAgICAgICAgICAgc3FyQS53YWxscy5Ob3J0aCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzcXJCLndhbGxzLk5vcnRoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8qIHNldHMgdGhlIG5vcnRoIG5laWdoYm9ycyBzb3V0aCB3YWxsIHRvIHRydWUgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNBWzBdWzBdXVtuZWlnaGJvcnNBWzBdWzFdXS53YWxscy5Tb3V0aCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlswXVswXV1bbmVpZ2hib3JzQlswXVsxXV0ud2FsbHMuU291dGggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaXNWYWxpZFdhbGwgPSB0aGlzLmZpbmRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBpZihpc1ZhbGlkV2FsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGF5ZXIgPT09IHRoaXMucGxheWVyMUlEKSB0aGlzLnBsYXllcjFXYWxscyA9IHRoaXMucGxheWVyMVdhbGxzIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcjJJRCkgdGhpcy5wbGF5ZXIyV2FsbHMgPSB0aGlzLnBsYXllcjJXYWxscyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgncGxhY2VXYWxsJywgeyByb29tSWQ6IHRoaXMucm9vbS5pZCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXI6IFwibm9ydGhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxBOiBbc3FyQS5yb3dJZHgsIHNxckEuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxCOiBbc3FyQi5yb3dJZHgsIHNxckIuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxDOiBbbmVpZ2hib3JzQVswXVswXSwgbmVpZ2hib3JzQVswXVsxXV0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FsbEQ6IFtuZWlnaGJvcnNCWzBdWzBdLCBuZWlnaGJvcnNCWzBdWzFdXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXMuY3VycmVudFBsYXllcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc3dhcFR1cm4oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQS53YWxscy5Ob3J0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNxckIud2FsbHMuTm9ydGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQVswXVswXV1bbmVpZ2hib3JzQVswXVsxXV0ud2FsbHMuU291dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlswXVswXV1bbmVpZ2hib3JzQlswXVsxXV0ud2FsbHMuU291dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihkaXIgPT09IFwiRWFzdFwiICYmICghc3FyQS53YWxscy5FYXN0ICYmICFzcXJCLndhbGxzLkVhc3QpKXtcclxuICAgICAgICAgICAgICAgIHNxckEud2FsbHMuRWFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzcXJCLndhbGxzLkVhc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLyogc2V0cyB0aGUgRWFzdCBuZWlnaGJvcnMgV2VzdCB3YWxsIHRvIHRydWUgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNBWzNdWzBdXVtuZWlnaGJvcnNBWzNdWzFdXS53YWxscy5XZXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNCWzNdWzBdXVtuZWlnaGJvcnNCWzNdWzFdXS53YWxscy5XZXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlzVmFsaWRXYWxsID0gdGhpcy5maW5kUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgaWYoaXNWYWxpZFdhbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcjFJRCkgdGhpcy5wbGF5ZXIxV2FsbHMgPSB0aGlzLnBsYXllcjFXYWxscyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBsYXllciA9PT0gdGhpcy5wbGF5ZXIySUQpIHRoaXMucGxheWVyMldhbGxzID0gdGhpcy5wbGF5ZXIyV2FsbHMgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3BsYWNlV2FsbCcsIHsgcm9vbUlkOiB0aGlzLnJvb20uaWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiBcImVhc3RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxBOiBbc3FyQS5yb3dJZHgsIHNxckEuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxCOiBbc3FyQi5yb3dJZHgsIHNxckIuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxDOiBbbmVpZ2hib3JzQVszXVswXSwgbmVpZ2hib3JzQVszXVsxXV0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FsbEQ6IFtuZWlnaGJvcnNCWzNdWzBdLCBuZWlnaGJvcnNCWzNdWzFdXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXMuY3VycmVudFBsYXllcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc3dhcFR1cm4oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQS53YWxscy5FYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQi53YWxscy5FYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkW25laWdoYm9yc0FbM11bMF1dW25laWdoYm9yc0FbM11bMV1dLndhbGxzLldlc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlszXVswXV1bbmVpZ2hib3JzQlszXVsxXV0ud2FsbHMuV2VzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGRpciA9PT0gXCJTb3V0aFwiICYmICghc3FyQS53YWxscy5Tb3V0aCAmJiAhc3FyQi53YWxscy5Tb3V0aCkpe1xyXG4gICAgICAgICAgICAgICAgc3FyQS53YWxscy5Tb3V0aCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzcXJCLndhbGxzLlNvdXRoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8qIHNldHMgdGhlIFNvdXRoIG5laWdoYm9ycyBOb3J0aCB3YWxsIHRvIHRydWUgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNBWzFdWzBdXVtuZWlnaGJvcnNBWzFdWzFdXS53YWxscy5Ob3J0aCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlsxXVswXV1bbmVpZ2hib3JzQlsxXVsxXV0ud2FsbHMuTm9ydGggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaXNWYWxpZFdhbGwgPSB0aGlzLmZpbmRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBpZihpc1ZhbGlkV2FsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGF5ZXIgPT09IHRoaXMucGxheWVyMUlEKSB0aGlzLnBsYXllcjFXYWxscyA9IHRoaXMucGxheWVyMVdhbGxzIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcjJJRCkgdGhpcy5wbGF5ZXIyV2FsbHMgPSB0aGlzLnBsYXllcjJXYWxscyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgncGxhY2VXYWxsJywgeyByb29tSWQ6IHRoaXMucm9vbS5pZCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXI6IFwic291dGhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxBOiBbc3FyQS5yb3dJZHgsIHNxckEuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxCOiBbc3FyQi5yb3dJZHgsIHNxckIuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxDOiBbbmVpZ2hib3JzQVsxXVswXSwgbmVpZ2hib3JzQVsxXVsxXV0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FsbEQ6IFtuZWlnaGJvcnNCWzFdWzBdLCBuZWlnaGJvcnNCWzFdWzFdXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXMuY3VycmVudFBsYXllcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc3dhcFR1cm4oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQS53YWxscy5Tb3V0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNxckIud2FsbHMuU291dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQVsxXVswXV1bbmVpZ2hib3JzQVsxXVsxXV0ud2FsbHMuTm9ydGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlsxXVswXV1bbmVpZ2hib3JzQlsxXVsxXV0ud2FsbHMuTm9ydGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihkaXIgPT09IFwiV2VzdFwiICYmICghc3FyQS53YWxscy5XZXN0ICYmICFzcXJCLndhbGxzLldlc3QpKXtcclxuICAgICAgICAgICAgICAgIHNxckEud2FsbHMuV2VzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzcXJCLndhbGxzLldlc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLyogc2V0cyB0aGUgV2VzdCBuZWlnaGJvcnMgRWFzdCB3YWxsIHRvIHRydWUgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNBWzJdWzBdXVtuZWlnaGJvcnNBWzJdWzFdXS53YWxscy5FYXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFtuZWlnaGJvcnNCWzJdWzBdXVtuZWlnaGJvcnNCWzJdWzFdXS53YWxscy5FYXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlzVmFsaWRXYWxsID0gdGhpcy5maW5kUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgaWYoaXNWYWxpZFdhbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcjFJRCkgdGhpcy5wbGF5ZXIxV2FsbHMgPSB0aGlzLnBsYXllcjFXYWxscyAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBsYXllciA9PT0gdGhpcy5wbGF5ZXIySUQpIHRoaXMucGxheWVyMldhbGxzID0gdGhpcy5wbGF5ZXIyV2FsbHMgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3BsYWNlV2FsbCcsIHsgcm9vbUlkOiB0aGlzLnJvb20uaWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiBcIndlc3RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxBOiBbc3FyQS5yb3dJZHgsIHNxckEuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxCOiBbc3FyQi5yb3dJZHgsIHNxckIuY29sSWR4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxDOiBbbmVpZ2hib3JzQVsyXVswXSwgbmVpZ2hib3JzQVsyXVsxXV0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FsbEQ6IFtuZWlnaGJvcnNCWzJdWzBdLCBuZWlnaGJvcnNCWzJdWzFdXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXMuY3VycmVudFBsYXllcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc3dhcFR1cm4oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQS53YWxscy5XZXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc3FyQi53YWxscy5XZXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkW25laWdoYm9yc0FbMl1bMF1dW25laWdoYm9yc0FbMl1bMV1dLndhbGxzLkVhc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRbbmVpZ2hib3JzQlsyXVswXV1bbmVpZ2hib3JzQlsyXVsxXV0ud2FsbHMuRWFzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlUGxheWVyKGRpcikge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcIm1vdmVQbGF5ZXJcIik7XHJcbiAgICAgICAgLy8gdGFrZXMgY3VycmVudCBwbGF5ZXIgY3VycmVudCBwb3NcclxuICAgICAgICAvLyBjYWxjdWxhdGVzIGZ1dHVyZSBwb3Mgd2l0aCBkaXJcclxuICAgICAgICBsZXQgcGxheWVyO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBsYXllciA9PT0gdGhpcy5wbGF5ZXIxSUQgPyBwbGF5ZXIgPSB0aGlzLnBsYXllcjEgOiBwbGF5ZXIgPSB0aGlzLnBsYXllcjJcclxuICAgICAgICBsZXQgbmV3Q29sSWR4O1xyXG4gICAgICAgIGxldCBuZXdSb3dJZHg7XHJcbiAgICAgICAgbGV0IGlzV2FsbGVkO1xyXG4gICAgICAgIGxldCBpc1ZhbGlkO1xyXG4gICAgXHJcbiAgICAgICAgbmV3Um93SWR4ID0gcGFyc2VJbnQoZGlyWzBdKTtcclxuICAgICAgICBuZXdDb2xJZHggPSBwYXJzZUludChkaXJbMV0pO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIFRoZSBiZWxvdyB2YWxpZGF0aW9uIG5vIGxvbmdlciB3b3JrcyBmb3IgY2xpY2tpbmcgbW92ZW1lbnQuICBcclxuICAgICAgICBjaGVjayBmb3Igd2FsbHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1dhbGxlZCA9IHRoaXMuYm9hcmQuaXNXYWxsZWQoZGlyLCBwbGF5ZXJbMF0sIHBsYXllclsxXSk7XHJcbiAgICAgICAgLy8gZ2l2ZXMgdG8gdGhpcy5ib2FyZCB0byB2YWxpZGF0ZVxyXG4gICAgICAgIGlzVmFsaWQgPSBCb2FyZC5pc1ZhbGlkUG9zKG5ld0NvbElkeCwgbmV3Um93SWR4KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBpZiB2YWxpZCB0aGVuIHNldHMgcGxheWVyIG5ldyB4IGFuZCB5XHJcbiAgICAgICAgLy8gICAgc3dhcHMgdHVybnNcclxuICAgICAgICBpZiAoaXNWYWxpZCAmJiAhaXNXYWxsZWQpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBvbGRTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWRbcGxheWVyWzBdXVtwbGF5ZXJbMV1dO1xyXG4gICAgICAgICAgICBsZXQgbmV3U3F1YXJlID0gdGhpcy5ib2FyZC5ncmlkW25ld1Jvd0lkeF1bbmV3Q29sSWR4XTtcclxuXHJcbiAgICAgICAgICAgIC8vdmFsaWRhdGlvbiB0byBjaGVjayBmb3IgcGxheWVyIGNvbGxpc2lvbiAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobmV3U3F1YXJlLnBsYXllciAhPT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvbGRTcXVhcmUucGxheWVyID0gXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQbGF5ZXJQb3ModGhpcy5jdXJyZW50UGxheWVyLCBbbmV3Um93SWR4LCBuZXdDb2xJZHhdKTtcclxuICAgICAgICAgICAgICAgIG5ld1NxdWFyZS5wbGF5ZXIgPSB0aGlzLmN1cnJlbnRQbGF5ZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KCdwbGF5ZXJNb3ZlJywge3Jvb21JZDogdGhpcy5yb29tLmlkLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkUG9zOiBbb2xkU3F1YXJlLnJvd0lkeCwgb2xkU3F1YXJlLmNvbElkeF0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3M6IFtuZXdTcXVhcmUucm93SWR4LCBuZXdTcXVhcmUuY29sSWR4XSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcjogdGhpcy5jdXJyZW50UGxheWVyfSlcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc3dhcFR1cm4oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZWxzZSB0aGVuIGRvZXMgbm90aGluZyBvciBzZW5kcyBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgIC8vICAgIGRvZXMgbm90IHN3YXAgdHVybnNcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEF2YWlsYWJsZU1vdmVzKHBvcykge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImdldEF2YWlsYWJsZU1vdmVzXCIpO1xyXG4gICAgICAgIC8qIHBvcyA9IFtyb3csIGNvbF0gKi9cclxuICAgICAgICBsZXQgbW92ZXMgPSBbXTtcclxuICAgICAgICBsZXQgY3VycmVudFNxdWFyZSA9IHRoaXMuZ3JpZFtwb3NbMF1dW3Bvc1sxXV07XHJcbiAgICAgICAgbGV0IHNxdWFyZTtcclxuICAgICAgICBsZXQgY29sSWR4ID0gcG9zWzFdO1xyXG4gICAgICAgIGxldCByb3dJZHggID0gcG9zWzBdO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICBwYXR0ZXJuIGZvciB0aGVzZSBuZXh0IGZvdXIgaWYgc3RhdGVtZW50IGJsb2Nrc1xyXG5cclxuICAgICAgICBpZiBwb3NpdGlvbiBpcyBvbiB0aGUgYm9hcmQgYW5kIHRoZXJlIGlzIG5vdCB3YWxsXHJcbiAgICAgICAgICAgIGlmIHBvc2l0aW9uIGhhcyBubyBwbGF5ZXIgb24gaXRcclxuICAgICAgICAgICAgZWxzZSBpZiBwb3NpdGlvbiBoYXMgYSBwbGF5ZXIgb24gaXRcclxuICAgICAgICAgICAgKioqIGdldHRpbmcgdGhlIGF2YWlsYWJsZSBtb3ZlIHRoYXQgaG9wcyB0aGUgb3Bwb25lbnQgKioqXHJcbiAgICAgICAgICAgICAgICBpZiBubyBvYnN0cnVjdGlvbnMgZm9yIGEgc3RyYWlnaHQgaG9wID0+IGFkZCB0aGF0IG1vdmVcclxuICAgICAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcHNxdWFyZSBpcyBkZXN0aW5hdGlvbiBvZiBhIHN0YWlnaHQgaG9wXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgd2FsbCBpcyBhbiBvYnN0cnVjdGlvbiBmb3IgYSBzdHJhaWdodCBob3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkIGEgZGlhZ29uYWwgaG9wIGlmIG5vdCBvYnN0cnVjdGVkIGJ5IGEgd2FsbFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgdGVtcHNxdWFyZSBpcyBvZmYgdGhlIGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZCBhIGRpYWdvbmFsIGhvcCBpZiBub3Qgb2JzdHJ1Y3RlZCBieSBhIHdhbGxcclxuXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIGlmICgocm93SWR4IC0gMSA+PSAwKSAmJiAoIWN1cnJlbnRTcXVhcmUud2FsbHMuTm9ydGgpKSB7XHJcbiAgICAgICAgICAgIHNxdWFyZSA9IHRoaXMuZ3JpZFtyb3dJZHggLSAxXVtjb2xJZHhdO1xyXG4gICAgICAgICAgICBpZiAoc3F1YXJlLnBsYXllciA9PT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKFtyb3dJZHggLSAxLCBjb2xJZHhdKTsgIC8vIG5vcnRoXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW3RoaXMucGxheWVyMUlELCB0aGlzLnBsYXllcjJJRF0uaW5jbHVkZXMoc3F1YXJlLnBsYXllcikpe1xyXG4gICAgICAgICAgICAgICAgaWYgKChyb3dJZHggLSAyID49IDApICYmICghc3F1YXJlLndhbGxzLk5vcnRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVzLnB1c2goW3Jvd0lkeCAtIDIsIGNvbElkeF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFNxdWFyZSA9IHJvd0lkeCAtIDIgPj0gMCA/IHRoaXMuZ3JpZFtyb3dJZHggLSAyXVtjb2xJZHhdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcXVhcmUud2FsbHMuTm9ydGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuRWFzdCkgbW92ZXMucHVzaChbcm93SWR4IC0gMSwgY29sSWR4ICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5XZXN0KSBtb3Zlcy5wdXNoKFtyb3dJZHggLSAxLCBjb2xJZHggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wU3F1YXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5FYXN0KSBtb3Zlcy5wdXNoKFtyb3dJZHggLSAxLCBjb2xJZHggKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5XZXN0KSBtb3Zlcy5wdXNoKFtyb3dJZHggLSAxLCBjb2xJZHggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChjb2xJZHggKyAxIDw9IDgpICYmICghY3VycmVudFNxdWFyZS53YWxscy5FYXN0KSkge1xyXG4gICAgICAgICAgICBzcXVhcmUgPSB0aGlzLmdyaWRbcm93SWR4XVtjb2xJZHggKyAxXTtcclxuICAgICAgICAgICAgaWYgKHNxdWFyZS5wbGF5ZXIgPT09IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgbW92ZXMucHVzaChbcm93SWR4LCBjb2xJZHggKyAxXSk7ICAvLyBlYXN0XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW3RoaXMucGxheWVyMUlELCB0aGlzLnBsYXllcjJJRF0uaW5jbHVkZXMoc3F1YXJlLnBsYXllcikpe1xyXG4gICAgICAgICAgICAgICAgaWYgKChjb2xJZHggKyAyIDw9IDgpICYmICghc3F1YXJlLndhbGxzLkVhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZXMucHVzaChbcm93SWR4LCBjb2xJZHggKyAyXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wU3F1YXJlID0gY29sSWR4ICsgMiA8PSA4ID8gdGhpcy5ncmlkW3Jvd0lkeF1bY29sSWR4ICsgMl0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNxdWFyZS53YWxscy5FYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3F1YXJlLndhbGxzLk5vcnRoKSBtb3Zlcy5wdXNoKFtyb3dJZHggLSAxLCBjb2xJZHggKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3F1YXJlLndhbGxzLlNvdXRoKSBtb3Zlcy5wdXNoKFtyb3dJZHggKyAxLCBjb2xJZHggKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wU3F1YXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5Ob3J0aCkgbW92ZXMucHVzaChbcm93SWR4IC0gMSwgY29sSWR4ICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuU291dGgpIG1vdmVzLnB1c2goW3Jvd0lkeCArIDEsIGNvbElkeCArIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHJvd0lkeCArIDEgPD0gOCkgJiYgKCFjdXJyZW50U3F1YXJlLndhbGxzLlNvdXRoKSkge1xyXG4gICAgICAgICAgICBzcXVhcmUgPSB0aGlzLmdyaWRbcm93SWR4ICsgMV1bY29sSWR4XTtcclxuICAgICAgICAgICAgaWYgKHNxdWFyZS5wbGF5ZXIgPT09IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgbW92ZXMucHVzaChbcm93SWR4ICsgMSwgY29sSWR4XSk7ICAvLyBzb3V0aFxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFt0aGlzLnBsYXllcjFJRCwgdGhpcy5wbGF5ZXIySURdLmluY2x1ZGVzKHNxdWFyZS5wbGF5ZXIpKXtcclxuICAgICAgICAgICAgICAgIGlmICgocm93SWR4ICsgMiA8PSA4KSAmJiAoIXNxdWFyZS53YWxscy5Tb3V0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3Zlcy5wdXNoKFtyb3dJZHggKyAyLCBjb2xJZHhdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBTcXVhcmUgPSByb3dJZHggKyAyIDw9IDggPyB0aGlzLmdyaWRbcm93SWR4ICsgMl1bY29sSWR4XSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3F1YXJlLndhbGxzLlNvdXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3F1YXJlLndhbGxzLkVhc3QpIG1vdmVzLnB1c2goW3Jvd0lkeCArIDEsIGNvbElkeCArIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuV2VzdCkgbW92ZXMucHVzaChbcm93SWR4ICsgMSwgY29sSWR4IC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVtcFNxdWFyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuRWFzdCkgbW92ZXMucHVzaChbcm93SWR4ICsgMSwgY29sSWR4ICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuV2VzdCkgbW92ZXMucHVzaChbcm93SWR4ICsgMSwgY29sSWR4IC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoY29sSWR4IC0gMSA+PSAwKSAmJiAoIWN1cnJlbnRTcXVhcmUud2FsbHMuV2VzdCkpIHtcclxuICAgICAgICAgICAgc3F1YXJlID0gdGhpcy5ncmlkW3Jvd0lkeF1bY29sSWR4IC0gMV07XHJcbiAgICAgICAgICAgIGlmIChzcXVhcmUucGxheWVyID09PSBcImVtcHR5XCIpIHtcclxuICAgICAgICAgICAgICAgIG1vdmVzLnB1c2goW3Jvd0lkeCwgY29sSWR4IC0gMV0pOyAgLy8gd2VzdFxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFt0aGlzLnBsYXllcjFJRCwgdGhpcy5wbGF5ZXIySURdLmluY2x1ZGVzKHNxdWFyZS5wbGF5ZXIpKXtcclxuICAgICAgICAgICAgICAgIGlmICgoY29sSWR4IC0gMiA+PSAwKSAmJiAoIXNxdWFyZS53YWxscy5XZXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVzLnB1c2goW3Jvd0lkeCwgY29sSWR4IC0gMl0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcFNxdWFyZSA9IGNvbElkeCAtIDIgPj0gMCA/IHRoaXMuZ3JpZFtyb3dJZHhdW2NvbElkeCAtIDJdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcXVhcmUud2FsbHMuV2VzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5Ob3J0aCkgbW92ZXMucHVzaChbcm93SWR4IC0gMSwgY29sSWR4IC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNxdWFyZS53YWxscy5Tb3V0aCkgbW92ZXMucHVzaChbcm93SWR4ICsgMSwgY29sSWR4IC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVtcFNxdWFyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUud2FsbHMuTm9ydGgpIG1vdmVzLnB1c2goW3Jvd0lkeCAtIDEsIGNvbElkeCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3F1YXJlLndhbGxzLlNvdXRoKSBtb3Zlcy5wdXNoKFtyb3dJZHggKyAxLCBjb2xJZHggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1vdmVzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzZXRQbGF5ZXJQb3MocGxheWVyLCBwb3MpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJzZXRQbGF5ZXJQb3NcIik7XHJcbiAgICAgICAgaWYgKHBsYXllciA9PT0gdGhpcy5wbGF5ZXIxSUQpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIxID0gcG9zO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGxheWVyID09PSB0aGlzLnBsYXllcjJJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllcjIgPSBwb3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcInN0YXJ0XCIpO1xyXG4gICAgICAgIHRoaXMuYm9hcmQuc2V0UGxheWVycyh0cnVlLCB0aGlzLnBsYXllcjEsIHRydWUsIHRoaXMucGxheWVyMik7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5wbGF5ZXIxSUQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcFR1cm4oKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwic3dhcFR1cm5cIik7XHJcbiAgICAgICAgaWYoIHRoaXMuY3VycmVudFBsYXllciA9PT0gdGhpcy5wbGF5ZXIxSUQgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMucGxheWVyMklEO1xyXG4gICAgICAgIH0gZWxzZSBpZiggdGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcjJJRCApIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5wbGF5ZXIxSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQYXRoKCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImZpbmRQYXRoXCIpO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgIHJ1biB0aGUgYmZzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5ib2FyZC5iZnModGhpcy5wbGF5ZXIxKTtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVWaWV3IHtcclxuICAgIGNvbnN0cnVjdG9yKHNvY2tldCwgcm9vbSwgZ2FtZSkge1xyXG4gICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xyXG4gICAgICAgIHRoaXMucm9vbSA9IHJvb207XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLmJvYXJkID0gdGhpcy5nYW1lLmJvYXJkO1xyXG4gICAgICAgIHRoaXMuZ3JpZCA9IHRoaXMuYm9hcmQuZ3JpZDtcclxuICAgICAgICB0aGlzLnNxdWFyZUEgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3F1YXJlQiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5uZWlnaGJvcnMgPSBudWxsOyAgXHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGVNb3ZlcyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLndpbm5lciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMudXRpbCA9IG5ldyBVdGlsKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lLnV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgdGhpcy5nYW1lLmJvYXJkLnV0aWwgPSB0aGlzLnV0aWw7XHJcbiAgICAgICAgdGhpcy5zZXR1cEJvYXJkKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJzaG93XCIpO1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZS5jb21wdXRlckFpVHVybigpO1xyXG4gICAgICAgIHRoaXMuc2hvd0JvYXJkKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5pc092ZXIoKSkge1xyXG4gICAgICAgICAgICBpZih0aGlzLmdhbWUuY3VycmVudFBsYXllciAhPT0gXCJub29uZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2lubmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyID09PSB0aGlzLmdhbWUucGxheWVyMklEKSB0aGlzLndpbm5lciA9IHRoaXMucm9vbS5wbGF5ZXIxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWUuY3VycmVudFBsYXllciA9PT0gdGhpcy5nYW1lLnBsYXllcjFJRCkgdGhpcy53aW5uZXIgPSB0aGlzLnJvb20ucGxheWVyMjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KCd3aW5uZXInLCB0aGlzLnJvb20uaWQsIHRoaXMud2lubmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFibGVcIilbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVSZXN0YXJ0RGl2KHRhYmxlLCB3aW5uZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyID0gXCJub29uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2hvd0JvYXJkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHJlc3RhcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3dCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJzaG93Qm9hcmRcIik7XHJcbiAgICAgICAgZm9yKGxldCByb3dJZHggPSAwOyByb3dJZHggIDwgdGhpcy5ncmlkLmxlbmd0aDsgcm93SWR4KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgdGhpcy5ncmlkW3Jvd0lkeF0ubGVuZ3RoOyBjb2xJZHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuZ3JpZFtyb3dJZHhdW2NvbElkeF07XHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSAocm93SWR4KS50b1N0cmluZygpICsgKGNvbElkeCkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGxldCBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgICAgICAgICAgICBpZihzcXVhcmUucGxheWVyID09PSB0aGlzLmdhbWUucGxheWVyMUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmlubmVySFRNTCA9IFwiJiN4MjY1RlwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNxdWFyZS5wbGF5ZXIgPT09IHRoaXMuZ2FtZS5wbGF5ZXIySUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZChcInBsYXllclwiKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuaW5uZXJIVE1MID0gXCImI3gyNjU5XCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZS5jbGFzc0xpc3QucmVtb3ZlKFwicGxheWVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZS5pbm5lckhUTUwgPSBcIiBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qIHVwZGF0ZSB3YWxscyAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCEhc3F1YXJlLndhbGxzLk5vcnRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hhbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZCgnd2FsbC10b3AnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghIXNxdWFyZS53YWxscy5FYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hhbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZCgnd2FsbC1yaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCEhc3F1YXJlLndhbGxzLlNvdXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hhbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZCgnd2FsbC1ib3R0b20nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghIXNxdWFyZS53YWxscy5XZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hhbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZCgnd2FsbC1sZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHdhbGxDb3VudGVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ3YWxsLWNvdW50ZXJcIik7XHJcbiAgICAgICAgbGV0IGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxhY2VcIik7XHJcbiAgICAgICAgd2FsbENvdW50ZXJzWzBdLmlubmVySFRNTCA9IGBwbGF5ZXIgMSBoYXMgJHt0aGlzLmdhbWUucGxheWVyMVdhbGxzfSB3YWxscyBsZWZ0YFxyXG4gICAgICAgIHdhbGxDb3VudGVyc1sxXS5pbm5lckhUTUwgPSBgcGxheWVyIDIgaGFzICR7dGhpcy5nYW1lLnBsYXllcjJXYWxsc30gd2FsbHMgbGVmdGBcclxuICAgICAgICBpZiAoKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyID09PSB0aGlzLmdhbWUucGxheWVyMUlEKSAmJiAodGhpcy5nYW1lLnBsYXllcjFXYWxscyA9PT0gMCkpIHtcclxuICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyID09PSB0aGlzLmdhbWUucGxheWVyMklEKSAmJiAodGhpcy5nYW1lLnBsYXllcjJXYWxscyA9PT0gMCkpe1xyXG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5zdGF0ZSA9PT0gXCJub3QgZG9pbmcgYW55dGhpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRlXCIpKSBidG4uY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGxheWVyc1R1cm4gPSB0aGlzLmdhbWUuY3VycmVudFBsYXllciA9PT0gdGhpcy5zb2NrZXQuaWQgPyAnWW91cicgOiBcIk9wcG9uZW50J3NcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci10dXJuXCIpLmlubmVySFRNTCA9IGAke3BsYXllcnNUdXJufSB0dXJuYDtcclxuICAgIH1cclxuXHJcbiAgICBzZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcInNldHVwRXZlbnRMaXN0ZW5lcnNcIik7XHJcblxyXG4gICAgICAgIHRoaXMuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvY2tldC5pZCA9PT0gdGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIpIHtcclxuICAgICAgICAgICAgLy8gaWYgKHRydWUpIHsgLy8gdGVzdGluZyBwdXJwb3Nlc1xyXG4gICAgICAgICAgICAgICAgLyogXHJcbiAgICBUaGUgY2xpY2sgZXZlbnQgaXMgdXNlZCBmb3IgYSBzdGF0ZSBtYWNoaW5lLlxyXG4gICAgRGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiBwbGFjaW5nIGEgd2FsbCBkaWN0YXRlc1xyXG4gICAgd2hhdCB3aWxsIGhhcHBlbiB3aGVuIGEgY2xpY2sgZXZlbnQgdHJpZ2dlcnMuXHJcbiAgICBTdGF0ZSBpcyBzdG9yZWQgaW4gdGhpcy5nYW1lLnN0YXRlIFxyXG4gICAgU3RhdGUgTWFjaGluZSBpczpcclxuICAgIFtwMSBub3QgZG9pbmcgYW55dGhpbmddID09IGNsaWNrcyBQbGFjZSBhIHdhbGwgPj4gW3NlbGVjdGluZyBzcXVhcmVzXSA9PiBbc2VsZWN0aW5nIHdhbGwgdHlwZV0gPT4gW3AxIG5vdCBkb2luZyBhbnl0aGluZ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3dhbGwgaXMgY3JlYXRlZH0gPT4gW3AyIG5vdCBkb2luZyBhbnl0aGluZ11cclxuICAgICEhIHVuZGV2ZWxvcGVkICEhXHJcbiAgICBQbGF5ZXIgbW92ZW1lbnQgd2lsbCBiZSBpbnRlZ3JhdGVkIGludG8gdGhlIHN0YXRlIG1hY2hpbmUgYXMgd2VsbFxyXG4gICAgKioqIG1heWJlIGNoYW5nZSBbbm90IGRvaW5nIGFueXRoaW5nXSB0byBbbm90IGRvaW5nIGFueXRoaW5nXVxyXG4gICAgXHJcbiAgICBbcDEgbm90IGRvaW5nIGFueXRoaW5nXSA9PSBjbGlja3MgTW92ZSBjaGFyYWN0ZXIgPj4gW3NlbGVjdGluZyBkZXNpcmVkIG1vdmVdID0+IFtwMSBub3QgZG9pbmcgYW55dGhpbmddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttb3ZlIHBsYXllcn0gPT4gW3AyIG5vdCBkb2luZyBhbnl0aGluZ11cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgKi8gXHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuZ2FtZS5zdGF0ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjbGFzc0xpc3QgPSBldmVudC50YXJnZXQuY2xhc3NMaXN0O1xyXG4gICAgICAgICAgICAgICAgbGV0IGlubmVySFRNTCA9IGV2ZW50LnRhcmdldC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IFwibm90IGRvaW5nIGFueXRoaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKFwiYnV0dG9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlubmVySFRNTCA9PT0gXCJQbGFjZSBhIHdhbGxcIikge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVBsYWNlV2FsbEJ1dHRvbihldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbm5lckhUTUwgPT09IFwiTW92ZSBjaGFyYWN0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3ZlbWVudEJ1dHRvbihldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcInNlbGVjdGluZyBzcXVhcmVzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxvb3JcIikpIHtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNxdWFyZUNsaWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBcInNlbGVjdGluZyB3YWxsIHR5cGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoXCJidXR0b25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGlubmVySFRNTCA9PT0gXCJOb3J0aFwiKSB8fCAoaW5uZXJIVE1MID09PSBcIkVhc3RcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGlubmVySFRNTCA9PT0gXCJTb3V0aFwiKSB8fCAoaW5uZXJIVE1MID09PSBcIldlc3RcIikpIHtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVXYWxsVHlwZUJ1dHRvbihpbm5lckhUTUwsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gXCJzZWxlY3RpbmcgZGVzaXJlZCBtb3ZlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdmFpbGFibGVNb3Zlcy5pbmNsdWRlcyhldmVudC50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50YWtlVHVybihcIm1vdmVcIiwgbnVsbCwgZXZlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFja1wiKS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF2YWlsYWJsZU1vdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF2YWlsYWJsZU1vdmVzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWdobGlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlID0gXCJub3QgZG9pbmcgYW55dGhpbmdcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVNb3ZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gXCJub3QgZG9pbmcgYW55dGhpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoXCJidXR0b25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVySFRNTCA9PT0gXCJiYWNrXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQmFja0J1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlubmVySFRNTCA9PT0gXCJSZXN0YXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH0gXHJcblxyXG4gICAgaGFuZGxlUGxhY2VXYWxsQnV0dG9uKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiaGFuZGxlUGxhY2VXYWxsQnV0dG9uXCIpO1xyXG4gICAgICAgIC8vIGRlbGV0ZSBidG4gZWxlbWVudCBhbmQgcmVwbGFjZSB3aXRoIGluc3RydWN0aW9ucyB0b1xyXG4gICAgICAgIC8vIGNsaWNrIHR3byBkaXN0aW5jdCBzcXVhcmVzXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyICE9PSBcIm5vb25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlID0gXCJzZWxlY3Rpbmcgc3F1YXJlc1wiO1xyXG4gICAgICAgICAgICBsZXQgYnRuID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhY2tcIikuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuYm9keS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2xpY2tJbnN0cnVjdFwiKVswXS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb3ZlXCIpLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVNxdWFyZUNsaWNrKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiaGFuZGxlU3F1YXJlQ2xpY2tcIik7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyICE9PSBcIm5vb25lXCIpIHtcclxuICAgICAgICAgICAgLy93YWl0IGZvciBjbGllbnQgdG8gY2xpY2sgdHdvIHZhbGlkIHNxdWFyZXNcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICgodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImZsb29yXCIpKSAmJiAodGhpcy5zcXVhcmVBID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFdhbGxcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNxdWFyZUEgPSB0YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICAvL3BhcnNlIHNxdWFyZUFcclxuICAgICAgICAgICAgICAgIC8vIHNxdWFyZUEgPSBcIjAwXCIgYW5kIG5lZWRzIHRvIGJlIFswLCAwXVxyXG4gICAgICAgICAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuc3F1YXJlQS5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgIHNxdWFyZVswXSA9IHBhcnNlSW50KHNxdWFyZVswXSk7XHJcbiAgICAgICAgICAgICAgICBzcXVhcmVbMV0gPSBwYXJzZUludChzcXVhcmVbMV0pO1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgbmVpZ2hib3JzXHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5zIFtbbm9ydGhdLFtlYXN0XSxbc291dGhdLFt3ZXN0XV1cclxuICAgICAgICAgICAgICAgIHRoaXMubmVpZ2hib3JzID0gdGhpcy5ib2FyZC5jaGVja05laWdoYm9ycyhzcXVhcmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLm5laWdoYm9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubmVpZ2hib3JzW2ldWzBdICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSB0aGlzLm5laWdoYm9yc1tpXS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU5laWdoYm9yc0FycmF5VG9TdHJpbmcodGhpcy5uZWlnaGJvcnMpOyAgXHJcbiAgICBcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImZsb29yXCIpKSAmJiAodGhpcy5zcXVhcmVBICE9PSBudWxsKSAmJiAodGhpcy5zcXVhcmVCID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgaWYoISF0aGlzLm5laWdoYm9ycy5pbmNsdWRlcyh0YXJnZXQuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcXVhcmVCID0gdGFyZ2V0LmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3F1YXJlQSAhPT0gbnVsbCAmJiB0aGlzLnNxdWFyZUIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBjcmVhdGUgdHdvIGJ1dHRvbnMgZGVwZW5kaW5nIG9uIHNxdWFyZUEgYW5kIHNxdWFyZUIgb3JpZW50YXRpb25cclxuICAgICAgICAgICAgICAgIHRoaXMuYm9keS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2xpY2tJbnN0cnVjdFwiKVswXS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBBID0gdGhpcy5ncmlkW3RoaXMuc3F1YXJlQS5zcGxpdChcIlwiKVswXV1bdGhpcy5zcXVhcmVBLnNwbGl0KFwiXCIpWzFdXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IEIgPSB0aGlzLmdyaWRbdGhpcy5zcXVhcmVCLnNwbGl0KFwiXCIpWzBdXVt0aGlzLnNxdWFyZUIuc3BsaXQoXCJcIilbMV1dO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnNxdWFyZUEuc3BsaXQoXCJcIilbMF0gPT09IHRoaXMuc3F1YXJlQi5zcGxpdChcIlwiKVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc3F1YXJlQS5zcGxpdChcIlwiKVswXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJub3J0aFwiKVswXS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zcXVhcmVBLnNwbGl0KFwiXCIpWzBdIDwgOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNvdXRoXCIpWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3F1YXJlQS5zcGxpdChcIlwiKVsxXSA9PT0gdGhpcy5zcXVhcmVCLnNwbGl0KFwiXCIpWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zcXVhcmVBLnNwbGl0KFwiXCIpWzFdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIndlc3RcIilbMF0uY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc3F1YXJlQS5zcGxpdChcIlwiKVsxXSA8IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJlYXN0XCIpWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubmVpZ2hib3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMubmVpZ2hib3JzW2ldLmluY2x1ZGVzKFwiLVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSB0aGlzLm5laWdoYm9yc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWdobGlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5uZWlnaGJvcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRXYWxsXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlID0gXCJzZWxlY3Rpbmcgd2FsbCB0eXBlXCI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVXYWxsVHlwZUJ1dHRvbihkaXIsIGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiaGFuZGxlV2FsbFR5cGVCdXR0b25cIik7XHJcblxyXG4gICAgICAgIGxldCBzZWxlY3RlZFdhbGxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNlbGVjdGVkV2FsbFwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkV2FsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHdhbGwgPSBzZWxlY3RlZFdhbGxzW2ldO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHdhbGwuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkV2FsbFwiKTtcclxuICAgICAgICAgICAgfSwwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGdhbWUgbG9naWMgKi9cclxuICAgICAgICB0aGlzLmdhbWUudGFrZVR1cm4oXCJwbGFjZVdhbGxcIiwgZGlyLCBldmVudCwgdGhpcy5zcXVhcmVBLCB0aGlzLnNxdWFyZUIpO1xyXG5cclxuICAgICAgICAvKiBzdHlsaXplICovXHJcbiAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJub3J0aFwiKVswXS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcclxuICAgICAgICB0aGlzLmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImVhc3RcIilbMF0uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzb3V0aFwiKVswXS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcclxuICAgICAgICB0aGlzLmJvZHkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIndlc3RcIilbMF0uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJidXR0b25cIilbMF0uY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYWNrXCIpLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW92ZVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcclxuXHJcbiAgICAgICAgLyogcmVzZXR0aW5nIHVzZWZ1bCB2YXJpYWJsZXMgKi9cclxuICAgICAgICB0aGlzLnNxdWFyZUEgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3F1YXJlQiA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qIHN0YXRlIGNoYW5nZSAqL1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zdGF0ZSA9IFwibm90IGRvaW5nIGFueXRoaW5nXCI7XHJcblxyXG4gICAgICAgIC8qIHJlbmRlcnMgKi9cclxuICAgICAgICB0aGlzLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVNb3ZlbWVudEJ1dHRvbihldmVudCkge1xyXG4gICAgICAgIHRoaXMudXRpbC50cmFja0Z1bmN0aW9ucyhcImhhbmRsZU1vdmVtZW50QnV0dG9uXCIpO1xyXG4gICAgICAgIGlmKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyICE9PSBcIm5vb25lXCIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYWNrXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYWNlXCIpLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICBsZXQgYXZhaWxhYmxlTW92ZXM7XHJcbiAgICAgICAgICAgIGxldCBwbGF5ZXIgPSB0aGlzLmdhbWUuY3VycmVudFBsYXllciA9PT0gdGhpcy5nYW1lLnBsYXllcjFJRCA/IHRoaXMuZ2FtZS5wbGF5ZXIxIDogdGhpcy5nYW1lLnBsYXllcjI7XHJcbiAgICAgICAgICAgIGxldCByb3dJZHggPSBwYXJzZUludChwbGF5ZXJbMF0pO1xyXG4gICAgICAgICAgICBsZXQgY29sSWR4ID0gcGFyc2VJbnQocGxheWVyWzFdKTtcclxuICAgICAgICAgICAgYXZhaWxhYmxlTW92ZXMgPSB0aGlzLmdhbWUuZ2V0QXZhaWxhYmxlTW92ZXMoW3Jvd0lkeCwgY29sSWR4XSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXZhaWxhYmxlTW92ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhdmFpbGFibGVNb3Zlc1tpXS5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIGVsZS5jbGFzc0xpc3QuYWRkKFwiaGlnaGxpZ2h0XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVNb3Zlcy5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyogc2V0IHRoZSBzdGF0ZSB0byBjaGVjayBpZiBhbiBhdmFpbGFibGUgbW92ZSBzcXVhcmUgaXMgY2xpY2tlZC4gKi9cclxuICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlID0gXCJzZWxlY3RpbmcgZGVzaXJlZCBtb3ZlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUJhY2tCdXR0b24oKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiaGFuZGxlQmFja0J1dHRvblwiKTtcclxuICAgICAgICB0aGlzLmdhbWUuc3RhdGUgPSBcIm5vdCBkb2luZyBhbnl0aGluZ1wiO1xyXG4gICAgICAgIC8qIHJlc2V0cyBzdGF0ZSAqL1xyXG4gICAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY29udHJvbGxlci1kaXZcIilbMF0uY2hpbGROb2RlcztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb25zW2ldLmlkID09PSBcInBsYWNlXCIgfHwgaW5zdHJ1Y3Rpb25zW2ldLmlkID09PSBcIm1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2ldLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3F1YXJlQSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zcXVhcmVCID0gbnVsbDtcclxuICAgICAgICB0aGlzLm5laWdoYm9ycyA9IG51bGw7ICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXZhaWxhYmxlTW92ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB0aGlzLmF2YWlsYWJsZU1vdmVzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWdobGlnaHRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzZWxlY3RlZFdhbGxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNlbGVjdGVkV2FsbFwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkV2FsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHdhbGwgPSBzZWxlY3RlZFdhbGxzW2ldO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHdhbGwuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkV2FsbFwiKTtcclxuICAgICAgICAgICAgfSwwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGVNb3ZlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZU5laWdoYm9yc0FycmF5VG9TdHJpbmcoYXJyYXkpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJjaGFuZ2VOZWlnaGJvcnNBcnJheVRvU3RyaW5nXCIpO1xyXG4gICAgICAgIC8vY2hhbmdlcyB0aGlzLm5laWdoYm9ycyB0byBiZSBhYmxlIHRvIGJlIHJlYWQgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nc1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGlkID0gYXJyYXlbaV0uam9pbihcIlwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0aGlzLm5laWdoYm9yc1tpXSA9IGlkO1xyXG4gICAgICAgICAgICBsZXQgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7aWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJ1dHRvbihpbm5lclRleHQpIHtcclxuICAgICAgICB0aGlzLnV0aWwudHJhY2tGdW5jdGlvbnMoXCJjcmVhdGVCdXR0b25cIik7XHJcbiAgICAgICAgbGV0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgYnRuLmlubmVySFRNTCA9IGlubmVyVGV4dFxyXG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdidXR0b24nKTtcclxuICAgICAgICBpZiAoaW5uZXJUZXh0ID09PSBcIlBsYWNlIGEgd2FsbFwiKSB7XHJcbiAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInBsYWNlXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5uZXJUZXh0ID09PSBcIk1vdmUgY2hhcmFjdGVyXCIpIHtcclxuICAgICAgICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibW92ZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgaW5uZXJUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2xsZXItYnRuJyk7XHJcbiAgICAgICAgdGhpcy5ib2R5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjb250cm9sbGVyLWRpdlwiKVswXS5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgICAgIHJldHVybiBidG47XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUmVzdGFydERpdihib2FyZCwgd2lubmVyKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwiY3JlYXRlUmVzdGFydERpdlwiKTtcclxuICAgICAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBsZXQgY29uZ3JhdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XHJcbiAgICAgICAgbGV0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZShcImlkXCIsIFwicmVzdGFydC1kaXZcIik7XHJcbiAgICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicmVzdGFydFwiKTtcclxuICAgICAgICBjb25ncmF0cy5pbm5lckhUTUwgPSBgQ29uZ3JhdHMgdG8gJHt3aW5uZXJ9ISEhIWA7XHJcbiAgICAgICAgYnRuLmlubmVySFRNTCA9IFwiUmVzdGFydFwiXHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGNvbmdyYXRzKTtcclxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYnRuKTtcclxuICAgICAgICBib2FyZC5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldHVwQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy51dGlsLnRyYWNrRnVuY3Rpb25zKFwic2V0dXBCb2FyZFwiKTtcclxuICAgICAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBsZXQgYm9hcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgIGxldCBib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuICAgICAgICBib2FyZERpdi5hcHBlbmRDaGlsZChib2FyZCk7XHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGJvYXJkRGl2KTtcclxuICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChcInRhYmxlXCIpO1xyXG4gICAgICAgIGJvYXJkLnNldEF0dHJpYnV0ZShcImlkXCIgLCBcImJvYXJkXCIpO1xyXG4gICAgICAgIGxldCB3aG9zVHVybiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgd2hvc1R1cm4uY2xhc3NMaXN0LmFkZChcInBsYXllci10dXJuXCIpO1xyXG4gICAgICAgIHdob3NUdXJuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicGxheWVyLXR1cm5cIik7XHJcbiAgICAgICAgd2hvc1R1cm4uaW5uZXJIVE1MID0gXCJQbGF5ZXIgMSdzIFR1cm5cIjtcclxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQod2hvc1R1cm4pO1xyXG4gICAgICAgIGxldCBjbnRybERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgY250cmxEaXYuY2xhc3NMaXN0LmFkZChcImNvbnRyb2xsZXItZGl2XCIpO1xyXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChjbnRybERpdik7XHJcbiAgICAgICAgbGV0IHdhbGxDb3VudGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB3YWxsQ291bnRlckRpdi5jbGFzc0xpc3QuYWRkKFwid2FsbC1jb3VudGVyLWRpdlwiKTtcclxuICAgICAgICB3YWxsQ291bnRlckRpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIndhbGwtY291bnRlclwiKTtcclxuICAgICAgICBsZXQgcGxheWVyMVdhbGxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBsZXQgcGxheWVyMldhbGxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBwbGF5ZXIxV2FsbHMuY2xhc3NMaXN0LmFkZChcIndhbGwtY291bnRlclwiKTtcclxuICAgICAgICBwbGF5ZXIyV2FsbHMuY2xhc3NMaXN0LmFkZChcIndhbGwtY291bnRlclwiKTtcclxuICAgICAgICBwbGF5ZXIxV2FsbHMuaW5uZXJIVE1MID0gXCJwbGF5ZXIgMSBoYXMgMTAgd2FsbHMgbGVmdFwiO1xyXG4gICAgICAgIHBsYXllcjJXYWxscy5pbm5lckhUTUwgPSBcInBsYXllciAyIGhhcyAxMCB3YWxscyBsZWZ0XCI7XHJcbiAgICAgICAgd2FsbENvdW50ZXJEaXYuYXBwZW5kQ2hpbGQocGxheWVyMVdhbGxzKTtcclxuICAgICAgICB3YWxsQ291bnRlckRpdi5hcHBlbmRDaGlsZChwbGF5ZXIyV2FsbHMpO1xyXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZCh3YWxsQ291bnRlckRpdik7XHJcblxyXG4gICAgICAgIC8vYnVpbGQgd2FsbHMgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCdXR0b24oXCJQbGFjZSBhIHdhbGxcIik7XHJcbiAgICAgICAgLy9tb3ZlbWVudCBidXR0b25cclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbihcIk1vdmUgY2hhcmFjdGVyXCIpO1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLyogaW5zdHJ1Y3Rpb24gZm9yIGNsaWNraW5nIHNxdWFyZXMgKi9cclxuICAgICAgICBsZXQgY2xpY2tJbnN0cnVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIGNsaWNrSW5zdHJ1Y3QuY2xhc3NMaXN0LmFkZChcImNsaWNrSW5zdHJ1Y3RcIik7XHJcbiAgICAgICAgY2xpY2tJbnN0cnVjdC5pbm5lckhUTUwgPSBcIkNsaWNrIHR3byBkaXN0aW5jdCBzcXVhcmVzLi4uXCJcclxuICAgICAgICBjbGlja0luc3RydWN0LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgIGNudHJsRGl2LmFwcGVuZENoaWxkKGNsaWNrSW5zdHJ1Y3QpO1xyXG4gICAgICAgIC8qIHdhbGwgdHlwZSBidXR0b25zICovXHJcbiAgICAgICAgbGV0IG5vcnRoID0gdGhpcy5jcmVhdGVCdXR0b24oXCJOb3J0aFwiKTtcclxuICAgICAgICBsZXQgZWFzdCA9IHRoaXMuY3JlYXRlQnV0dG9uKFwiRWFzdFwiKTtcclxuICAgICAgICBsZXQgc291dGggPSB0aGlzLmNyZWF0ZUJ1dHRvbihcIlNvdXRoXCIpO1xyXG4gICAgICAgIGxldCB3ZXN0ID0gdGhpcy5jcmVhdGVCdXR0b24oXCJXZXN0XCIpO1xyXG4gICAgICAgIG5vcnRoLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIsIFwibm9ydGhcIik7XHJcbiAgICAgICAgZWFzdC5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiLCBcImVhc3RcIik7XHJcbiAgICAgICAgc291dGguY2xhc3NMaXN0LmFkZChcImhpZGVcIiwgXCJzb3V0aFwiKTtcclxuICAgICAgICB3ZXN0LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIsIFwid2VzdFwiKTtcclxuICAgICAgICBjbnRybERpdi5hcHBlbmRDaGlsZChub3J0aCk7XHJcbiAgICAgICAgY250cmxEaXYuYXBwZW5kQ2hpbGQoc291dGgpO1xyXG4gICAgICAgIGNudHJsRGl2LmFwcGVuZENoaWxkKHdlc3QpO1xyXG4gICAgICAgIGNudHJsRGl2LmFwcGVuZENoaWxkKGVhc3QpO1xyXG5cclxuICAgICAgICAvKiBiYWNrIGJ1dHRvbiAqL1xyXG4gICAgICAgIGxldCBiYWNrID0gdGhpcy5jcmVhdGVCdXR0b24oXCJiYWNrXCIpO1xyXG4gICAgICAgIGJhY2suY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgY250cmxEaXYuYXBwZW5kQ2hpbGQoYmFjayk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgcm93SWR4ID0gMDsgcm93SWR4IDwgOTsgcm93SWR4KyspIHtcclxuICAgICAgICAgICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICBmb3IobGV0IGNvbElkeCA9IDA7IGNvbElkeCA8IDk7IGNvbElkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcbiAgICAgICAgICAgICAgICB0ZC5pZCA9IGAke3Jvd0lkeH0ke2NvbElkeH1gO1xyXG4gICAgICAgICAgICAgICAgdGQuY2xhc3NMaXN0LmFkZChcImZsb29yXCIsIFwiaGFsbFwiKTtcclxuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib2FyZC5hcHBlbmRDaGlsZCh0cik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3F1YXJlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbElkeCwgcm93SWR4KSB7XHJcbiAgICAgICAgdGhpcy53YWxscyA9IHtcclxuICAgICAgICAgICAgTm9ydGg6IGZhbHNlLFxyXG4gICAgICAgICAgICBFYXN0OiBmYWxzZSxcclxuICAgICAgICAgICAgU291dGg6IGZhbHNlLFxyXG4gICAgICAgICAgICBXZXN0OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbElkeCA9IGNvbElkeDtcclxuICAgICAgICB0aGlzLnJvd0lkeCA9IHJvd0lkeDsgXHJcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBcImVtcHR5XCI7XHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IFwibm9vbmVcIlxyXG4gICAgfVxyXG5cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWwge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhY2tGdW5jdGlvbnMoa2V5KSB7XHJcbiAgICAgICAgaWYodGhpcy5tYXBba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChrZXksIDEpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm1hcFtrZXldID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChrZXksIDEpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIGltcG9ydCBfLCB7IHRocm90dGxlIH0gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5pbXBvcnQgSWNvbiBmcm9tICcuL2ljb24ucG5nJztcclxuaW1wb3J0IEdhbWVWaWV3IGZyb20gJy4vZ2FtZV92aWV3JztcclxuaW1wb3J0IEdhbWUgZnJvbSAnLi9nYW1lJztcclxuaW1wb3J0IHsgaW8gfSBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcclxuXHJcblxyXG5mdW5jdGlvbiBpY29uQ29tcG9uZW50KCkge1xyXG4gICAgXHJcbiAgICAvLyBBZGQgdGhlIGltYWdlIHRvIG91ciBleGlzdGluZyBkaXYuXHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgZWxlbWVudC5yZWwgPSBcImljb25cIjtcclxuICAgIGVsZW1lbnQuaHJlZiA9IEljb247XHJcbiAgICBlbGVtZW50LnR5cGUgPSAnaW1hZ2UvcG5nJztcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9iYnlTcGxhc2goc29ja2V0KSB7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IGNyZWF0ZVJvb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGNvbnN0IGpvaW5Sb29tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBkaXYuc2V0QXR0cmlidXRlKCdpZCcsICdzcGxhc2gtZGl2Jyk7XHJcbiAgICBjcmVhdGVSb29tLnNldEF0dHJpYnV0ZSgnaWQnLCAnY3JlYXRlLXJvb20tYnV0dG9uJyk7XHJcbiAgICBjcmVhdGVSb29tLmlubmVySFRNTCA9IFwiQ3JlYXRlIEEgUm9vbVwiO1xyXG4gICAgY3JlYXRlUm9vbS5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgam9pblJvb20uc2V0QXR0cmlidXRlKCdpZCcsICdqb2luLXJvb20tYnV0dG9uJyk7XHJcbiAgICBqb2luUm9vbS5pbm5lckhUTUwgPSBcIkpvaW4gQSBSb29tXCI7XHJcbiAgICBqb2luUm9vbS5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGNyZWF0ZVJvb20pO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGpvaW5Sb29tKTtcclxuXHJcbiAgICAvKiogRXZlbnQgTGlzdGVuZXIgZm9yIGNyZWF0ZVJvb20gYW5kIGpvaW5Sb29tICovXHJcbiAgICBjcmVhdGVSb29tLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIC8qKiBkZWxldGVzIGRpdiBhbmQgYWRkcyBhIGZvcm0gdG8gY3JlYXRlIGEgcm9vbSAqL1xyXG4gICAgICAgIGRpdi5yZW1vdmUoKTtcclxuICAgICAgICBjcmVhdGVSb29tRm9ybShzb2NrZXQpO1xyXG4gICAgfSk7XHJcbiAgICBqb2luUm9vbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAvKiogZW1pdHMgZ2V0Um9vbU5hbWVzIGFuZCBtYWtlIHRoZSByb29tIG5hbWVzIGJ1dHRvbnMgKi9cclxuICAgICAgICBjb25zdCBjYWxsYmFjayA9IChyb29tTmFtZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZSb29tcyA9IGxvYmJ5Um9vbXNMaXN0KHNvY2tldCwgcm9vbU5hbWVzKTtcclxuICAgICAgICAgICAgaWYgKG51bWJlck9mUm9vbXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBkaXYucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9iYnktcm9vbXMtbGlzdC1kaXYnKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc29ja2V0LmVtaXQoJ2dldFJvb21OYW1lcycsIGNhbGxiYWNrKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoZGl2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9iYnlSb29tc0xpc3Qoc29ja2V0LCByb29tTmFtZXMpIHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnbG9iYnktcm9vbXMtbGlzdC1kaXYnKTtcclxuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHNvY2tldC5lbWl0KCdyZWFkeScpO1xyXG4gICAgfTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm9vbU5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHJvb21OYW1lc1tpXS5zb2NrZXRzIDwgMikge1xyXG4gICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gcm9vbU5hbWVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGl2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2pvaW5Sb29tJywgcm9vbU5hbWVzW2ldLmlkLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGl2LmFwcGVuZENoaWxkKHVsKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgIHJldHVybiByb29tTmFtZXMubGVuZ3RoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVSb29tRm9ybShzb2NrZXQpIHtcclxuXHJcbiAgICBjb25zdCByb29tRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xyXG4gICAgY29uc3QgZm9ybURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBjb25zdCByb29tSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBjb25zdCByb29tQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgIHJvb21Gb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicm9vbS1mb3JtXCIpO1xyXG4gICAgZm9ybURpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImZvcm0tZGl2XCIpO1xyXG4gICAgcm9vbUlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwicm9vbS1pbnB1dFwiKTtcclxuICAgIHJvb21JbnB1dC5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBcIlR5cGUgcm9vbSBuYW1lXCIpO1xyXG4gICAgcm9vbUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInJvb20tYnV0dG9uXCIpO1xyXG4gICAgcm9vbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgcm9vbUJ1dHRvbi5pbm5lckhUTUwgPSBcIkdvIVwiXHJcblxyXG4gICAgZm9ybURpdi5hcHBlbmRDaGlsZChyb29tRm9ybSk7XHJcbiAgICByb29tRm9ybS5hcHBlbmRDaGlsZChyb29tSW5wdXQpO1xyXG4gICAgcm9vbUZvcm0uYXBwZW5kQ2hpbGQocm9vbUJ1dHRvbik7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoZm9ybURpdik7XHJcbiAgICBcclxuXHJcblxyXG4gICAgcm9vbUZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaWYgKHJvb21JbnB1dC52YWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IChib29sKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihib29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybURpdi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgncmVhZHknKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vbUlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiUm9vbSBMaXN0IGlzIGZ1bGxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzb2NrZXQuZW1pdCgnY3JlYXRlUm9vbScsIHJvb21JbnB1dC52YWx1ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByb29tSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzb2NrZXQub24oJ2pvaW4tcm9vbScsIChyb29tSUQpID0+IHtcclxuICAgICAgICBmb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgIGdhbWVMb2JieShzb2NrZXQsIHJvb21JRCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzb2NrZXQub24oJ2xvYmJ5LW1lc3NhZ2UnLCAoW2lkLCBtc2ddKSA9PiB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgIGl0ZW0udGV4dENvbnRlbnQgPSBpZCArIFwiIC0+IFwiICsgbXNnO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2JieS1tZXNzYWdlcycpLmFwcGVuZENoaWxkKGl0ZW0pO1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzb2NrZXQub24oJ3N0YXJ0LWdhbWUnLCAoW3NvY2tldCwgcm9vbV0pID0+IHtcclxuICAgICAgICBpZighZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFibGUnKVswXSkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9iYnktZGl2JykuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIGdhbWVUYWJsZShzb2NrZXQsIHJvb20pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnYW1lTG9iYnkoc29ja2V0LCByb29tKSB7XHJcbiAgICBpZighZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYmJ5LWRpdicpKSB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBjb25zdCBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKVxyXG4gICAgICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0R2FtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibG9iYnktZGl2XCIpO1xyXG4gICAgICAgIGgxLmlubmVySFRNTCA9IHJvb207XHJcbiAgICAgICAgaDEuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJsb2JieS1pZFwiKTtcclxuICAgICAgICB1bC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImxvYmJ5LW1lc3NhZ2VzXCIpO1xyXG4gICAgICAgIHN0YXJ0R2FtZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImxvYmJ5LXN0YXJ0LWdhbWVcIik7XHJcbiAgICAgICAgc3RhcnRHYW1lLmlubmVySFRNTCA9IFwiU3RhcnQgR2FtZSFcIjtcclxuICAgICAgICBmb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibG9iYnktZm9ybVwiKTtcclxuICAgICAgICBmb3JtLnNldEF0dHJpYnV0ZShcImFjdGlvblwiLCBcIlwiKTtcclxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImxvYmJ5LWlucHV0XCIpO1xyXG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcclxuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gXCJzZW5kXCI7XHJcbiAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgIHVsLmFwcGVuZENoaWxkKGZvcm0pO1xyXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChoMSk7XHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKHVsKTtcclxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3RhcnRHYW1lKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnbG9iYnktbWVzc2FnZScsIFtyb29tLCBpbnB1dC52YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN0YXJ0R2FtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzdGFydC1nYW1lJywgW3NvY2tldC5pZCwgcm9vbV0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdhbWVUYWJsZShzb2NrZXQsIEpTT05yb29tKSB7XHJcbiAgICBjb25zdCByb29tID0gSlNPTi5wYXJzZShKU09Ocm9vbSk7XHJcbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoc29ja2V0LCByb29tKTtcclxuICAgIGxldCB3aW5uZXIgPSBudWxsO1xyXG4gICAgLy8gc2V0dXBCb2FyZCgpO1xyXG4gICAgY29uc3QgZ2FtZVZpZXcgPSBuZXcgR2FtZVZpZXcoc29ja2V0LCByb29tLCBnYW1lKTtcclxuICAgIGdhbWUuc3RhcnQoKTtcclxuICAgIGdhbWVWaWV3LnNob3coKTtcclxuXHJcbiAgICBzb2NrZXQub24oJ3BsYXllck1vdmUnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGxldCBvbGRSb3cgPSBkYXRhLm9sZFBvc1swXTtcclxuICAgICAgICBsZXQgb2xkQ29sID0gZGF0YS5vbGRQb3NbMV07XHJcbiAgICAgICAgbGV0IG5ld1JvdyA9IGRhdGEubmV3UG9zWzBdO1xyXG4gICAgICAgIGxldCBuZXdDb2wgPSBkYXRhLm5ld1Bvc1sxXTtcclxuICAgICAgICBnYW1lLmJvYXJkLmdyaWRbb2xkUm93XVtvbGRDb2xdLnBsYXllciA9IFwiZW1wdHlcIjtcclxuICAgICAgICBnYW1lLmJvYXJkLmdyaWRbbmV3Um93XVtuZXdDb2xdLnBsYXllciA9IGRhdGEucGxheWVyO1xyXG4gICAgICAgIGdhbWUuc3dhcFR1cm4oKTtcclxuICAgICAgICBnYW1lVmlldy5zaG93KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzb2NrZXQub24oJ3BsYWNlV2FsbCcsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zQSA9IGRhdGEud2FsbEE7XHJcbiAgICAgICAgY29uc3QgcG9zQiA9IGRhdGEud2FsbEI7XHJcbiAgICAgICAgY29uc3QgcG9zQyA9IGRhdGEud2FsbEM7XHJcbiAgICAgICAgY29uc3QgcG9zRCA9IGRhdGEud2FsbEQ7XHJcbiAgICAgICAgY29uc3Qgc3FyQSA9IGdhbWUuYm9hcmQuZ3JpZFtwb3NBWzBdXVtwb3NBWzFdXTtcclxuICAgICAgICBjb25zdCBzcXJCID0gZ2FtZS5ib2FyZC5ncmlkW3Bvc0JbMF1dW3Bvc0JbMV1dO1xyXG4gICAgICAgIGNvbnN0IHNxckMgPSBnYW1lLmJvYXJkLmdyaWRbcG9zQ1swXV1bcG9zQ1sxXV07XHJcbiAgICAgICAgY29uc3Qgc3FyRCA9IGdhbWUuYm9hcmQuZ3JpZFtwb3NEWzBdXVtwb3NEWzFdXTtcclxuICAgICAgICBpZiAoIGRhdGEuZGlyID09PSBcIm5vcnRoXCIgKSB7XHJcbiAgICAgICAgICAgIHNxckEud2FsbHMuTm9ydGggPSB0cnVlO1xyXG4gICAgICAgICAgICBzcXJCLndhbGxzLk5vcnRoID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3FyQy53YWxscy5Tb3V0aCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckQud2FsbHMuU291dGggPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5kaXIgPT09IFwic291dGhcIiApIHtcclxuICAgICAgICAgICAgc3FyQS53YWxscy5Tb3V0aCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckIud2FsbHMuU291dGggPSB0cnVlO1xyXG4gICAgICAgICAgICBzcXJDLndhbGxzLk5vcnRoID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3FyRC53YWxscy5Ob3J0aCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmRpciA9PT0gXCJlYXN0XCIgKSB7XHJcbiAgICAgICAgICAgIHNxckEud2FsbHMuRWFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckIud2FsbHMuRWFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckMud2FsbHMuV2VzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckQud2FsbHMuV2VzdCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmRpciA9PT0gXCJ3ZXN0XCIgKSB7XHJcbiAgICAgICAgICAgIHNxckEud2FsbHMuV2VzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckIud2FsbHMuV2VzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckMud2FsbHMuRWFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNxckQud2FsbHMuRWFzdCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5zd2FwVHVybigpO1xyXG4gICAgICAgIGdhbWVWaWV3LnNob3coKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNvY2tldC5vbignZ2FtZU92ZXInLCAoaWQpID0+IHtcclxuICAgICAgICBnYW1lLmN1cnJlbnRQbGF5ZXIgPSBcIm5vb25lXCI7XHJcbiAgICAgICAgbGV0IHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFibGUnKVswXTtcclxuICAgICAgICBpZiAodGFibGUpIHtcclxuICAgICAgICAgICAgdGFibGUucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBpZiAoIXdpbm5lcikge1xyXG4gICAgICAgICAgICB3aW5uZXIgPSBpZDtcclxuICAgICAgICAgICAgZ2FtZU92ZXIoc29ja2V0LmlkLCBpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHt3aW5uZXJ9IHdpbm5lciBJcyBhbiBJRCBvZiB0aGUgd2lubmVyIG9mIHRoZSBnYW1lLlxyXG4gKiBEaXNwbGF5cyB0aGUgd2lubmVyIGFuZCB0aGVuIHJlbG9hZHMgdGhlIHBhZ2UuIFxyXG4gKi9cclxuZnVuY3Rpb24gZ2FtZU92ZXIoc29ja2V0SWQsIHdpbm5lcikge1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ3aW5uZXItZGl2XCIpO1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XHJcbiAgICBtZXNzYWdlLnNldEF0dHJpYnV0ZShcImlkXCIsIFwid2lubmVyLW1lc3NhZ2VcIik7XHJcbiAgICBtZXNzYWdlLmlubmVySFRNTCA9IHNvY2tldElkID09PSB3aW5uZXIgPyBcIkNPTkdSQVRTIFlPVSBXT04hISFcIiA6IFwic3Vja3MgdG8gc3Vjay4uIHRyeSBhZ2FpbiBuZXh0IHRpbWVcIjtcclxuICAgIGRpdi5hcHBlbmRDaGlsZChtZXNzYWdlKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXS5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9LDUwMDApO1xyXG59XHJcblxyXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGljb25Db21wb25lbnQoKSk7XHJcblxyXG5cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIFxyXG4gICAgY29uc3Qgc29ja2V0ID0gaW8oKTtcclxuICAgIC8vIGNvbnN0IHJvb20gPSB7XHJcbiAgICAvLyAgICAgaWQ6IFwieHh4eHh4eFwiLCBcclxuICAgIC8vICAgICBuYW1lOiBcInJvb21cIiwgXHJcbiAgICAvLyAgICAgc29ja2V0czogW1widGVzdDFcIiwgXCJ0ZXN0MlwiXSxcclxuICAgIC8vICAgICBwbGF5ZXIxOiAndGVzdDEnLFxyXG4gICAgLy8gICAgIHBsYXllcjI6ICd0ZXN0MicsXHJcbiAgICAvLyB9O1xyXG4gICAgLy8gZ2FtZVRhYmxlKHNvY2tldCwgSlNPTi5zdHJpbmdpZnkocm9vbSkpO1xyXG5cclxuICAgIGxvYmJ5U3BsYXNoKHNvY2tldCk7XHJcblxyXG4gICAgc29ja2V0Lm9uKCdpbml0R2FtZScsIChyb29tKSA9PiB7XHJcbiAgICAgICAgZ2FtZVRhYmxlKHNvY2tldCwgcm9vbSk7XHJcbiAgICB9KTtcclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgaW8gZnJvbSBcIi4vYnVpbGQvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IE1hbmFnZXIgPSBpby5NYW5hZ2VyO1xuZXhwb3J0IHsgaW8gfTtcbmV4cG9ydCBkZWZhdWx0IGlvO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==