(()=>{var t={10:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},704:(t,e)=>{!function(t){"use strict";e.encode=function(e){var r,n=new Uint8Array(e),i=n.length,o="";for(r=0;r<i;r+=3)o+=t[n[r]>>2],o+=t[(3&n[r])<<4|n[r+1]>>4],o+=t[(15&n[r+1])<<2|n[r+2]>>6],o+=t[63&n[r+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(e){var r,n,i,o,s,a=.75*e.length,A=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),d=new Uint8Array(c);for(r=0;r<A;r+=4)n=t.indexOf(e[r]),i=t.indexOf(e[r+1]),o=t.indexOf(e[r+2]),s=t.indexOf(e[r+3]),d[l++]=n<<2|i>>4,d[l++]=(15&i)<<4|o>>2,d[l++]=(3&o)<<6|63&s;return c}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},767:t=>{function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((r=n[i])===e||r.fn===e){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),r=this._callbacks["$"+t],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(r){n=0;for(var i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},192:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(15),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap);"]),s.push([t.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html{background:#4d618b}body{line-height:1;width:100vw;height:100vh;display:flex;justify-content:center}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}@media only screen and (max-width: 321px){table{font-size:1em}.hide{display:none}#board{width:95%;min-height:304px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:33px;height:33px;border:2px solid #4d618b;background:#7686a8}tr{height:33px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.3em;line-height:36px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:10px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1em;max-width:75px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 376px)and (min-width: 322px){table{font-size:1em}.hide{display:none}#board{width:95%;max-height:3360px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:36px;height:36px;border:2px solid #4d618b;background:#7686a8}tr{height:43px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.7em;line-height:36px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:10px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1em;max-width:75px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 640px)and (min-width: 377px){table{font-size:1em}.hide{display:none}#board{width:387px;max-height:387px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:2px solid #ffb000;z-index:9}.wall-bottom{border-bottom:2px solid #ffb000;z-index:9}.wall-right{border-right:2px solid #ffb000;z-index:9}.wall-left{border-left:2px solid #ffb000;z-index:9}.table{width:100vw;border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:39px;height:39px;border:2px solid #4d618b;background:#7686a8}tr{height:43px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.7em;line-height:43px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:13px;text-align:center}.wall-counter-div{margin:2em auto;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:1.25em;max-width:80px;margin-left:20px;margin-right:20px}}@media only screen and (max-width: 768px)and (min-width: 641px){table{font-size:1em}.hide{display:none}#board{width:495px;height:495px;margin-top:2em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:49px;height:49px;border:3px solid #4d618b;background:#7686a8}tr{height:55px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;cursor:pointer;border:none;margin:auto;height:45px;width:100px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:30px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (max-width: 1024px)and (min-width: 769px){table{font-size:1em}.hide{display:none}#board{width:495px;height:495px;margin-top:1em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:49px;height:49px;border:3px solid #4d618b;background:#7686a8}tr{height:55px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1em;cursor:pointer;border:none;margin:auto;height:55px;width:133px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:5px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (max-width: 1440px)and (min-width: 1025px){table{font-size:1em}.hide{display:none}#board{width:630px;height:630px;margin-top:1em;margin-left:auto;margin-right:auto}.wall-top{border-top:3px solid #ffb000;z-index:9}.wall-bottom{border-bottom:3px solid #ffb000;z-index:9}.wall-right{border-right:3px solid #ffb000;z-index:9}.wall-left{border-left:3px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:60px;height:60px;border:5px solid #4d618b;background:#7686a8}tr{height:70px}.button{padding:5px 7px}.controller-div{margin:1em auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-div>p{font-family:"Quantico",sans-serif;font-size:1em}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1em;cursor:pointer;border:none;margin:auto;height:55px;width:133px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:1.75em;line-height:55px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;padding:20px;margin:0 auto}.wall-counter-div{margin-top:5px;display:flex}.wall-counter{font-family:"Quantico",sans-serif;margin:auto}}@media only screen and (min-width: 1441px){table{font-size:1em}.hide{display:none}#board{width:720px;height:720px;margin-top:3em;margin-left:auto;margin-right:auto}.wall-top{border-top:5px solid #ffb000;z-index:9}.wall-bottom{border-bottom:5px solid #ffb000;z-index:9}.wall-right{border-right:5px solid #ffb000;z-index:9}.wall-left{border-left:5px solid #ffb000;z-index:9}.table{border-spacing:0;display:flex;flex-direction:column}.hall{z-index:5}td{width:70px;height:70px;border:5px solid #4d618b;background:#7686a8}tr{height:80px}.button{padding:5px 7px}.controller-div{margin:0 auto;width:80%;padding:5px 7px;display:flex;justify-content:space-between}.controller-div>p{font-family:"Quantico",sans-serif;font-size:1.5em}.controller-btn{background:#b8c3d9;font-family:"Quantico",sans-serif;font-size:1.5em;cursor:pointer;border:none;margin:0 auto;height:75px;width:200px;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.controller-btn:hover{transition:.3s ease-in-out;background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.player{font-size:3em;line-height:80px;text-align:center}.highlight{background:#8dbb5e}.highlight:hover{background:#bde297}.selectedWall{background:#b02d1f}.player-turn{font-family:"Quantico",sans-serif;font-size:2em;padding:20px;margin:0 auto}.wall-counter-div{margin-top:2em;display:flex}.wall-counter{font-family:"Quantico",sans-serif;font-size:2em;margin:auto}}#restart-div{position:fixed;display:flex;flex-direction:column;font-size:2em;padding:15px;margin:200px;background-color:#fff;width:400px;height:200px}#restart-div h1{margin:10px auto}#restart-div button{margin:auto;width:30%;height:15%}.buttonTest{width:300px;height:100px}#roomForm{background:rgba(0,0,0,.15);margin:auto}#formDiv{margin:30% auto}#roomInput{border:none;padding:0 1rem;flex-grow:1;border-radius:2rem;margin:.25rem}#roomInput:focus{outline:none}#roomButton{background:#333;border:none;padding:0 1rem;margin:.25rem;border-radius:3px;outline:none;color:#fff}#roomButton:hover{background:gray}#lobby-div{width:80%}#lobby-div>h1{background:#fff;text-align:center}#lobby-form{background:rgba(0,0,0,.15);padding:.25rem;position:fixed;bottom:0;left:0;right:0;display:flex;height:3rem;box-sizing:border-box;backdrop-filter:blur(10px)}#lobby-input{border:none;padding:0 1rem;flex-grow:1;border-radius:2rem;margin:.25rem}#lobby-input:focus{outline:none}#lobby-form>button{background:#333;border:none;padding:0 1rem;margin:.25rem;border-radius:3px;outline:none;color:#fff}#lobby-form>button:hover{background:gray}#lobby-messages{background:#fff;list-style-type:none;margin:100px 0;padding:0;width:100%;height:100%}#lobby-messages>li{padding:.5rem 1rem}#lobby-messages>li:nth-child(odd){background:#efefef}#lobby-start-game{width:100px;height:50px}#splash-div{background:#a6b1c9;width:21em;height:21em;margin:15em auto auto auto;display:flex;flex-direction:column;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}.btn{background:#b8c3d9;border:none;margin:auto;height:5em;width:13em;transition:transform .3s ease-in-out;box-shadow:0 1.4px 1.1px rgba(0,0,0,.034),0 3.4px 2.6px rgba(0,0,0,.048),0 7.7px 5px rgba(0,0,0,.06),0 11.15px 8.5px rgba(0,0,0,.086),0 50px 40px rgba(0,0,0,.12)}.btn:hover{transition:.3s ease-in-out;transform:scale(1.1);background:#7383a6;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#form-div{background:#a6b1c9;width:21em;height:21em;margin:15em auto auto auto;display:flex;flex-direction:column;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#room-form{width:100%;height:100%;display:flex;flex-direction:column}#room-input{text-align:center;width:50%;margin:auto;line-height:1.5;font:700 1.2rem "Roboto Slab",sans-serif;padding:1em 2em;letter-spacing:.05rem}#room-button{margin:auto}#lobby-rooms-list-div{background:#a6b1c9;width:21em;margin:15em auto auto auto;display:flex;flex-direction:column;justify-content:center;align-items:center;box-shadow:0 2.8px 2.2px rgba(0,0,0,.034),0 6.7px 5.3px rgba(0,0,0,.048),0 15.5px 10px rgba(0,0,0,.06),0 22.3px 17.9px rgba(0,0,0,.086),0 100px 80px rgba(0,0,0,.12)}#lobby-rooms-list-div>ul>li>button{margin:1.3em}.btn{color:#403174;transition:color .25s .0833333333s;position:relative}.btn::before,.btn::after{border:0 solid transparent;box-sizing:border-box;content:"";pointer-events:none;position:absolute;width:0;height:0;bottom:0;right:0}.btn::before{border-bottom-width:4px;border-left-width:4px}.btn::after{border-top-width:4px;border-right-width:4px}.btn:hover{color:#b1a9cd}.btn:hover::before,.btn:hover::after{border-color:#b1a9cd;transition:border-color 0s,width .25s,height .25s;width:100%;height:100%}.btn:hover::before{transition-delay:0s,0s,.25s}.btn:hover::after{transition-delay:0s,.25s,0s}.controller-btn{color:#403174;transition:color .25s .0833333333s;position:relative}.controller-btn::before,.controller-btn::after{border:0 solid transparent;box-sizing:border-box;content:"";pointer-events:none;position:absolute;width:0;height:0;bottom:0;right:0}.controller-btn::before{border-bottom-width:4px;border-left-width:4px}.controller-btn::after{border-top-width:4px;border-right-width:4px}.controller-btn:hover{color:#b1a9cd}.controller-btn:hover::before,.controller-btn:hover::after{border-color:#b1a9cd;transition:border-color 0s,width .25s,height .25s;width:100%;height:100%}.controller-btn:hover::before{transition-delay:0s,0s,.25s}.controller-btn:hover::after{transition-delay:0s,.25s,0s}.btn{cursor:pointer;line-height:1.5;font:700 1.2rem "Roboto Slab",sans-serif;padding:1em 2em;letter-spacing:.05rem}#winner-div{background:#a6b1c9;width:30vw;height:30vw;margin:auto;position:relative}#winner-message{color:#403174;font-family:"Quantico",sans-serif;font-size:3em;font-weight:bold;text-align:center;position:absolute;bottom:50%}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AASA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAID,KACC,kBAAA,CAGD,KACC,aAAA,CACA,WAAA,CACA,YAAA,CACA,YAAA,CACA,sBAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAOD,0CACC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,SAAA,CACA,gBAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,WAAA,CACA,gBAAA,CACA,YAAA,CACA,qBAAA,CAED,MAGC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QAEC,eAAA,CAED,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAID,gBACC,kBAAA,CACA,iCAAA,CAEA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAOF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,eAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAGD,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,iBAAA,CAGD,kBACC,eAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,aAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAAA,CAMF,gEACC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,SAAA,CACA,iBAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,WAAA,CACA,gBAAA,CACA,YAAA,CACA,qBAAA,CAED,MAGC,SAAA,CAQD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QAEC,eAAA,CAED,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAID,gBACC,kBAAA,CACA,iCAAA,CAEA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAOF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,eAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAGD,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,iBAAA,CAGD,kBACC,eAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,aAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAAA,CAMF,gEACC,MACC,aAAA,CAID,MACC,YAAA,CAGD,OACC,WAAA,CACA,gBAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,WAAA,CACA,gBAAA,CACA,YAAA,CACA,qBAAA,CAED,MAGC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QAEC,eAAA,CAED,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAID,gBACC,kBAAA,CACA,iCAAA,CAEA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAOF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,eAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAGD,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,iBAAA,CAGD,kBACC,eAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,gBAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAAA,CAMF,gEAEC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,WAAA,CACA,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,gBAAA,CACA,YAAA,CACA,qBAAA,CAGD,MACC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QACC,eAAA,CAGD,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAED,gBACC,kBAAA,CACA,iCAAA,CACA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAMF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,gBAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAED,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,aAAA,CAGD,kBACC,eAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,WAAA,CAAA,CAKF,iEAEC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,WAAA,CACA,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,gBAAA,CACA,YAAA,CACA,qBAAA,CAGD,MACC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QACC,eAAA,CAGD,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAED,gBACC,kBAAA,CACA,iCAAA,CACA,aAAA,CACA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAMF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,gBAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAED,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,aAAA,CAGD,kBACC,cAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,WAAA,CAAA,CAKF,kEAEC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,WAAA,CACA,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,gBAAA,CACA,YAAA,CACA,qBAAA,CAGD,MACC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QACC,eAAA,CAGD,gBACC,eAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAED,kBACC,iCAAA,CACA,aAAA,CAED,gBACC,kBAAA,CACA,iCAAA,CACA,aAAA,CACA,cAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAMF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,gBAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAED,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,YAAA,CACA,aAAA,CAGD,kBACC,cAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,WAAA,CAAA,CAKF,2CAEC,MACC,aAAA,CAGD,MACC,YAAA,CAGD,OACC,WAAA,CACA,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAGD,UACC,4BAAA,CACA,SAAA,CAGD,aACC,+BAAA,CACA,SAAA,CAGD,YACC,8BAAA,CACA,SAAA,CAGD,WACC,6BAAA,CACA,SAAA,CAGD,OACC,gBAAA,CACA,YAAA,CACA,qBAAA,CAGD,MACC,SAAA,CAGD,GACC,UAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAED,GACC,WAAA,CAGD,QACC,eAAA,CAGD,gBACC,aAAA,CACA,SAAA,CACA,eAAA,CACA,YAAA,CACA,6BAAA,CAED,kBACC,iCAAA,CACA,eAAA,CAED,gBACC,kBAAA,CACA,iCAAA,CACA,eAAA,CACA,cAAA,CACA,WAAA,CACA,aAAA,CACA,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iKACC,CAMF,sBACC,0BAAA,CACA,kBAAA,CACA,oKACC,CAOF,QACC,aAAA,CACA,gBAAA,CACA,iBAAA,CAGD,WACC,kBAAA,CAED,iBACC,kBAAA,CAED,cACC,kBAAA,CAGD,aACC,iCAAA,CACA,aAAA,CACA,YAAA,CACA,aAAA,CAGD,kBACC,cAAA,CACA,YAAA,CAED,cACC,iCAAA,CACA,aAAA,CACA,WAAA,CAAA,CAKF,aACC,cAAA,CACA,YAAA,CACA,qBAAA,CACA,aAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CAGD,gBACC,gBAAA,CAGD,oBACC,WAAA,CACA,SAAA,CACA,UAAA,CAGD,YACC,WAAA,CACA,YAAA,CAGD,UACC,0BAAA,CACA,WAAA,CAGD,SACC,eAAA,CAGD,WACC,WAAA,CACA,cAAA,CACA,WAAA,CACA,kBAAA,CACA,aAAA,CAGD,iBACC,YAAA,CAGD,YACC,eAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,UAAA,CAED,kBACC,eAAA,CAGD,WAEC,SAAA,CAED,cACC,eAAA,CACA,iBAAA,CAED,YACC,0BAAA,CACA,cAAA,CACA,cAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,0BAAA,CAED,aACC,WAAA,CACA,cAAA,CACA,WAAA,CACA,kBAAA,CACA,aAAA,CAED,mBAAA,YAAA,CACA,mBACC,eAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,UAAA,CAED,yBACC,eAAA,CAGD,gBACC,eAAA,CACA,oBAAA,CACA,cAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAED,mBAAA,kBAAA,CACA,kCAAA,kBAAA,CACA,kBACC,WAAA,CACA,WAAA,CAID,YACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,oKACC,CAOF,KACC,kBAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,UAAA,CACA,oCAAA,CACA,iKACC,CAOF,WACC,0BAAA,CACA,oBAAA,CACA,kBAAA,CACA,oKACC,CAQF,UACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,oKACC,CAOF,WACC,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAGD,YACC,iBAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACE,wCAAA,CACA,eAAA,CACA,qBAAA,CAGH,aACE,WAAA,CAIF,sBACC,kBAAA,CACA,UAAA,CACA,0BAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,oKACC,CAQF,mCACC,YAAA,CAyDD,KAhDE,aAiD4B,CAhD5B,kCAAA,CACA,iBAAA,CAEA,yBAEE,0BAAA,CACA,qBAAA,CACA,UAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CAAA,QAAA,CAEA,QAAA,CACA,OAAA,CAGF,aAGE,uBA6B4C,CA5B5C,qBA4B4C,CAzB9C,YAGE,oBAsB4C,CArB5C,sBAqB4C,CAlB9C,WACE,aAiBmC,CAfnC,qCAEE,oBAaiC,CAZjC,iDAAA,CACA,UAAA,CACA,WAAA,CAGF,mBAAA,2BAAA,CAEA,kBAAA,2BAAA,CAOJ,gBAnDE,aAoD4B,CAnD5B,kCAAA,CACA,iBAAA,CAEA,+CAEE,0BAAA,CACA,qBAAA,CACA,UAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CAAA,QAAA,CAEA,QAAA,CACA,OAAA,CAGF,wBAGE,uBAgC4C,CA/B5C,qBA+B4C,CA5B9C,uBAGE,oBAyB4C,CAxB5C,sBAwB4C,CArB9C,sBACE,aAoBmC,CAlBnC,2DAEE,oBAgBiC,CAfjC,iDAAA,CACA,UAAA,CACA,WAAA,CAGF,8BAAA,2BAAA,CAEA,6BAAA,2BAAA,CAYJ,KAEE,cAAA,CACA,eAAA,CACA,wCAAA,CACA,eAAA,CACA,qBAAA,CAKF,YACC,kBAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CAED,gBACC,aAAA,CACA,iCAAA,CACA,aAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CACA,UAAA",sourcesContent:["\r\n\r\n/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap');\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\n\r\n\r\nhtml {\r\n\tbackground: #4D618B;\r\n}\r\n\r\nbody {\r\n\tline-height: 1;\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\n\r\n/*\r\n\tmedia queries\r\n*/\r\n/* small phone */\r\n@media only screen and (max-width: 321px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 95%;\r\n\t\tmin-height: 304px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\t\r\n\t\r\n\ttd {\r\n\t\twidth: 33px;\r\n\t\theight: 33px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 33px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\t\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.3em;\r\n\t\tline-height: 36px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 10px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tmax-width: 75px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* medium phone */\r\n@media only screen and (max-width: 376px) and (min-width: 322px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 95%;\r\n\t\tmax-height: 3360px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\r\n\t.table .floor { \r\n\t\t/* background: brown;  */\r\n\t\t// margin: 1px;\r\n\t}\r\n\t\r\n\t\r\n\ttd {\r\n\t\twidth: 36px;\r\n\t\theight: 36px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 43px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\t\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.7em;\r\n\t\tline-height: 36px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 10px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tmax-width: 75px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* large phone */\r\n@media only screen and (max-width: 640px) and (min-width: 377px) {\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t\t\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 387px;\r\n\t\tmax-height: 387px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\r\n\t.wall-top {\r\n\t\tborder-top: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 2px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\twidth: 100vw;\r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\t.hall { \r\n\t\t/* border: 5px solid #3A638E;  */\r\n\t\t/* width: 4em; height: 4em;  */\r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 39px;\r\n\t\theight: 39px;\r\n\t\tborder: 2px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 43px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\t/* margin: 20px auto; */\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\r\n\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\t// letter-spacing: 0.05rem;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.7em;\r\n\t\tline-height: 43px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\r\n\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\r\n\t\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 13px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin: 2em auto;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.25em;\r\n\t\tmax-width: 80px;\r\n\t\tmargin-left: 20px;\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\t\r\n}\r\n\r\n/* tablet */\r\n@media only screen and (max-width: 768px) and (min-width: 641px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 495px;\r\n\t\theight: 495px;\r\n\t\tmargin-top: 2em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 49px;\r\n\t\theight: 49px;\r\n\t\tborder: 3px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 55px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 45px;\r\n\t\twidth: 100px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 30px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* laptop 1024px */\r\n@media only screen and (max-width: 1024px) and (min-width: 769px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 495px;\r\n\t\theight: 495px;\r\n\t\tmargin-top: 1em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 49px;\r\n\t\theight: 49px;\r\n\t\tborder: 3px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 55px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 55px;\r\n\t\twidth: 133px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 5px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* large laptop */\r\n@media only screen and (max-width: 1440px) and (min-width: 1025px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 630px;\r\n\t\theight: 630px;\r\n\t\tmargin-top: 1em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 3px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 60px;\r\n\t\theight: 60px;\r\n\t\tborder: 5px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 70px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 1em auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-div > p {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: auto;\r\n\t\theight: 55px;\r\n\t\twidth: 133px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 1.75em;\r\n\t\tline-height: 55px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 5px;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n/* 4k laptop */\r\n@media only screen and (min-width: 1441px) {\r\n\r\n\ttable {\r\n\t\tfont-size: 1em;\r\n\t}\r\n\t\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#board {\r\n\t\twidth: 720px;\r\n\t\theight: 720px;\r\n\t\tmargin-top: 3em;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-right: auto;\r\n\t}\r\n\t\r\n\t.wall-top {\r\n\t\tborder-top: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-bottom {\r\n\t\tborder-bottom: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-right {\r\n\t\tborder-right: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.wall-left {\r\n\t\tborder-left: 5px solid #FFB000;\r\n\t\tz-index: 9;\r\n\t}\r\n\t\r\n\t.table { \r\n\t\tborder-spacing: 0; \r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.hall { \r\n\t\tz-index: 5;\r\n\t}\r\n\t\r\n\ttd {\r\n\t\twidth: 70px;\r\n\t\theight: 70px;\r\n\t\tborder: 5px solid #4D618B;\r\n\t\tbackground: #7686A8; \r\n\t}\r\n\ttr {\r\n\t\theight: 80px;\r\n\t}\r\n\t\r\n\t.button {\r\n\t\tpadding: 5px 7px;\r\n\t}\r\n\r\n\t.controller-div {\r\n\t\tmargin: 0 auto;\r\n\t\twidth: 80%;\r\n\t\tpadding: 5px 7px;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t.controller-div > p {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.5em;\r\n\t}\r\n\t.controller-btn {\r\n\t\tbackground: #B8C3D9;\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 1.5em;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tmargin: 0 auto;\r\n\t\theight: 75px;\r\n\t\twidth: 200px;\r\n\t\ttransition: transform .3s ease-in-out;\r\n\t\tbox-shadow: \r\n\t\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.controller-btn:hover {\r\n\t\ttransition: .3s ease-in-out;\r\n\t\tbackground: #7383A6;\r\n\t\tbox-shadow: \r\n\t\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t\r\n\t.player {\r\n\t\tfont-size: 3em;\r\n\t\tline-height: 80px;\r\n\t\ttext-align: center;\r\n\t}\r\n\t\r\n\t.highlight {\r\n\t\tbackground: #8DBB5E;\r\n\t}\r\n\t.highlight:hover{\r\n\t\tbackground: #BDE297;\r\n\t}\t\r\n\t.selectedWall {\r\n\t\tbackground: #B02D1F;\r\n\t}\t\r\n\r\n\t.player-turn {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 2em;\r\n\t\tpadding: 20px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\t\r\n\t.wall-counter-div {\r\n\t\tmargin-top: 2em;\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.wall-counter {\r\n\t\tfont-family: 'Quantico', sans-serif;\r\n\t\tfont-size: 2em;\r\n\t\tmargin: auto;\r\n\t}\r\n}\r\n\r\n\r\n#restart-div {\r\n\tposition: fixed;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tfont-size: 2em;\r\n\tpadding: 15px;\r\n\tmargin: 200px;\r\n\tbackground-color: white;\r\n\twidth: 400px;\r\n\theight: 200px;\r\n}\r\n\r\n#restart-div h1 {\r\n\tmargin: 10px auto;\r\n}\r\n\r\n#restart-div button {\r\n\tmargin: auto;\r\n\twidth: 30%;\r\n\theight: 15%;\r\n}\r\n\r\n.buttonTest {\r\n\twidth: 300px;\r\n\theight: 100px;\r\n}\r\n\r\n#roomForm {\r\n\tbackground: rgba(0, 0, 0, 0.15);\r\n\tmargin: auto;\r\n}\r\n\r\n#formDiv {\r\n\tmargin: 30% auto;\r\n}\r\n\r\n#roomInput {\r\n\tborder: none; \r\n\tpadding: 0 1rem;\r\n\tflex-grow: 1;\r\n\tborder-radius: 2rem;\r\n\tmargin: 0.25rem;\r\n}\r\n\r\n#roomInput:focus {\r\n\toutline: none;\r\n}\r\n\r\n#roomButton {\r\n\tbackground: #333;\r\n\tborder: none;\r\n\tpadding: 0 1rem; \r\n\tmargin: 0.25rem; \r\n\tborder-radius: 3px; \r\n\toutline: none; \r\n\tcolor: #fff;\r\n}\r\n#roomButton:hover {\r\n\tbackground: gray;\r\n}\r\n\r\n#lobby-div {\r\n\t\r\n\twidth: 80%;\r\n}\r\n#lobby-div > h1 {\r\n\tbackground: #fff;\r\n\ttext-align: center;\r\n}\r\n#lobby-form { \r\n\tbackground: rgba(0, 0, 0, 0.15); \r\n\tpadding: 0.25rem; \r\n\tposition: fixed; \r\n\tbottom: 0; \r\n\tleft: 0; \r\n\tright: 0; \r\n\tdisplay: flex; \r\n\theight: 3rem; \r\n\tbox-sizing: border-box; \r\n\tbackdrop-filter: blur(10px); \r\n}\r\n#lobby-input { \r\n\tborder: none; \r\n\tpadding: 0 1rem; \r\n\tflex-grow: 1; \r\n\tborder-radius: 2rem; \r\n\tmargin: 0.25rem; \r\n}\r\n#lobby-input:focus { outline: none; }\r\n#lobby-form > button { \r\n\tbackground: #333; \r\n\tborder: none; \r\n\tpadding: 0 1rem; \r\n\tmargin: 0.25rem; \r\n\tborder-radius: 3px; \r\n\toutline: none; \r\n\tcolor: #fff; \r\n}\r\n#lobby-form > button:hover {\r\n\tbackground: gray;\r\n}\r\n\r\n#lobby-messages { \r\n\tbackground: #fff; \r\n\tlist-style-type: none; \r\n\tmargin: 100px 0; \r\n\tpadding: 0; \r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n#lobby-messages > li { padding: 0.5rem 1rem; }\r\n#lobby-messages > li:nth-child(odd) { background: #efefef; }\r\n#lobby-start-game {\r\n\twidth: 100px;\r\n\theight: 50px;\r\n}\r\n\r\n/* splash div */\r\n#splash-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\theight: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.btn {\r\n\tbackground: #B8C3D9;\r\n\tborder: none;\r\n\tmargin: auto;\r\n\theight: 5em;\r\n\twidth: 13em;\r\n\ttransition: transform .3s ease-in-out;\r\n\tbox-shadow: \r\n\t\t0 1.4px 1.1px rgba(0, 0, 0, 0.034),\r\n\t\t0 3.4px 2.6px rgba(0, 0, 0, 0.048),\r\n\t\t0 7.7px 5px rgba(0, 0, 0, 0.06),\r\n\t\t0 11.15px 8.5px rgba(0, 0, 0, 0.086),\r\n\t\t0 50px 40px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.btn:hover {\r\n\ttransition: .3s ease-in-out;\r\n\ttransform: scale(1.1);\r\n\tbackground: #7383A6;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n/* form div */\r\n#form-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\theight: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n#room-form {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n}\r\n\r\n#room-input {\r\n\ttext-align: center;\r\n\twidth: 50%;\r\n\tmargin: auto;\r\n\tline-height: 1.5;\r\n  \tfont: 700 1.2rem 'Roboto Slab', sans-serif;\r\n  \tpadding: 1em 2em;\r\n  \tletter-spacing: 0.05rem;\r\n}\r\n\r\n#room-button {\r\n \tmargin: auto;\r\n}\r\n\r\n/* lobby rooms list */\r\n#lobby-rooms-list-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 21em;\r\n\tmargin: 15em auto auto auto;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tbox-shadow: \r\n\t\t0 2.8px 2.2px rgba(0, 0, 0, 0.034),\r\n\t\t0 6.7px 5.3px rgba(0, 0, 0, 0.048),\r\n\t\t0 15.5px 10px rgba(0, 0, 0, 0.06),\r\n\t\t0 22.3px 17.9px rgba(0, 0, 0, 0.086),\r\n\t\t0 100px 80px rgba(0, 0, 0, 0.12);\r\n\r\n}\r\n\r\n#lobby-rooms-list-div > ul > li > button {\r\n\tmargin: 1.3em;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n@mixin btn-border-drawing($color: #FFEECD, $hover: black, $width: 2px, $vertical: top, $horizontal: left, $duration: 0.25s) {\r\n//   box-shadow: inset 0 0 0 $width $color;\r\n  color: $color;\r\n  transition: color $duration $duration/3;\r\n  position: relative;\r\n  \r\n  &::before,\r\n  &::after {\r\n    border: 0 solid transparent;\r\n    box-sizing: border-box;\r\n    content: '';\r\n    pointer-events: none;\r\n    position: absolute;\r\n    width: 0; height: 0;\r\n    \r\n    #{$vertical}: 0; \r\n    #{$horizontal}: 0;\r\n  }\r\n\r\n  &::before {\r\n    $h-side: if($horizontal == 'left', 'right', 'left');\r\n    \r\n    border-#{$vertical}-width: $width;\r\n    border-#{$h-side}-width: $width;\r\n  }\r\n  \r\n  &::after {\r\n    $v-side: if($vertical == 'top', 'bottom', 'top');\r\n    \r\n    border-#{$v-side}-width: $width;\r\n    border-#{$horizontal}-width: $width;\r\n  }\r\n  \r\n  &:hover {\r\n    color: $hover;\r\n    \r\n    &::before,\r\n    &::after {\r\n      border-color: $hover;\r\n      transition: border-color 0s, width $duration, height $duration;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    \r\n    &::before { transition-delay: 0s, 0s, $duration; }\r\n    \r\n    &::after { transition-delay: 0s, $duration, 0s; }\r\n  }\r\n}\r\n\r\n.btn {\r\n  @include btn-border-drawing(#403174, #B1A9CD, 4px, bottom, right);\r\n}\r\n.controller-btn {\r\n  @include btn-border-drawing(#403174, #B1A9CD, 4px, bottom, right);\r\n}\r\n\r\n//=== Button styling, semi-ignore\r\n.btn {\r\n//   border: none;\r\n  cursor: pointer;\r\n  line-height: 1.5;\r\n  font: 700 1.2rem 'Roboto Slab', sans-serif;\r\n  padding: 1em 2em;\r\n  letter-spacing: 0.05rem;\r\n  \r\n//   &:focus { outline: 2px dotted #4D618C; }\r\n}\r\n\r\n#winner-div {\r\n\tbackground: #A6B1C9;\r\n\twidth: 30vw;\r\n\theight: 30vw;\r\n\tmargin: auto;\r\n\tposition: relative;\r\n}\r\n#winner-message {\r\n\tcolor: #403174;\r\n\tfont-family: 'Quantico', sans-serif;\r\n\tfont-size: 3em;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n\tposition: absolute;\r\n\tbottom: 50%;\r\n}"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=t(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var A=[].concat(t[a]);n&&i[A[0]]||(r&&(A[2]?A[2]="".concat(r," and ").concat(A[2]):A[2]=r),e.push(A))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var r,n,i=(n=4,function(t){if(Array.isArray(t))return t}(r=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(i)throw o}}return r}}(r,n)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(A," */"),c=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(c).concat([l]).join("\n")}return[o].join("\n")}},435:t=>{var e=1e3,r=60*e,n=60*r,i=24*n;function o(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,s){s=s||{};var a,A,l=typeof t;if("string"===l&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*n;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(t);if("number"===l&&isFinite(t))return s.long?(a=t,(A=Math.abs(a))>=i?o(a,A,i,"day"):A>=n?o(a,A,n,"hour"):A>=r?o(a,A,r,"minute"):A>=e?o(a,A,e,"second"):a+" ms"):function(t){var o=Math.abs(t);return o>=i?Math.round(t/i)+"d":o>=n?Math.round(t/n)+"h":o>=r?Math.round(t/r)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},227:(t,e,r)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))})),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=r(447)(e);const{formatters:n}=t.exports;n.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},447:(t,e,r)=>{t.exports=function(t){function e(t){let r,i=null;function o(...t){if(!o.enabled)return;const n=o,i=Number(new Date),s=i-(r||i);n.diff=s,n.prev=r,n.curr=i,r=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((r,i)=>{if("%%"===r)return"%";a++;const o=e.formatters[i];if("function"==typeof o){const e=t[a];r=o.call(n,e),t.splice(a,1),a--}return r})),e.formatArgs.call(n,t),(n.log||e.log).apply(n,t)}return o.namespace=t,o.useColors=e.useColors(),o.color=e.selectColor(t),o.extend=n,o.destroy=e.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null===i?e.enabled(t):i,set:t=>{i=t}}),"function"==typeof e.init&&e.init(o),o}function n(t,r){const n=e(this.namespace+(void 0===r?":":r)+t);return n.log=this.log,n}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let r;e.save(t),e.names=[],e.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(435),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((r=>{e[r]=t[r]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let r=0;for(let e=0;e<t.length;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return e.colors[Math.abs(r)%e.colors.length]},e.enable(e.load()),e}},549:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},983:(t,e,r)=>{const n=r(279);t.exports=(t,e)=>new n(t,e),t.exports.Socket=n,t.exports.protocol=n.protocol,t.exports.Transport=r(496),t.exports.transports=r(352),t.exports.parser=r(743)},279:(t,e,r)=>{const n=r(352),i=r(767),o=r(227)("engine.io-client:socket"),s=r(743),a=r(187),A=r(830);class l extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{}},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=A.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),this.open()}createTransport(t){o('creating transport "%s"',t);const e=function(t){const e={};for(let r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.opts.query);e.EIO=s.protocol,e.transport=t,this.id&&(e.sid=this.id);const r=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return o("options: %j",r),new n[t](r)}open(){let t;if(this.opts.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){const t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return o("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){o("setting transport %s",t.name);const e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))}probe(t){o('probing transport "%s"',t);let e=this.createTransport(t,{probe:1}),r=!1;const n=this;function i(){if(n.onlyBinaryUpgrades){const t=!this.supportsBinary&&n.transport.supportsBinary;r=r||t}r||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!r)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(o("changing transport and sending upgrade packet"),p(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{o('probe transport "%s" failed',t);const r=new Error("probe error");r.transport=e.name,n.emit("upgradeError",r)}})))}function s(){r||(r=!0,p(),e.close(),e=null)}function a(r){const i=new Error("probe error: "+r);i.transport=e.name,s(),o('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",i)}function A(){a("transport closed")}function c(){a("socket closed")}function d(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),s())}function p(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",A),n.removeListener("close",c),n.removeListener("upgrading",d)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",A),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(o("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){o("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout)}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,r){return this.sendPacket("message",t,e,r),this}send(t,e,r){return this.sendPacket("message",t,e,r),this}sendPacket(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"===this.readyState||"closed"===this.readyState)return;(r=r||{}).compress=!1!==r.compress;const i={type:t,data:e,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}close(){const t=this;function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(t){o("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);const r=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),r.writeBuffer=[],r.prevBufferLen=0}}filterUpgrades(t){const e=[];let r=0;const n=t.length;for(;r<n;r++)~this.transports.indexOf(t[r])&&e.push(t[r]);return e}}l.priorWebsocketSuccess=!1,l.protocol=s.protocol,t.exports=l},496:(t,e,r)=>{const n=r(743),i=r(767);t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=n.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},352:(t,e,r)=>{const n=r(777),i=r(416),o=r(785),s=r(442);e.polling=function(t){let e,r=!1,s=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let n=location.port;n||(n=e?443:80),r=t.hostname!==location.hostname||n!==t.port,s=t.secure!==e}if(t.xdomain=r,t.xscheme=s,e=new n(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new o(t)},e.websocket=s},785:(t,e,r)=>{const n=r(214),i=r(549),o=/\n/g,s=/\\n/g;let a;t.exports=class extends n{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length;const e=this;a.push((function(t){e.onData(t)})),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};const r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){const r=this;let n;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),r=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=r,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function i(){a(),e()}function a(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{const t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){n=document.createElement("iframe"),n.name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),a(),t=t.replace(s,"\\\n"),this.area.value=t.replace(o,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&i()}:this.iframe.onload=i}}},416:(t,e,r)=>{const n=r(777),i=r(214),o=r(767),{pick:s}=r(839),a=r(549),A=r(227)("engine.io-client:polling-xhr");function l(){}const c=null!=new n({xdomain:!1}).responseType;class d extends o{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=s(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new n(t),r=this;try{A("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},A("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=d.requestsCount++,d.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete d.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function p(){for(let t in d.requests)d.requests.hasOwnProperty(t)&&d.requests[t].abort()}d.requestsCount=0,d.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",p):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",p,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=c&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new d(this.uri(),t)}doWrite(t,e){const r=this.request({method:"POST",data:t}),n=this;r.on("success",e),r.on("error",(function(t){n.onError("xhr post error",t)}))}doPoll(){A("xhr poll");const t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=d},214:(t,e,r)=>{const n=r(496),i=r(830),o=r(743),s=r(281),a=r(227)("engine.io-client:polling");t.exports=class extends n{get name(){return"polling"}doOpen(){this.poll()}pause(t){const e=this;function r(){a("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||r()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||r()})))}else r()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){const e=this;a("polling got data %s",t),o.decodePayload(t,this.socket.binaryType).forEach((function(t,r,n){if("opening"===e.readyState&&"open"===t.type&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a('ignoring poll - transport state "%s"',this.readyState))}doClose(){const t=this;function e(){a("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(a("transport open - closing"),e()):(a("transport not open - deferring close"),this.once("open",e))}write(t){this.writable=!1,o.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let r="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=s()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(r=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+r+this.opts.path+t}}},866:(t,e,r)=>{const n=r(549);t.exports={WebSocket:n.WebSocket||n.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},442:(t,e,r)=>{const n=r(496),i=r(743),o=r(830),s=r(281),{pick:a}=r(839),{WebSocket:A,usingBrowserWebSocket:l,defaultBinaryType:c}=r(866),d=r(227)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class h extends n{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,r=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(r.headers=this.opts.extraHeaders);try{this.ws=l&&!p?e?new A(t,e):new A(t):new A(t,e,r)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}addEventListeners(){const t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}}write(t){const e=this;this.writable=!1;let r=t.length,n=0;const o=r;for(;n<o;n++)!function(t){i.encodePacket(t,e.supportsBinary,(function(n){const i={};!l&&(t.options&&(i.compress=t.options.compress),e.opts.perMessageDeflate)&&("string"==typeof n?Buffer.byteLength(n):n.length)<e.opts.perMessageDeflate.threshold&&(i.compress=!1);try{l?e.ws.send(n):e.ws.send(n,i)}catch(t){d("websocket closed before onclose event")}--r||(e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0))}))}(t[n])}onClose(){n.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let r="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(r=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=s()),this.supportsBinary||(t.b64=1),t=o.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+r+this.opts.path+t}check(){return!(!A||"__initialize"in A&&this.name===h.prototype.name)}}t.exports=h},839:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,r)=>(t.hasOwnProperty(r)&&(e[r]=t[r]),e)),{})},777:(t,e,r)=>{const n=r(58),i=r(549);t.exports=function(t){const e=t.xdomain,r=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||n))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},712:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const r=Object.create(null);Object.keys(e).forEach((t=>{r[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},965:(t,e,r)=>{const{PACKET_TYPES_REVERSE:n,ERROR_PACKET:i}=r(712);let o;"function"==typeof ArrayBuffer&&(o=r(704));const s=(t,e)=>{if(o){const r=o.decode(t);return a(r,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const r=t.charAt(0);return"b"===r?{type:"message",data:s(t.substring(1),e)}:n[r]?t.length>1?{type:n[r],data:t.substring(1)}:{type:n[r]}:i}},929:(t,e,r)=>{const{PACKET_TYPES:n}=r(712),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,s=(t,e)=>{const r=new FileReader;return r.onload=function(){const t=r.result.split(",")[1];e("b"+t)},r.readAsDataURL(t)};t.exports=({type:t,data:e},r,a)=>{return i&&e instanceof Blob?r?a(e):s(e,a):o&&(e instanceof ArrayBuffer||(A=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(A):A&&A.buffer instanceof ArrayBuffer))?r?a(e instanceof ArrayBuffer?e:e.buffer):s(new Blob([e]),a):a(n[t]+(e||""));var A}},743:(t,e,r)=>{const n=r(929),i=r(965),o=String.fromCharCode(30);t.exports={protocol:4,encodePacket:n,encodePayload:(t,e)=>{const r=t.length,i=new Array(r);let s=0;t.forEach(((t,a)=>{n(t,!1,(t=>{i[a]=t,++s===r&&e(i.join(o))}))}))},decodePacket:i,decodePayload:(t,e)=>{const r=t.split(o),n=[];for(let t=0;t<r.length;t++){const o=i(r[t],e);if(n.push(o),"error"===o.type)break}return n}}},58:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},830:(t,e)=>{e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),n=0,i=r.length;n<i;n++){var o=r[n].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},187:t=>{var e=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var n,i,o=t,s=t.indexOf("["),a=t.indexOf("]");-1!=s&&-1!=a&&(t=t.substring(0,s)+t.substring(s,a).replace(/:/g,";")+t.substring(a,t.length));for(var A,l,c=e.exec(t||""),d={},p=14;p--;)d[r[p]]=c[p]||"";return-1!=s&&-1!=a&&(d.source=o,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(n=d.path,i=n.replace(/\/{2,9}/g,"/").split("/"),"/"!=n.substr(0,1)&&0!==n.length||i.splice(0,1),"/"==n.substr(n.length-1,1)&&i.splice(i.length-1,1),i),d.queryKey=(A=d.query,l={},A.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,r){e&&(l[e]=r)})),l),d}},751:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=e.io=e.Manager=e.protocol=void 0;const n=r(744),i=r(703),o=r(277);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return o.Socket}});const s=r(227)("socket.io-client");t.exports=e=A;const a=e.managers={};function A(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const r=n.url(t,e.path),o=r.source,A=r.id,l=r.path,c=a[A]&&l in a[A].nsps;let d;return e.forceNew||e["force new connection"]||!1===e.multiplex||c?(s("ignoring socket cache for %s",o),d=new i.Manager(o,e)):(a[A]||(s("new io instance for %s",o),a[A]=new i.Manager(o,e)),d=a[A]),r.query&&!e.query&&(e.query=r.queryKey),d.socket(r.path,e)}e.io=A;var l=r(485);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return l.protocol}}),e.connect=A;var c=r(703);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return c.Manager}})},703:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const n=r(983),i=r(277),o=r(767),s=r(485),a=r(657),A=r(10),l=r(227)("socket.io-client:manager");e.Manager=class extends o{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new A({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const r=e.parser||s;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(l("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=n(this.uri,this.opts);const e=this.engine,r=this;this._readyState="opening",this.skipReconnect=!1;const i=a.on(e,"open",(function(){r.onopen(),t&&t()})),o=a.on(e,"error",(e=>{l("error"),r.cleanup(),r._readyState="closed",super.emit("error",e),t?t(e):r.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;l("connect attempt will timeout after %d",t),0===t&&i();const r=setTimeout((()=>{l("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.subs.push((function(){clearTimeout(r)}))}return this.subs.push(i),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){l("open"),this.cleanup(),this._readyState="open",super.emit("open");const t=this.engine;this.subs.push(a.on(t,"ping",this.onping.bind(this)),a.on(t,"data",this.ondata.bind(this)),a.on(t,"error",this.onerror.bind(this)),a.on(t,"close",this.onclose.bind(this)),a.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){super.emit("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){super.emit("packet",t)}onerror(t){l("error",t),super.emit("error",t)}socket(t,e){let r=this.nsps[t];return r||(r=new i.Socket(this,t,e),this.nsps[t]=r),r}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void l("socket %s is still active, skipping close",t);this._close()}_packet(t){l("writing packet %j",t);const e=this.encoder.encode(t);for(let r=0;r<e.length;r++)this.engine.write(e[r],t.options)}cleanup(){l("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){l("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){l("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",super.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),super.emit("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();l("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const r=setTimeout((()=>{t.skipReconnect||(l("attempting reconnect"),super.emit("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(l("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),super.emit("reconnect_error",e)):(l("reconnect success"),t.onreconnect())})))}),e);this.subs.push((function(){clearTimeout(r)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),super.emit("reconnect",t)}}},657:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,r){return t.on(e,r),function(){t.off(e,r)}}},277:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const n=r(485),i=r(767),o=r(657),s=r(227)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});e.Socket=class extends i{constructor(t,e,r){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.auth&&(this.auth=r.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[o.on(t,"open",this.onopen.bind(this)),o.on(t,"packet",this.onpacket.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');e.unshift(t);const r={type:n.PacketType.EVENT,data:e,options:{}};r.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(s("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(r):this.sendBuffer.push(r):s("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){s("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:n.PacketType.CONNECT,data:t})})):this.packet({type:n.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||super.emit("connect_error",t)}onclose(t){s("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,super.emit("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case n.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else super.emit("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case n.PacketType.EVENT:case n.PacketType.BINARY_EVENT:this.onevent(t);break;case n.PacketType.ACK:case n.PacketType.BINARY_ACK:this.onack(t);break;case n.PacketType.DISCONNECT:this.ondisconnect();break;case n.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,super.emit("connect_error",e)}}onevent(t){const e=t.data||[];s("emitting event %j",e),null!=t.id&&(s("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const r of e)r.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let r=!1;return function(...i){r||(r=!0,s("sending ack %j",i),e.packet({type:n.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(s("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):s("bad ack %s",t.id)}onconnect(t){s("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,super.emit("connect"),this.emitBuffered()}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:n.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let r=0;r<e.length;r++)if(t===e[r])return e.splice(r,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}},744:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const n=r(187),i=r(227)("socket.io-client:url");e.url=function(t,e="",r){let o=t;r=r||"undefined"!=typeof location&&location,null==t&&(t=r.protocol+"//"+r.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?r.protocol+t:r.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==r?r.protocol+"//"+t:"https://"+t),i("parse %s",t),o=n(t)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";const s=-1!==o.host.indexOf(":")?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port+e,o.href=o.protocol+"://"+s+(r&&r.port===o.port?"":":"+o.port),o}},719:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const n=r(986);function i(t,e){if(!t)return t;if(n.isBinary(t)){const r={_placeholder:!0,num:e.length};return e.push(t),r}if(Array.isArray(t)){const r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=i(t[n],e);return r}if("object"==typeof t&&!(t instanceof Date)){const r={};for(const n in t)t.hasOwnProperty(n)&&(r[n]=i(t[n],e));return r}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let r=0;r<t.length;r++)t[r]=o(t[r],e);else if("object"==typeof t)for(const r in t)t.hasOwnProperty(r)&&(t[r]=o(t[r],e));return t}e.deconstructPacket=function(t){const e=[],r=t.data,n=t;return n.data=i(r,e),n.attachments=e.length,{packet:n,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t}},485:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const n=r(767),i=r(719),o=r(986),s=r(227)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return s("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!o.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),s("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),r=this.encodeAsString(e.packet),n=e.buffers;return n.unshift(r),n}};class A extends n{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new l(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!o.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const r={type:Number(t.charAt(0))};if(void 0===a[r.type])throw new Error("unknown packet type "+r.type);if(r.type===a.BINARY_EVENT||r.type===a.BINARY_ACK){const n=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(n,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");r.attachments=Number(i)}if("/"===t.charAt(e+1)){const n=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);r.nsp=t.substring(n,e)}else r.nsp="/";const n=t.charAt(e+1);if(""!==n&&Number(n)==n){const n=e+1;for(;++e;){const r=t.charAt(e);if(null==r||Number(r)!=r){--e;break}if(e===t.length)break}r.id=Number(t.substring(n,e+1))}if(t.charAt(++e)){const n=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!A.isPayloadValid(r.type,n))throw new Error("invalid payload");r.data=n}return s("decoded %s as %j",t,r),r}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=A;class l{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},986:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const r="function"==typeof ArrayBuffer,n=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===n.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===n.call(File);function s(t){return r&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||o&&t instanceof File}e.isBinary=s,e.hasBinary=function t(e,r){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let r=0,n=e.length;r<n;r++)if(t(e[r]))return!0;return!1}if(s(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&t(e[r]))return!0;return!1}},379:(t,e,r)=>{"use strict";var n,i=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),o=[];function s(t){for(var e=-1,r=0;r<o.length;r++)if(o[r].identifier===t){e=r;break}return e}function a(t,e){for(var r={},n=[],i=0;i<t.length;i++){var a=t[i],A=e.base?a[0]+e.base:a[0],l=r[A]||0,c="".concat(A," ").concat(l);r[A]=l+1;var d=s(c),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:c,updater:C(p,e),references:1}),n.push(c)}return n}function A(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,c=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function d(t,e,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=c(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function p(t,e,r){var n=r.css,i=r.media,o=r.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var h=null,u=0;function C(t,e){var r,n,i;if(e.singleton){var o=u++;r=h||(h=A(e)),n=d.bind(null,r,o,!1),i=d.bind(null,r,o,!0)}else r=A(e),n=p.bind(null,r,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var i=s(r[n]);o[i].references--}for(var A=a(t,e),l=0;l<r.length;l++){var c=s(r[l]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=A}}}},281:t=>{"use strict";var e,r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),n={},i=0,o=0;function s(t){var e="";do{e=r[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=s(+new Date);return t!==e?(i=0,e=t):t+"."+s(i++)}for(;o<64;o++)n[r[o]]=o;a.encode=s,a.decode=function(t){var e=0;for(o=0;o<t.length;o++)e=64*e+n[t.charAt(o)];return e},t.exports=a},733:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(984);class i{constructor(t,e){this.width=9,this.height=9,this.p1=t,this.p2=e,this.grid=i.makeGrid(this.width,this.height),this.winner=!1,this.util}setPlayers(t,e,r,n){this.util.trackFunctions("setPlayers");let i=this.grid[n[0]][n[1]],o=this.grid[e[0]][e[1]];i.model=r?"person":"ai",o.model=t?"person":"ai",i.player=this.p2,o.player=this.p1}checkNeighbors(t){this.util.trackFunctions("checkNeighbors");let e=[],r=t[1],n=t[0];return n-1>=0?e.push([n-1,r]):e.push([-1,-1]),n+1<=8?e.push([n+1,r]):e.push([-1,-1]),r-1>=0?e.push([n,r-1]):e.push([-1,-1]),r+1<=8?e.push([n,r+1]):e.push([-1,-1]),this.checkCrossWall(e)}checkCrossWall(t){return t}isWalled(t,e,r){this.util.trackFunctions("isWalled");let n=this.grid[e][r];if("up"===t){if(n.walls.North)return!0}else if("right"===t){if(n.walls.East)return!0}else if("down"===t){if(n.walls.South)return!0}else if("left"===t&&n.walls.West)return!0;return!1}bfs(t,e=["00","01","02","03","04","05","06","07","08"]){this.util.trackFunctions("bfs");let r=new Map,n=[],i=[];for(r.set(t,null),n.push(t),i.push(t.join(""));n.length>0;){let t=n.shift(),o=t.join(""),s=this.grid[t[0]][t[1]];if(e.includes(o)){let e=[];return e=this.traverseHashmap(r,t.join("")),e.push(t.join("")),[t.join(""),e]}if(!s.walls.North&&parseInt(t[0])>0){let e=t.join("").split("");e[0]=parseInt(e[0])-1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.South&&parseInt(t[0])<8){let e=t.join("").split("");e[0]=parseInt(e[0])+1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.East&&parseInt(t[1])<8){let e=t.join("").split("");e[1]=parseInt(e[1])+1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}if(!s.walls.West&&parseInt(t[1])>0){let e=t.join("").split("");e[1]=parseInt(e[1])-1,o=e.join(""),i.includes(o)||(i.push(o),n.push(e),r.set(e.join(""),t.join("")))}}return!1}traverseHashmap(t,e){this.util.trackFunctions("traverseHashmap");let r=t.get(e),n=[];for(;r;)n.push(r),r=t.get(r);return n.reverse()}static makeGrid(t,e){const r=[];for(let i=0;i<e;i++){r.push([]);for(let e=0;e<t;e++){let t=new n.Z(e,i);r[i].push(t)}}return r}static isValidPos(t,e){return!(t<0||e<0||t>8||e>8)}}},417:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(733);class i{constructor(t,e){this.socket=t,this.room=e,this.player1ID=e.player1,this.player2ID=e.player2,this.board=new n.Z(this.player1ID,this.player2ID),this.grid=this.board.grid,this.currentPlayer="noone",this.player1=[8,4],this.player2=[0,4],this.player1Walls=10,this.player2Walls=10,this.state="not doing anything",this.util,this.movePlayer=this.movePlayer.bind(this)}isOver(){return this.util.trackFunctions("isOver"),null!==this.winner()}winner(){this.util.trackFunctions("winner");let t=null;for(let e=0;e<this.grid[0].length;e++)this.grid[0][e].player===this.player1ID&&(t=this.player1ID),this.grid[8][e].player===this.player2ID&&(t=this.player2ID);return t}takeTurn(t,e=null,r,n=null,i=null){this.util.trackFunctions("takeTurn"),"move"===t&&null===e&&this.movePlayer(r.target.id.split("")),"placeWall"===t&&this.placeWall(e,n,i)}placeWall(t,e,r){if(this.util.trackFunctions("placeWall"),e[0]>8||e[0]<0||r[0]>8||r[0]<0||e[1]>8||e[1]<0||r[1]>8||r[1]<0)return!1;let n,i,o=this.grid[e[0]][e[1]],s=this.grid[r[0]][r[1]],a=this.board.checkNeighbors([o.rowIdx,o.colIdx]),A=this.board.checkNeighbors([s.rowIdx,s.colIdx]);if(i=this.currentPlayer===this.player1ID?this.player1Walls:this.player2Walls,i>0){if("North"===t&&!o.walls.North&&!s.walls.North){if(o.walls.North=!0,s.walls.North=!0,this.grid[a[0][0]][a[0][1]].walls.South=!0,this.grid[A[0][0]][A[0][1]].walls.South=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"north",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[0][0],a[0][1]],wallD:[A[0][0],A[0][1]],player:this.currentPlayer}),!0;o.walls.North=!1,s.walls.North=!1,this.grid[a[0][0]][a[0][1]].walls.South=!1,this.grid[A[0][0]][A[0][1]].walls.South=!1}if("East"===t&&!o.walls.East&&!s.walls.East){if(o.walls.East=!0,s.walls.East=!0,this.grid[a[3][0]][a[3][1]].walls.West=!0,this.grid[A[3][0]][A[3][1]].walls.West=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"east",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[3][0],a[3][1]],wallD:[A[3][0],A[3][1]],player:this.currentPlayer}),!0;o.walls.East=!1,s.walls.East=!1,this.grid[a[3][0]][a[3][1]].walls.West=!1,this.grid[A[3][0]][A[3][1]].walls.West=!1}if("South"===t&&!o.walls.South&&!s.walls.South){if(o.walls.South=!0,s.walls.South=!0,this.grid[a[1][0]][a[1][1]].walls.North=!0,this.grid[A[1][0]][A[1][1]].walls.North=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"south",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[1][0],a[1][1]],wallD:[A[1][0],A[1][1]],player:this.currentPlayer}),!0;o.walls.South=!1,s.walls.South=!1,this.grid[a[1][0]][a[1][1]].walls.North=!1,this.grid[A[1][0]][A[1][1]].walls.North=!1}if("West"===t&&!o.walls.West&&!s.walls.West){if(o.walls.West=!0,s.walls.West=!0,this.grid[a[2][0]][a[2][1]].walls.East=!0,this.grid[A[2][0]][A[2][1]].walls.East=!0,n=this.findPath(),n)return this.currentPlayer===this.player1ID&&(this.player1Walls=this.player1Walls-1),this.currentPlayer===this.player2ID&&(this.player2Walls=this.player2Walls-1),this.socket.emit("placeWall",{roomId:this.room.id,dir:"west",wallA:[o.rowIdx,o.colIdx],wallB:[s.rowIdx,s.colIdx],wallC:[a[2][0],a[2][1]],wallD:[A[2][0],A[2][1]],player:this.currentPlayer}),!0;o.walls.West=!1,s.walls.West=!1,this.grid[a[2][0]][a[2][1]].walls.East=!1,this.grid[A[2][0]][A[2][1]].walls.East=!1}}return!1}movePlayer(t){let e,r,i,o,s;if(this.util.trackFunctions("movePlayer"),e=this.currentPlayer===this.player1ID?this.player1:this.player2,i=parseInt(t[0]),r=parseInt(t[1]),o=this.board.isWalled(t,e[0],e[1]),s=n.Z.isValidPos(r,i),s&&!o){let t=this.board.grid[e[0]][e[1]],n=this.board.grid[i][r];"empty"!==n.player||(t.player="empty",this.setPlayerPos(this.currentPlayer,[i,r]),n.player=this.currentPlayer,this.socket.emit("playerMove",{roomId:this.room.id,oldPos:[t.rowIdx,t.colIdx],newPos:[n.rowIdx,n.colIdx],player:this.currentPlayer}))}}getAvailableMoves(t){this.util.trackFunctions("getAvailableMoves");let e,r=[],n=this.grid[t[0]][t[1]],i=t[1],o=t[0];if(o-1>=0&&!n.walls.North)if(e=this.grid[o-1][i],"empty"===e.player)r.push([o-1,i]);else if([this.player1ID,this.player2ID].includes(e.player))if(o-2>=0&&!e.walls.North)r.push([o-2,i]);else{let t=o-2>=0?this.grid[o-2][i]:void 0;e.walls.North?(e.walls.East||r.push([o-1,i+1]),e.walls.West||r.push([o-1,i-1])):t||(e.walls.East||r.push([o-1,i+1]),e.walls.West||r.push([o-1,i-1]))}if(i+1<=8&&!n.walls.East)if(e=this.grid[o][i+1],"empty"===e.player)r.push([o,i+1]);else if([this.player1ID,this.player2ID].includes(e.player))if(i+2<=8&&!e.walls.East)r.push([o,i+2]);else{let t=i+2<=8?this.grid[o][i+2]:void 0;e.walls.East?(e.walls.North||r.push([o-1,i+1]),e.walls.South||r.push([o+1,i+1])):t||(e.walls.North||r.push([o-1,i+1]),e.walls.South||r.push([o+1,i+1]))}if(o+1<=8&&!n.walls.South)if(e=this.grid[o+1][i],"empty"===e.player)r.push([o+1,i]);else if([this.player1ID,this.player2ID].includes(e.player))if(o+2<=8&&!e.walls.South)r.push([o+2,i]);else{let t=o+2<=8?this.grid[o+2][i]:void 0;e.walls.South?(e.walls.East||r.push([o+1,i+1]),e.walls.West||r.push([o+1,i-1])):t||(e.walls.East||r.push([o+1,i+1]),e.walls.West||r.push([o+1,i-1]))}if(i-1>=0&&!n.walls.West)if(e=this.grid[o][i-1],"empty"===e.player)r.push([o,i-1]);else if([this.player1ID,this.player2ID].includes(e.player))if(i-2>=0&&!e.walls.West)r.push([o,i-2]);else{let t=i-2>=0?this.grid[o][i-2]:void 0;e.walls.West?(e.walls.North||r.push([o-1,i-1]),e.walls.South||r.push([o+1,i-1])):t||(e.walls.North||r.push([o-1,i-1]),e.walls.South||r.push([o+1,i-1]))}return r}setPlayerPos(t,e){this.util.trackFunctions("setPlayerPos"),t===this.player1ID?this.player1=e:t===this.player2ID&&(this.player2=e)}start(){this.util.trackFunctions("start"),this.board.setPlayers(!0,this.player1,!0,this.player2),this.currentPlayer=this.player1ID}swapTurn(){this.util.trackFunctions("swapTurn"),this.currentPlayer===this.player1ID?this.currentPlayer=this.player2ID:this.currentPlayer===this.player2ID&&(this.currentPlayer=this.player1ID)}findPath(){return this.util.trackFunctions("findPath"),!!this.board.bfs(this.player1)}}},535:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(891);class i{constructor(t,e,r){this.socket=t,this.room=e,this.body=document.querySelector("body"),this.game=r,this.board=this.game.board,this.grid=this.board.grid,this.squareA=null,this.squareB=null,this.neighbors=null,this.availableMoves=[],this.winner=null,this.util=new n.Z,this.game.util=this.util,this.game.board.util=this.util,this.setupBoard(),this.setupEventListeners()}show(){this.util.trackFunctions("show"),this.showBoard(),this.game.isOver()&&"noone"!==this.game.currentPlayer&&(this.winner||(this.game.currentPlayer===this.game.player2ID&&(this.winner=this.room.player1),this.game.currentPlayer===this.game.player1ID&&(this.winner=this.room.player2),this.socket.emit("winner",this.room.id,this.winner)))}showBoard(){this.util.trackFunctions("showBoard");for(let t=0;t<this.grid.length;t++)for(let e=0;e<this.grid[t].length;e++){let r=this.grid[t][e],n=t.toString()+e.toString(),i=document.getElementById(n);r.player===this.game.player1ID?(i.classList.add("player"),i.innerHTML="&#x265F"):r.player===this.game.player2ID?(i.classList.add("player"),i.innerHTML="&#x2659"):(i.classList.remove("player"),i.innerHTML=" "),r.walls.North&&(i.classList.remove("hall"),i.classList.add("wall-top")),r.walls.East&&(i.classList.remove("hall"),i.classList.add("wall-right")),r.walls.South&&(i.classList.remove("hall"),i.classList.add("wall-bottom")),r.walls.West&&(i.classList.remove("hall"),i.classList.add("wall-left"))}let t=document.getElementsByClassName("wall-counter"),e=document.getElementById("place");t[0].innerHTML=`player 1 has ${this.game.player1Walls} walls left`,t[1].innerHTML=`player 2 has ${this.game.player2Walls} walls left`,this.game.currentPlayer===this.game.player1ID&&0===this.game.player1Walls||this.game.currentPlayer===this.game.player2ID&&0===this.game.player2Walls?e.classList.add("hide"):"not doing anything"===this.game.state&&e.classList.contains("hide")&&e.classList.remove("hide");const r=this.game.currentPlayer===this.socket.id?"Your":"Opponent's";document.getElementById("player-turn").innerHTML=`${r} turn`}setupEventListeners(){this.util.trackFunctions("setupEventListeners"),this.body.addEventListener("click",(t=>{if(this.socket.id===this.game.currentPlayer){let e=this.game.state,r=t.target.classList,n=t.target.innerHTML;if("not doing anything"===e&&r.contains("button")&&("Place a wall"===n&&this.handlePlaceWallButton(t),"Move character"===n&&this.handleMovementButton(t)),"selecting squares"===e&&r.contains("floor")&&this.handleSquareClick(t),"selecting wall type"===e&&r.contains("button")&&("North"!==n&&"East"!==n&&"South"!==n&&"West"!==n||this.handleWallTypeButton(n,t)),"selecting desired move"===e&&this.availableMoves.includes(t.target)){this.game.takeTurn("move",null,t),document.getElementById("back").classList.add("hide");for(let t=0;t<this.availableMoves.length;t++)this.availableMoves[t].classList.remove("highlight");this.game.state="not doing anything",this.availableMoves=[],this.show()}"not doing anything"!==e&&r.contains("button")&&"back"===n&&this.handleBackButton(),"Restart"===n&&location.reload()}}),!1)}handlePlaceWallButton(t){if(this.util.trackFunctions("handlePlaceWallButton"),"noone"!==this.game.currentPlayer){this.game.state="selecting squares";let e=t.target;document.getElementById("back").classList.remove("hide"),this.body.getElementsByClassName("clickInstruct")[0].classList.remove("hide"),document.getElementById("move").classList.add("hide"),e.classList.add("hide")}}handleSquareClick(t){if(this.util.trackFunctions("handleSquareClick"),"noone"!==this.game.currentPlayer){let e=t.target;if(e.classList.contains("floor")&&null===this.squareA){t.target.classList.add("selectedWall"),this.squareA=e.id;let r=this.squareA.split("");r[0]=parseInt(r[0]),r[1]=parseInt(r[1]),this.neighbors=this.board.checkNeighbors(r);for(let t=0;t<this.neighbors.length;t++)if(-1!==this.neighbors[t][0]){let e=this.neighbors[t].join("");document.getElementById(e).classList.add("highlight")}this.changeNeighborsArrayToString(this.neighbors)}else e.classList.contains("floor")&&null!==this.squareA&&null===this.squareB&&this.neighbors.includes(e.id)&&(this.squareB=e.id);if(null!==this.squareA&&null!==this.squareB){this.body.getElementsByClassName("clickInstruct")[0].classList.add("hide"),this.grid[this.squareA.split("")[0]][this.squareA.split("")[1]],this.grid[this.squareB.split("")[0]][this.squareB.split("")[1]],this.squareA.split("")[0]===this.squareB.split("")[0]&&(this.squareA.split("")[0]>0&&this.body.getElementsByClassName("north")[0].classList.remove("hide"),this.squareA.split("")[0]<8&&this.body.getElementsByClassName("south")[0].classList.remove("hide")),this.squareA.split("")[1]===this.squareB.split("")[1]&&(this.squareA.split("")[1]>0&&this.body.getElementsByClassName("west")[0].classList.remove("hide"),this.squareA.split("")[1]<8&&this.body.getElementsByClassName("east")[0].classList.remove("hide"));for(let t=0;t<this.neighbors.length;t++)if(!this.neighbors[t].includes("-")){let e=this.neighbors[t];document.getElementById(e).classList.remove("highlight")}this.neighbors=[],t.target.classList.add("selectedWall"),this.game.state="selecting wall type"}}}handleWallTypeButton(t,e){this.util.trackFunctions("handleWallTypeButton");let r=document.getElementsByClassName("selectedWall");for(let t=0;t<r.length;t++){let e=r[t];setTimeout((()=>{e.classList.remove("selectedWall")}),0)}this.game.takeTurn("placeWall",t,e,this.squareA,this.squareB),this.body.getElementsByClassName("north")[0].classList.add("hide"),this.body.getElementsByClassName("east")[0].classList.add("hide"),this.body.getElementsByClassName("south")[0].classList.add("hide"),this.body.getElementsByClassName("west")[0].classList.add("hide"),this.body.getElementsByClassName("button")[0].classList.remove("hide"),document.getElementById("back").classList.add("hide"),document.getElementById("move").classList.remove("hide"),this.squareA=null,this.squareB=null,this.game.state="not doing anything",this.show()}handleMovementButton(t){if(this.util.trackFunctions("handleMovementButton"),"noone"!==this.game.currentPlayer){let t;document.getElementById("back").classList.remove("hide"),document.getElementById("place").classList.add("hide");let e=this.game.currentPlayer===this.game.player1ID?this.game.player1:this.game.player2,r=parseInt(e[0]),n=parseInt(e[1]);t=this.game.getAvailableMoves([r,n]);for(let e=0;e<t.length;e++){let r=document.getElementById(t[e].join(""));r.classList.add("highlight"),this.availableMoves.push(r)}this.game.state="selecting desired move"}}handleBackButton(){this.util.trackFunctions("handleBackButton"),this.game.state="not doing anything";let t=document.getElementsByClassName("controller-div")[0].childNodes;for(let e=0;e<t.length;e++)"place"===t[e].id||"move"===t[e].id?t[e].classList.remove("hide"):t[e].classList.add("hide");this.squareA=null,this.squareB=null,this.neighbors=null;for(let t=0;t<this.availableMoves.length;t++)this.availableMoves[t].classList.remove("highlight");let e=document.getElementsByClassName("selectedWall");for(let t=0;t<e.length;t++){let r=e[t];setTimeout((()=>{r.classList.remove("selectedWall")}),0)}this.availableMoves=[],this.show()}changeNeighborsArrayToString(t){this.util.trackFunctions("changeNeighborsArrayToString");for(let e=0;e<t.length;e++){let r=t[e].join("").toString();this.neighbors[e]=r,document.getElementById(`${r}`)}}createButton(t){this.util.trackFunctions("createButton");let e=document.createElement("button");return e.innerHTML=t,e.classList.add("button"),"Place a wall"===t?e.setAttribute("id","place"):"Move character"===t?e.setAttribute("id","move"):e.setAttribute("id",t),e.classList.add("controller-btn"),this.body.getElementsByClassName("controller-div")[0].appendChild(e),e}createRestartDiv(t,e){this.util.trackFunctions("createRestartDiv");let r=document.createElement("div"),n=document.createElement("h1"),i=document.createElement("button");r.setAttribute("id","restart-div"),i.setAttribute("id","restart"),n.innerHTML=`Congrats to ${e}!!!!`,i.innerHTML="Restart",r.appendChild(n),r.appendChild(i),t.appendChild(r)}setupBoard(){this.util.trackFunctions("setupBoard");let t=document.createElement("div"),e=document.createElement("div");this.body.appendChild(t);let r=document.createElement("table");e.appendChild(r),t.appendChild(e),t.classList.add("table"),r.setAttribute("id","board");let n=document.createElement("div");n.classList.add("player-turn"),n.setAttribute("id","player-turn"),n.innerHTML="Player 1's Turn",t.appendChild(n);let i=document.createElement("div");i.classList.add("controller-div"),t.appendChild(i);let o=document.createElement("div");o.classList.add("wall-counter-div"),o.setAttribute("id","wall-counter");let s=document.createElement("div"),a=document.createElement("div");s.classList.add("wall-counter"),a.classList.add("wall-counter"),s.innerHTML="player 1 has 10 walls left",a.innerHTML="player 2 has 10 walls left",o.appendChild(s),o.appendChild(a),t.appendChild(o),this.createButton("Place a wall"),this.createButton("Move character");let A=document.createElement("p");A.classList.add("clickInstruct"),A.innerHTML="Click two distinct squares...",A.classList.add("hide"),i.appendChild(A);let l=this.createButton("North"),c=this.createButton("East"),d=this.createButton("South"),p=this.createButton("West");l.classList.add("hide","north"),c.classList.add("hide","east"),d.classList.add("hide","south"),p.classList.add("hide","west"),i.appendChild(l),i.appendChild(d),i.appendChild(p),i.appendChild(c);let h=this.createButton("back");h.classList.add("hide"),i.appendChild(h);for(let t=0;t<9;t++){let e=document.createElement("tr");for(let r=0;r<9;r++){let n=document.createElement("td");n.id=`${t}${r}`,n.classList.add("floor","hall"),e.appendChild(n)}r.appendChild(e)}}}},984:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});class n{constructor(t,e){this.walls={North:!1,East:!1,South:!1,West:!1},this.colIdx=t,this.rowIdx=e,this.player="empty",this.model="noone"}}},891:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});class n{constructor(){this.map=new Map}trackFunctions(t){void 0!==this.map[t]&&0!==this.map[t]||this.map.set(t,1)}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(379),e=r.n(t),n=r(192);e()(n.Z,{insert:"head",singleton:!1}),n.Z.locals;var i=r(535),o=r(417),s=r(751);function a(t,e){const r=JSON.parse(e),n=new o.Z(t,r);let s=null;const a=new i.Z(t,r,n);n.start(),a.show(),t.on("playerMove",(t=>{let e=t.oldPos[0],r=t.oldPos[1],i=t.newPos[0],o=t.newPos[1];n.board.grid[e][r].player="empty",n.board.grid[i][o].player=t.player,n.swapTurn(),a.show()})),t.on("placeWall",(t=>{const e=t.wallA,r=t.wallB,i=t.wallC,o=t.wallD,s=n.board.grid[e[0]][e[1]],A=n.board.grid[r[0]][r[1]],l=n.board.grid[i[0]][i[1]],c=n.board.grid[o[0]][o[1]];"north"===t.dir?(s.walls.North=!0,A.walls.North=!0,l.walls.South=!0,c.walls.South=!0):"south"===t.dir?(s.walls.South=!0,A.walls.South=!0,l.walls.North=!0,c.walls.North=!0):"east"===t.dir?(s.walls.East=!0,A.walls.East=!0,l.walls.West=!0,c.walls.West=!0):"west"===t.dir&&(s.walls.West=!0,A.walls.West=!0,l.walls.East=!0,c.walls.East=!0),n.swapTurn(),a.show()})),t.on("gameOver",(e=>{n.currentPlayer="noone";let r=document.getElementsByClassName("table")[0];r&&r.remove(),s||(s=e,function(t,e){const r=document.createElement("div");r.setAttribute("id","winner-div");const n=document.createElement("h1");n.setAttribute("id","winner-message"),n.innerHTML=t===e?"CONGRATS YOU WON!!!":"sucks to suck.. try again next time",r.appendChild(n),document.getElementsByTagName("body")[0].appendChild(r),setTimeout((()=>{location.reload()}),5e3)}(t.id,e))}))}s.Manager,document.addEventListener("DOMContentLoaded",(function(){const t=s();(function(t){const e=document.createElement("div"),r=document.createElement("button"),n=document.createElement("button");e.setAttribute("id","splash-div"),r.setAttribute("id","create-room-button"),r.innerHTML="Create A Room",r.classList.add("btn"),n.setAttribute("id","join-room-button"),n.innerHTML="Join A Room",n.classList.add("btn"),e.appendChild(r),e.appendChild(n),r.addEventListener("click",(()=>{e.remove(),function(t){const e=document.createElement("form"),r=document.createElement("div"),n=document.createElement("input"),i=document.createElement("button");e.setAttribute("id","room-form"),r.setAttribute("id","form-div"),n.setAttribute("id","room-input"),n.setAttribute("placeholder","Type room name"),i.setAttribute("id","room-button"),i.classList.add("btn"),i.innerHTML="Go!",r.appendChild(e),e.appendChild(n),e.appendChild(i),document.getElementsByTagName("body")[0].appendChild(r),e.addEventListener("submit",(e=>{if(e.preventDefault(),n.value){const e=e=>{e?(r.remove(),t.emit("ready")):(n.setAttribute("placeholder","Room List is full"),setTimeout((()=>{location.reload()}),3e3))};t.emit("createRoom",n.value,e),n.value=""}})),t.on("join-room",(e=>{r.classList.add("hide"),function(t,e){if(!document.getElementById("lobby-div")){const r=document.createElement("div"),n=document.createElement("h1"),i=document.createElement("ul"),o=document.createElement("form"),s=document.createElement("input"),a=document.createElement("button"),A=document.createElement("button");r.setAttribute("id","lobby-div"),n.innerHTML=e,n.setAttribute("id","lobby-id"),i.setAttribute("id","lobby-messages"),A.setAttribute("id","lobby-start-game"),A.innerHTML="Start Game!",o.setAttribute("id","lobby-form"),o.setAttribute("action",""),s.setAttribute("id","lobby-input"),s.setAttribute("autocomplete","off"),a.innerHTML="send",o.appendChild(s),o.appendChild(a),i.appendChild(o),r.appendChild(n),r.appendChild(i),r.appendChild(A),document.getElementsByTagName("body")[0].appendChild(r),o.addEventListener("submit",(r=>{r.preventDefault(),s.value&&(t.emit("lobby-message",[e,s.value]),s.value="")})),A.addEventListener("click",(r=>{t.emit("start-game",[t.id,e])}))}}(t,e)})),t.on("lobby-message",(([t,e])=>{let r=document.createElement("li");r.textContent=t+" -> "+e,document.getElementById("lobby-messages").appendChild(r),window.scrollTo(0,document.body.scrollHeight)})),t.on("start-game",(([t,e])=>{document.getElementsByClassName("table")[0]||(document.getElementById("lobby-div").classList.add("hide"),a(t,e))}))}(t)})),n.addEventListener("click",(()=>{t.emit("getRoomNames",(r=>{(function(t,e){const r=document.createElement("div");r.setAttribute("id","lobby-rooms-list-div");const n=document.createElement("ul"),i=()=>{t.emit("ready")};for(let o=0;o<e.length;o++)if(e[o].sockets<2){const s=document.createElement("li"),a=document.createElement("button");s.appendChild(a),a.innerHTML=e[o].name,a.classList.add("btn"),a.addEventListener("click",(n=>{r.remove(),t.emit("joinRoom",e[o].id,i)})),n.appendChild(s)}return r.appendChild(n),document.getElementsByTagName("body")[0].appendChild(r),e.length})(t,r)>0?e.remove():document.getElementById("lobby-rooms-list-div").remove()}))})),document.getElementsByTagName("body")[0].appendChild(e)})(t),t.on("initGame",(e=>{a(t,e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,